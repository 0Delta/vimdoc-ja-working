COMMENT: 構文強調(テキストの色つけ)の使用法
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*usr_06.txt*	For Vim version 6.3.  Last change: 2002 Jul 14

		     VIM USER MANUAL - by Bram Moolenaar

			シンタックスハイライトの使い方


白黒だけのテキストは退屈です。カラーがあれば、ファイルも生き生きと見えます。
これは単に見た目が良いだけではなく、作業のスピードアップにもなります。意味
の違った文字列では色を変えましょう。そしてプリンタにも画面上と同じ色で印刷し
ましょう。

|06.1|	シンタックスハイライトを使おう
|06.2|	色がつかない？変な色になる？
|06.3|	違った色
|06.4|	カラーを使う？使わない？
|06.5|	カラー印刷
|06.6|	さらに

     Next chapter: |usr_07.txt|  ２つ以上のファイルを扱う
 Previous chapter: |usr_05.txt|  自分用の設定
Table of contents: |usr_toc.txt|

==============================================================================
*06.1*	シンタックスハイライトを使おう

次の簡単なコマンドで全てが始まります。 >

	:syntax enable

たいていの場合はこれを実行すると、あなたが編集しているファイルに合った色情報
が得られます。
vimはファイルタイプを元に適切と思われるシンタックスハイライト定義を読み込み
ます。結果、コメントは青、キーワードは茶色、文字列は赤、といった具合にカラー
表示になります。
これだと、ファイルをざっと見るのがになります。しばらくそれを使ってから、白黒
に戻ると同じことをするのにも時間がかかることでしょう。

いつもシンタックスハイライトを使うのであれば、":syntax enable"というコマンドを
|vimrc|ファイルに追加しておきます。

カラー端末の時だけ使いたいのであれば、次のコマンドを|vimrc|ファイルに追加し
てください。 >
	if &t_Co > 1
	   syntax enable
	endif

GUIバージョンの時だけでよければ、":syntax enable"を |gvimrc| ファイルに追加し
てください。

==============================================================================
*06.2*	色が付かない？変になる？

カラー表示がうまくいかない場合、いろいろな理由が考えられます。

- カラー端末じゃない。
	vimは、太字やイタリック、下線も使えます。でもそれだけではあまりカッコ
	良くはできません。カラー対応の端末を入手するのがいいでしょう。
	Unixなら、XFree86プロジェクト(|xfee-xterm|)のxtermがお勧めです。

- カラー端末であることをvimが解っていない。
	$TERMの設定が正しいかどうかを確認します。例えば、カラー対応のxtermを
	使っているのであれば、 >

		setenv TERM xterm-color
<
	もしくは（シェルによっては) >

		TERM=xterm-color; export TERM

<	のようにします。
	端末名と実際に使っている端末名は同じでないといけません。それを合せて
	もうまく動かないのなら、|xterm-color|をご覧ください。この文書にはvim
	の表示をカラー化する方法が書いてあります。(別にxtermに限った文書では
	ありません）

- ファイルタイプが識別できなかった。
	いくらvimでも古今東西のファイルタイプを知っているわけではありません。
	ファイルが使っている言語を伝えるのが難しい場合もあります。このコマン
	ドを使ってみてください。 >

		:set filetype
<
	この結果が"filetype="ならば、vimはそのファイルのタイプが理解できなか
	ったということです。ファイルタイプの指定は手動でもできます。 >

		:set filetype=fortran

<	どんなタイプが使えるかは、$VIMRUNTIME/syntax のディレクトリを見て
	ください。GUI版であれば、[シンタックス]メニューも使えます。
	ファイルタイプの設定はモード行(|modeline|)でも出来ます。モード行で
	指定すればそのファイルを編集する時には必ずハイライト表示になります。
	例えば、Makefileならば次の行が使えます。(ファイルの先頭行か最終行に
	置きます)
>
		# vim: syntax=make
<
	vimによるファイルタイプの自動検出には通常はファイル名の拡張子("."以
	降の部分)をよく使います。
	ファイルタイプを検出してvimに通知する方法については|new-filetype|を
	ご覧ください。

- そのファイルタイプ用のシンタックス定義がない
	似たファイルタイプの設定を、上の手順で使ってみることができます。それ
	でも不満な場合は、独自のシンタックス定義を書くこともできます。詳しく
	は|mysyntaxfile|をご覧ください。


色がおかしくなることもあるかも知れません。

- 色付きの文字が非常に読みづらい
	vimは現在の背景色を推測し、それが黒(もしくは同様の暗色)だと思えば、
	文字にはそれより明るい色を用います。逆に背景色が白(もしくは同様の
	明るい色)だと思えば、文字はそれより暗い色にします。vimの予想がはず
	れた場合、文字が読みづらくなる可能性があります。これは'background'
	オプションを設定することで解決できます。暗い背景色であれば、 >

		:set background=dark

<	とし、明るいバックグラウンドであれば、 >

		:set background=light

<	とします。
	このコマンドは":syntax enable"より＊前＊に置く必要がありますので注意
	してください。逆にすると、色は既に確定してしまっています。
	'background'の指定の後に":syntax reset"を行うと、デフォルトの色に戻
	すことができます。

- 末尾から先頭に向ってスクロールした時の色が間違っている
	vimは文脈解析の時にファイル全体を読み込むわけではありません。解析は
	画面上で見えている範囲に対して行います。これだと時間は大巾に節約でき
	るのですが、時には色を間違ってしまいます。これには CTRL-L を打つか、
	ちょっとだけ逆スクロールとスクロールをさせることでば簡単に直せます。
	完全な表示をさせるには、|:syn-sync|をご覧ください。一部のシンタック
	ス定義ファイルでは、正確な表示を行うために、ずっと後ろの方まで戻って
	解析をしています。詳しくは個々のシンタックス定義ファイルのヘルプをご
	覧ください。例えば、TeX用の定義ファイル|tex.vim|がそれを行っています。

==============================================================================
*06.3*	違った色を使う					*:syn-default-override*

デフォルトの色が好みでなければ、他の色テーマを使うことができます。GUI版
なら[編集]-[色テーマ]メニューが使えます。コマンドを入力することもできます。 >

	:colorscheme evening

"evening"というのは色テーマの名前です。他にも試していただきたいテーマを用意
しています。ディレクトリ $VIMRUNTIME/colors をご覧ください。

好みの色テーマを見つけたら、":colorscheme"コマンドで|vimrc|ファイルに追加で
きます。

自分で色テーマを作ることもできます。その手順は次の通りです。

1. 作りたいテーマに近い色テーマを選び、それを自分用のvimディレクトリにコピー
   します。Unixなら、このようにします。 >

	!mkdir ~/.vim/colors
	!cp $VIMRUNTIME/colors/morning.vim ~/.vim/colors/mine.vim
<
   vim自身が$VIMRUNTIMEの値を知っていますので、上のコマンドはvim中で行います。

2. 色テーマファイルを編集します。よく使う項目を掲げておきます。

	term		白黒端末の属性
	cterm		カラー端末の属性
	ctermfg		カラー端末の文字色
	ctermbg		カラー端末の背景色
	gui		GUI版での属性
	guifg		GUI版での文字色
	guibg		GUI版での背景色

   例えば、コメントを緑にするにはこのようにします。 >

	:highlight Comment ctermfg=green guifg=green
<
   "cterm"と"gui"の属性には、"bold"と"underline"が指定できます。両方を指定し
   たい場合は、"bold,underline"のように指停します。詳しくは|:highlight|をご
   覧ください。

3. 作った色テーマを使うようにvimに指定します。この行を|vimrc|に追加します。 >

	colorscheme mine

一番よく使っている色の組み合せがどのように見えるか知りたければ、このコマンド
を使います。 >

	:edit $VIMRUNTIME/syntax/colortest.vim
	:source %

このファイルはいろんな色の組み合せを表示します。その中でどれが読み易くて見た
目が良いかをチェックしてください。

==============================================================================
*06.4*	カラーか白黒か

文章をカラー表示することには大きな効果があります。でも、表示が遅すぎる時など
ハイライト表示を一時的に止めたいこともあるでしょう。 >

	:syntax clear

他のファイル(又は同じファイル)を再編集すると、元の色に戻ります。

							*:syn-off*
ハイライト表示を完全に止めたい場合は、このようにします。 >

	:syntax off

これで完全にハイライト表示を無効とし、全バッファのハイライト表示を除去します。

							*:syn-manual*
特定のファイルに対してだけハイライト表示にする場合はこのようにします。 >

	:syntax manual

これはハイライト表示を有効にしますが、編集を始める時に自動的にはハイライト表
示にはなりません。現在のバッファをハイライト表示に切り換るには、このように
'syntax'オプションを設定します。 >

	:set syntax=ON
<
==============================================================================
*06.5*	カラー印刷					*syntax-printing*

MS-Windowsバージョンでは、編集中のファイルをこのコマンドで印刷できます。 >

	:hardcopy

するといつもの印刷ダイアログが表示され、プリンタを選んだり、いくつかの設定
を行ったりできます。カラープリンタがあれば、出力結果はvim上での表示と同じに
なるはずです。但し、背景色を暗い色にしている場合は、白い紙で丁度良く見える
ような色に変更されます。

vimでの印刷方法を変更するために、いくつかのオプションがあります。
	'printdevice'
	'printheader'
	'printfont'
	'printoptions'

一部の行範囲だけを印刷するには、visualモードでその範囲を選択して、このコマ
ンドを入力します。 >

	v100j:hardcopy

"v"でvisualモードを開始し、"100j"で100行下まで移動します。この時その100行
が反転表示になります。次の":hardcopy"でその範囲を印刷します。もちろん、visual
モードの時に他のコマンドを使って移動することもできます。

もしPostScriptプリンタがあれば、Unixでも同じようにできます。そうでなければ、
多少の手間をかけなければなりません。まず文章をHTMLに変換し、次にそのHTMLを
Netscapeなどのブラウザで印刷するのです。

現在のファイルをHTMLに変換するにはこのコマンドを使います。 >

	:source $VIMRUNTIME/syntax/2html.vim

もしかしたらクラッシュしたかと勘違いしてしまうかもしれませんが、特に巨大なファ
イルではかなりの時間がかかる場合があります。しばらくすると別ウィンドウにHTML
コードが表示されます。これをどこかに保存しましょう。(保存場所は気にしないでお
きましょう。印刷した後で捨てるだけのファイルですから)
>
	:write main.c.html

このファイルをお好みのブラウザで開いて印刷してください。うまくいけば、vimの
画面での表示と全く同じものが印刷されます。詳しくは|2html.vim|をご覧ください。
全てが終わったら、HTMLファイルは削除してしまいましょう。

印刷の代りにそのHTMLファイルをwebサーバ上に置いて、他の人にカラー付きの文書
として提供することもできます。

==============================================================================
*06.6*	さらに詳しい情報は

|usr_44.txt|  独自のシンタックスハイライト
|syntax|      全ての詳細

==============================================================================

Next chapter: |usr_07.txt|  ２つ以上のファイルを扱う

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
