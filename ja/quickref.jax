COMMENT: クイックリファレンスガイド
STATUS: finished 6.0
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>

*quickref.txt*  For Vim version 6.0.  Last change: 2001 Sep 10


		  VIM REFERENCE MANUAL    by Bram Moolenaar

			    Quick reference guide

smz めも：移動とジャンプを原文を見直して、区別しないといけない
smz めも：atomを文字と訳した所があるが、ウソになってるかも。要チェック
smz       特に正規表現のトコロ。\(....\)でぐるーぷ化したものがatomになるから
smz めも：identifierの訳が不明。有意な単語のことかな？
smz メモ：ヤンク＋プットの組み合せか、コピー＋ペーストの組合せか？
smz めも：grコマンドがよくわからない

							 *quickref* *Contents*
 tag	  subject			 tag	  subject	~
|Q_ct|  ヘルプファイルの一覧		|Q_re|	繰り返しコマンド
|Q_lr|	移動: 左右			|Q_km|	キー割り付け(マッピング)
|Q_ud|	移動: 上下			|Q_ab|	短縮(省力入力)
|Q_tm|	移動: 文脈			|Q_op|	オプション
|Q_pa|	移動: パターン検索		|Q_ur|	Undo/Redoコマンド
|Q_ma|	移動: マーク			|Q_et|	外部コマンド
|Q_vm|	移動: 雑多			|Q_qf|	Quickfixコマンド？
|Q_ta|	移動: タグの利用		|Q_vc|	その他の雑多なコマンド
|Q_sc|	スクロール			|Q_ce|	Exモード: コマンド行編集
|Q_in|	挿入: 文字列の挿入(?) 		|Q_ra|	Exモード: 範囲指定
|Q_ai|	挿入: キー(?)			|Q_ex|	Exモード: 特殊文字
|Q_ss|	挿入: 特殊キー 			|Q_ed|	ファイル編集
|Q_di|	挿入: 合字(digraph)		|Q_fl|	引数リストの使い方
|Q_si|	挿入: 特殊な挿入 		|Q_wq|	書き出しと終了
|Q_de|	変更: 文字の削除 		|Q_st|	vimの起動方法
|Q_cm|	変更: 複写と移動  		|Q_ac|	自動コマンド
|Q_ch|	変更: 文字列の入れ換え		|Q_wi|	複数ウィンドウのコマンド
|Q_co|	変更: 複雑な変更(?)		|Q_bu|	バッファ一覧コマンド
|Q_vi|	ビジュアルモード		|Q_sy|	シンタックスハイライト
|Q_to|	テキストオブジェクト		|Q_gu|	GUIコマンド
					|Q_fo|  折り畳みコマンド

------------------------------------------------------------------------------
以下の説明中の N はコマンドの直前に回数指定ができることを示します。
------------------------------------------------------------------------------
*Q_lr*		左右の移動

|h|	N  h		左に N 桁移動 ( CTRL-H, <BS>, <Left> キーでも同じ)
|l|	N  l		右に N 桁移動 ( <Space>,<Right> キーでも同じ)
|0|	   0		行の先頭に移動 ( <Home> キーでも同じ)
|^|	   ^		行の先頭(但し空白文字類以外)に移動
|$|	N  $		行の末尾に移動。(N-1行、下に移動）
			( <End> キーでも同じ)
|g0|	N  g0		見た目が同じ行の先頭に移動。（複数行にまたがる時の
			動きが"0"と違います)
|g^|	N  g^		見た目が同じ行の先頭(但し空白文字類以外)に移動。
			（複数行にまたがる時の動きが"^"と違います）
|g$|	N  g$		行の末尾に移動。(複数行にまたがる時の動きが"$"と違
			います)
|gm|	N  gm		現在行の中央(端末の横巾の半分の桁位置)に移動
|bar|	N  |		N桁目に移動。(デフォルトは１)
|f|	N  f{char}	現在位置から右方向にあるN個目の{char}に移動
|F|	N  F{char}	現在位置から左方向にあるN個目の{char}に移動
|t|	N  t{char}	現在位置から右方向にあるN個目の{char}の左側に移動
|T|	N  T{char}	現在位置から左方向にあるN個目の{char}の左側に移動
|;|	N  ;		直前の"f", "F", "t", "T"を N 回繰り返す。
|,|	N  ,		直前の"f", "F", "t", "T"を逆方向に N 回繰り返す。
smz			※ f,F,t,Tで指定する{char}は１文字分の文字だけです。
------------------------------------------------------------------------------
*Q_ud*		上下の移動

|k|	N  k		上に N 行移動 ( CTRL-P, <Up> キーでも同じ)
|j|	N  j		下に N 行移動 ( CTRL-J, CTRL-N, <NL>,<Down> でも同じ)
|-|	N  -		上に N 行移動し、行頭の非空白文字に移動
|+|	N  +		下に N 行移動し、行頭の非空白文字に移動(CTRL-M, <CR>
			キーでも同じ)
|_|	N  _		下に N-1 行移動し,行頭の非空白文字に移動 
|G|	N  G		N 行目(デフォルトは最後の行)に移動し、行頭の非空白文
			字に移動
|gg|	N  gg		N 行目(デフォルトは１行目)に移動し、行頭の非空白文字
			に移動
|N%|	N  %		ファイルの N パーセント目に移動。このコマンドは N の
			指定が必須。無指定の場合は|%|コマンド扱い。
|gk|	N  gk		画面上で N 行上に移動。(複数行にまたがる行がある場合
			の動きが"k"と異なる)
|gj|	N  gj		画面上で N 行下に移動。(複数行にまたがる行がある場合
			の動きが"j"と異なる)
------------------------------------------------------------------------------
*Q_tm*		テキスト文脈単位の移動(?)

|w|	N  w		N 個目の単語分、先に進む
|W|	N  W		空白で区切られた単語(=|WORD|) N 個分、先に進む
|e|	N  e		N 個目の単語のお尻まで進む
|E|	N  E		空白で区切られた単語(=|WORD|) N 個目のお尻まで進む
|b|	N  b		N 個目の単語分、前に戻る
|B|	N  B		空白で区切られた単語(=|WORD|) N 個分、前に戻る
|ge|	N  ge		N 個目の単語のお尻まで戻る
|gE|	N  gE		空白で区切られた単語(=|WORD|) N 個目のお尻まで戻る

|)|	N  )		N センテンス(文)分、先に進む
|(|	N  (		N センテンス分、前に戻る
|}|	N  }		N パラグラフ(段落)分、先に進む
|{|	N  {		N パラグラフ分、前に戻る
|]]|	N  ]]		N セクション(章)分、先に進み、その先頭に移動
|[[|	N  [[		N セクション(章)分、前に戻り、その先頭に移動
|][|	N  ][		N セクション(章)分、先に進み、その末尾に移動
|[]|	N  []		N セクション(章)分、前に戻り、その末尾に移動
|[(|	N  [(		N 個目の呼応していない'('まで戻る
|[{|	N  [{		N 個目の呼応していない'{'まで戻る
|[m|	N  [m		N 個前のメソッドの先頭まで戻る(Java用)
|[M|	N  [M		N 個前のメソッドの末尾まで戻る(Java用)
|])|	N  ])		N 個目の呼応していない')'まで進む
|]}|	N  ]}		N 個目の呼応していない'}'まで進む
|]m|	N  ]m		N 個先のメソッドの先頭まで進む(Java用)
|]M|	N  ]M		N 個先のメソッドの末尾まで進む(Java用)
|[#|	N  [#		N 個目の呼応していない"#if"や"#else"まで戻る
|]#|	N  ]#		N 個目の呼応していない"#else"や"#endif"まで進む
|[star|	N  [*		N 個前のコメントの先頭まで戻る
|]star|	N  ]*		N 個先のコメントの末尾まで進む
------------------------------------------------------------------------------
*Q_pa*		Pattern searches

|/|	N  /{pattern}[/[offset]]<CR>
			N 回目の{pattern}を含む個所を順方向に検索
|?|	N  ?{pattern}[?[offset]]<CR>
			N 回目の{pattern}を含む個所を逆方向に検索
|/<CR>|	N  /<CR>	直前と同じ条件の検索を同じ方向に対して実施
|?<CR>|	N  ?<CR>	直前と同じ条件の検索を逆方向に対して実施
|n|	N  n		直前の検索を再実行
|N|	N  N		直前の検索を逆方向に再実行
|star|	N  *		カーソル位置にある識別子を順方向に検索
|#|	N  #		カーソル位置にあるパターン(?)を逆方向に検索
|gstar|	N  g*		"*"と同じだが、部分的な一致を検索
|g#|	N  g#		"#"と同じだが、部分的な一致を検索
|gd|	   gd		カーソル位置の識別子のローカル宣言に移動
|gD|	   gD		カーソル位置の識別子のグローバル宣言に移動

|pattern|		検索パターンでの特殊文字の扱い

			meaning		      magic   nomagic	~
			  任意の１文字に一致	.	\.
			          行頭に一致	^	^
			         <EOL>に一致	$	$
		            単語の先頭に一致	\<	\<
			    単語の末尾に一致	\>	\>
		    指定の範囲の１文字に一致	[a-z]	\[a-z]
      matches a single char not in the range	[^a-z]	\[^a-z]
		  	  識別子の文字に一致	\i	\i
		上の条件から数字を除いたもの	\I	\I
		 	キーワード文字に一致	\k	\k
		上の条件から数字を除いたもの	\K	\K
	      ファイル名(で使える)文字に一致	\f	\f
		上の条件から数字を除いたもの	\F	\F
			  表示可能文字に一致	\p	\p
		上の条件から数字を除いたもの	\P	\P
			    空白文字類に一致	\s	\s
			空白文字類以外に一致	\S	\S

				 <Esc>に一致	\e	\e
				 <Tab>に一致	\t	\t
				  <CR>に一致	\r	\r
				  <BS>に一致	\b	\b

	    直前に指定したatomと０回以上一致 	*	\*
	    直前に指定したatomと１回以上一致 	\+	\+
      直前に指定した文字と0回もしくは1回一致 	\+	\+
	    直前に指定した文字と2回～5回一致 	\{2,5}  \{2,5}
		       2種類の正規表現を列記	\|	\|
	  パターンをグループ化してatomとする	\(\)	\(\)

|search-offset|		検索パターンでのオフセット指定

    [num]	[num] 行下の１桁目
    +[num]	[num] 行下の１桁目
    -[num]	[num] 行上の１桁目
    e[+num]	一致した文字列の最後から [num] 桁右
    e[-num]	一致した文字列の最後から [num] 桁左
    s[+num]	一致した文字列の先頭から [num] 桁右
    s[-num]	一致した文字列の先頭から [num] 桁左
    b[+num]	一致した文字列の先頭(begin)から [num] 桁右
    b[-num]	一致した文字列の先頭(begin)から [num] 桁左
    ;{search-command}	次の{search-command}を実行する。
smz s[num]とb[num]の違いがよくわからない。beginって何？？？
smz ;コマンドの意図がよくわからない。？？？
------------------------------------------------------------------------------
*Q_ma*		Marks and motions

|m|	   m{a-zA-Z}	現在の場所を {a-zA-Z} としてマーク
|`a|	   `{a-z}	編集中のファイルのマーク{a-z} に移動
|`A|	   `{A-Z}	任意のファイルのマーク{A-Z} に移動
|`0|	   `{0-9}	vimが前回終了した時の場所に移動
|``|	   ``		直前のジャンプコマンドの前の場所に移動
|`quote|   `"		前回このファイルを編集した時の場所に移動
|`[|	   `[		直前に繰作もしくはペーストした文字列の先頭に移動
|`]|	   `]		直前に繰作もしくはペーストした文字列の末尾に移動
|`<|	   `<		(直前の)ビジュアルエリアの先頭に移動
|`>|	   `>		(直前の)ビジュアルエリアの末尾に移動
|`.|	   `.		このファイルで最後に変更した場所に移動
|'|	   '{a-zA-Z0-9[]'"<>.}
			` と同じだが、その行の先頭の非空白文字まで移動する
			点が異なる。
|:marks|  :marks	現在設定されているマークを一覧表示
|CTRL-O|  N  CTRL-O	ジャンプリストの N 番目に古い場所に移動
|CTRL-I|  N  CTRL-I	ジャンプリストの N 番目に新しい場所に移動
|:ju|	  :ju[mps]	ジャンプリストを一覧表示
------------------------------------------------------------------------------
*Q_vm*		雑他な移動コマンド

|%|	   %		呼応するカッコ類("(","[","{")や、コメント、"#if"/
			"#else"/"#endif"のペアを検索して移動
|H|	N  H		画面上で N 行目の最初の非空白文字に移動
|M|	   M		画面上の真ん中の行の最初の非空白文字に移動
|L|	N  L		画面上で下から N 行目の最初の非空白文字に移動

|go|	N  go			現バッファの N バイト目に移動
|:go|	:[range]go[to] [off]	現バッファの [off] バイト目に移動
------------------------------------------------------------------------------
*Q_ta*		Using tags

|:ta|	   :ta[g][!] {tag}	{tag}で指定したタグにジャンプ
|:ta|	   :[count]ta[g][!]	タグリストの[count]番目に新しいタグにジャンプ
|CTRL-]|      CTRL-]		変更がされていない限り、カーソル位置にあるタ
				グにジャンプ
|:ts|	   :ts[elect][!] [tag]	タグに合致する一覧を表示し、ジャンプ先を選択
|:tjump|   :tj[ump][!] [tag]	指定のタグ [tag] にジャンプ。もし、合致する
				タグが複数ある時は一覧から選択

|:tags|	   :tags		タグリストを一覧表示
|CTRL-T|   N  CTRL-T		タグリストの N 番目に古いタグにジャンプ
|:po|	   :[count]po[p][!]	タグリストの [count] 番目に古いタグにジャンプ
|:tnext|   :[count]tn[ext][!]	[count] 個分、次のタグにジャンプ
|:tp|      :[count]tp[revious][!] [count]個分、前のタグにジャンプ
|:tr|	   :[count]tr[ewind][!] [count]番目に一致するタグにジャンプ
|:tl|	   :tl[ast][!]		直前に一致したタグにジャンプ

|:ptag|	   :pt[ag] {tag}	{tag}タグを見るためのプレビュー画面を開く
|CTRL-W_}|     CTRL-W }		CTRL-] と同様だがプレビュー画面にジャンプ
|:pts|     :pts[elect]		":tselect"と同様だがプレビュー画面にジャンプ
|:ptjump|  :ptj[ump]		":tjump"と同様だがプレビュー画面にジャンプ
|:pclose|  :pc[lose]		タグプレビュー画面を閉じる。
|CTRL-W_z|     CTRL-W z		タグプレビュー画面を閉じる。
------------------------------------------------------------------------------
*Q_sc*		スクロール

|CTRL-E|	N  CTRL-E	画面を N 行逆方向スクロール(デフォルトは1)
|CTRL-D|	N  CTRL-D	画面を N 行逆方向スクロール(デフォルトは画面
				の半分)
|CTRL-F|	N  CTRL-F	画面を N ページ分先に進める
|CTRL-Y|	N  CTRL-Y	画面を N 行分スクロール(デフォルトは1)
|CTRL-U|	N  CTRL-U	画面を N 行分スクロール(デフォルトは画面の
				半分)
|CTRL-B|	N  CTRL-B	画面を N ページ分後ろに戻す
|z<CR>|		   z<CR> or zt	現在行を画面の１行目にして、再描画
|z.|		   z.	 or zz	現在行を画面の中央にして、再描画
|z-|		   z-	 or zb	現在行を画面の最下行にして、再描画

These only work when 'wrap' is off:
以下は'wrap'がoffになっている時のみ有効です。
|zh|		N  zh		画面を N 文字、右へスクロール
|zl|		N  zl		画面を N 文字、左へスクロール
|zH|		N  zH		画面桁数の半分だけ、右へスクロール
|zL|		N  zL		画面桁数の半分だけ、左へスクロール
------------------------------------------------------------------------------
*Q_in*		Inserting text

|a|		N  a	カーソル位置の後に文字列を(N回)追加
|A|		N  A	現在行の末尾に文字列を(N回)追加
|i|		N  i	カーソル位置の前に文字列を(N回)追加(<Insert>も同様)
|I|		N  I	現在行の最初の非空白文字の前に文字列を(N回)追加
|gI|		N  gI	現在行の先頭に文字列を(N回)追加
|o|		N  o	現在行の下に新たな行を追加し、文字列を(N回)追加する。
|O|		N  O	現在行に新たな行を挿入し、文字列を(N回)追加する。
|:startinsert|  :star[tinsert][!]  start Insert mode, append when [!] used
			Insertモードを開始する。[!]を指定するとAppendモードと
			なる。

ビジュアルモード用:
|v_b_I|    I	選択している全行の前に、同じ文字列を挿入する。
|v_b_A|	   A	選択している全行の後ろに、同じ文字列を挿入する。
------------------------------------------------------------------------------
*Q_ai*		挿入モードの扱い

|insert-index|	挿入モードのアルファベット順目次

挿入モードの終了:
|i_<Esc>|	<Esc>		  挿入モードを終わって、通常モードへ復帰
|i_CTRL-C|	CTRL-C		  <Esc>と同様。ただし、短縮形は展開しない
|i_CTRL-O|	CTRL-O {command}  {command}を実行し、挿入モードへ復帰

移動:
|i_<Up>|	cursor keys	  カーソルを上下左右に移動
|i_<S-Left>|	shift-left/right  １単語ごと左右に移動
|i_<S-Up>|	shift-up/down	  １画面ごと前後に移動
|i_<End>|	<End>		  その行の最終桁に移動
|i_<Home>|	<Home>		  その行の先頭桁に移動
------------------------------------------------------------------------------
*Q_ss*		挿入モードでの特殊キー

|i_CTRL-V|	CTRL-V {char}..	  insert character literally, or enter decimal
|i_CTRL-V|	CTRL-V {char}..	  指定の{char}、もしくは10進数指定のバイト値
				  を挿入
|i_<NL>|	<NL> or <CR> or CTRL-M or CTRL-J
				  改行して、新しい行を作成
|i_CTRL-E|	CTRL-E		  カーソル位置の直下の行の内容を１文字挿入
|i_CTRL-Y|	CTRL-Y		  カーソル位置の真上の行の内容を１文字挿入

|i_CTRL-A|	CTRL-A		  直前に挿入した文字列をもう一度挿入
|i_CTRL-@|	CTRL-@		  直前に挿入した文字列をもう一度挿入し、挿入
				  モードから復帰
|i_CTRL-R|	CTRL-R {0-9a-z%#:.-="}  指定のレジスタの内容を挿入

|i_CTRL-N|	CTRL-N		  カーソルの前にあるキーワードと合致する単語
				  を順方向に検索して挿入
|i_CTRL-P|	CTRL-P		  カーソルの前にあるキーワードと合致する単語
				  を逆方向に検索して挿入
|i_CTRL-X|	CTRL-X ...	  カーソルの前にある単語をいろんな方法で補完
				  する。

|i_<BS>|	<BS> or CTRL-H	  カーソルの前の１文字を削除
|i_<Del>|	<Del>		  カーソル位置の１文字を削除
|i_CTRL-W|	CTRL-W		  カーソル位置の１単語を削除
|i_CTRL-U|	CTRL-U		  現在行で入力した全部の文字を削除
|i_CTRL-T|	CTRL-T		  'shiftwidth'での指定分のインデントを現在行
				  の行頭に挿入
|i_CTRL-D|	CTRL-D		  'shiftwidth'での指定分のインデントを現在行
				  の行頭から削除
|i_0_CTRL-D|	0 CTRL-D	  現在行の全インデントを削除
|i_^_CTRL-D|	^ CTRL-D	  現在行の全インデントを削除。但し、次の行の
				  インデントには影響しない。
------------------------------------------------------------------------------
*Q_di*		合字(Digraphs)

|:dig|	   :dig[raphs]		現在の合字(ダイグラフ)情報を一覧表示
|:dig|	   :dig[raphs] {char1}{char2} {number} ...
				合字情報をリストに追加

挿入モード、又はコマンドラインモード:
|i_CTRL-K|	CTRL-K {char1} {char2}
				合字の入力
|i_digraph|	{char1} <BS> {char2}
				'digraph'オプションがONの場合、合字を入力
------------------------------------------------------------------------------
*Q_si*		特殊な挿入コマンド

|:r|	   :r [file]	   カーソル位置の後ろに [file] の内容を挿入
|:r!|	   :r! {command}   カーソル位置の後ろに {command} を実行した結果の
			   標準出力の内容を挿入
------------------------------------------------------------------------------
*Q_de*		文字列の削除

|x|	N  x		カーソル位置及びその後ろの N 文字を削除
|<Del>| N  <Del>	カーソル位置及びその後ろの N 文字を削除
|X|	N  X		カーソル位置の前の N 文字を削除
|d|	N  d{motion}	{motion}で指定された範囲の文字列を削除
|v_d|	{visual}d	ハイライト化された文字列を削除
|dd|	N  dd		N 行削除
|D|	N  D		(N-1 行後の)行末まで削除
|J|	N  J		N-1 行を結合して１行に(<EOL>を削除)
|v_J|	{visual}J	ハイライト化された文字列を結合
|gJ|	N  gJ		"J"と同じだが、行毎の空白は付けない。
|v_gJ|	{visual}gJ	"{visual}J"と同じだが、行毎の空白は付けない。
|:d|	:[range]d [x]	[range]で指定した範囲の行を削除 [それをレジスタxに]
------------------------------------------------------------------------------
*Q_cm*		Copying and moving text

|quote|	  "{char}	レジスタ{char}を指定。これに続いて、削除コマンドや
			ヤンクコマンド、ペーストコマンドを指定
|:reg|	  :reg		全レジスタの内容を表示
|:reg|	  :reg {arg}	{arg}で示されたレジスタの内容を表示
|y|	  N  y{motion}	{motion}で指定された範囲の文字列をレジスタにヤンク
			(コピー)
|v_y|	     {visual}y	ハイライト化された文字列をレジスタにヤンク
|yy|	  N  yy		N 行をレジスタにヤンク
|Y|	  N  Y		N 行をレジスタにヤンク
|p|	  N  p		カーソル位置の後にレジスタ内容をN回プット(ペースト)
|P|	  N  P		カーソル位置の前にレジスタ内容をN回プット(ペースト)
|]p|	  N  ]p		pと同じだが、インデントを現在行に合せる
|[p|	  N  [p		Pと同じだが、インデントを現在行に合せる
|gp|	  N  gp		pと同じだが、挿入した文字列の後にカーソルを移動
|gP|	  N  gP		Pと同じだが、挿入した文字列の後にカーソルを移動
------------------------------------------------------------------------------
*Q_ch*		文字列の変更

|r|	  N  r{char}	N 文字を{char}に置換
|gr|	  N  gr{char}	N 文字をレイアウトに影響を与えずに置換？？？
|R|	  N  R		置換モードへ (入力文字列を N 回繰り返す)
|gR|	  N  gR		仮想置換モードへ。置換モードと同じだが、レイアウト
			に影響しない。？？？
|v_b_r|	  {visual}r{char}
			ビジュアルブロックモード用: 選択範囲の各文字を{char}
			で、置換

	(変更とは = 文字列を削除し、挿入モードに入ること)
|c|	  N  c{motion}	{motion}で指定した範囲の文字列を変更
|v_c|	     {visual}c	ハイライト化された文字列を変更
|cc|	  N  cc		N 行を変更
|S|	  N  S		N 行を変更
|C|	  N  C		(N-1 行後の)行末までを変更
|s|	  N  s		N 文字を変更
|v_b_c|	     {visual}c	ビジュアルブロックモード用:選ばれている各行の内容を
			入力した文字列に置き換え
|v_b_C|	     {visual}C	ビジュアルブロックモード用:選ばれている各行の行末ま
			でを入力した文字列に置き換え

|~|	  N  ~		N 文字分の英文字の大文字/小文字を変換し、カーソルを
			移動
|v_~|	     {visual}~	ハイライト化された範囲の大文字/小文字を変換
|v_u|	     {visual}u	ハイライト化された範囲を小文字に変換
|v_U|	     {visual}U	ハイライト化された範囲を大文字に変換
|g~|	     g~{motion} {motion}で指定した範囲の大文字/小文字を変換
|gu|	     gu{motion} {motion}で指定した範囲を小文字に変換
|gU|	     gU{motion} {motion}で指定した範囲を大文字に変換
|v_g?|	     {visual}g? ハイライト化した範囲をrot13でエンコードする。
|g?|	     g?{motion} {motion}で指定した範囲をrot13でエンコードする。
smz			※ rot13というのはA->N,B->Oという置き換えのシーザ暗
smz			   号のこと。英語圏では昔から使われている。

|CTRL-A|  N  CTRL-A	カーソル位置もしくは後ろにある数字にNを加算する
|CTRL-X|  N  CTRL-X	カーソル位置もしくは後ろにある数字からNを減算する

|<|	  N  <{motion}	move the lines that are moved over with {motion} one
|<|	  N  <{motion}	{motion}で指定した範囲を'shiftwidth'分、インデントを
			解除
|<<|	  N  <<		N 行分、インデントを解除
|>|	  N  >{motion}	{motion}で指定した範囲を'shiftwidth'分、インデントを
			追加
|>>|	  N  >>		N 行分、インデントを追加
|gq|	  N  gq{motion}	{motion}で指定した範囲を'textwidth'で指定した長さに
			フォーマット
|:ce|	  :[range]ce[nter] [width]
			[range]の行範囲をセンタリング
|:le|	  :[range]le[ft] [indent]
			[range]の行範囲を( [indent] 分)左寄せ 
|:ri|	  :[range]ri[ght] [width]
			[range]の行範囲を( [width] 桁まで)右寄せ 
------------------------------------------------------------------------------
*Q_co*		複雑な変更処理

|!|	   N  !{motion}{command}<CR>
			{motion}で指定した範囲を{command}の結果出力に置き換え
|!!|	   N  !!{command}<CR>
			N 行を{command}の結果出力に置き換え
|v_!|	      {visual}!{command}<CR>
			ハイライト化された範囲を{command}の結果出力に置き換え
|:range!|  :[range]! {command}<CR>
			[range] の範囲を{command}の結果出力に置き換え
|=|	   N  ={motion}
			{motion}で指定した範囲を'equalprg'の結果出力に置き換え
|==|	   N  ==	N 行を'equalprg'の結果出力に置き換え
|v_=|	      {visual}=
			ハイライト化の範囲を'equalprg'の結果出力に置き換え
|:s|	   :[range]s[ubstitute]/{pattern}/{string}/[g][c]
			[range]の範囲の{pattern}を{string}に置き換え
			[g]を指定すると、見つかった全{pattern}を置き換える。
			[c]を指定すると、各置き換えを確認する
|:s|	   :[range]s[ubstitute] [g][c]
			直前の":s"を新たな範囲とオプションで繰り返す
|&|	      &		直前の":s"を現在行について繰り返す。(オプションなし)
|:ret|	   :[range]ret[ab][!] [tabstop]
			'tabstop'の値を変更し、それに従って空白、TABの類を
			適切な状態にする。
------------------------------------------------------------------------------
*Q_vi*		ビジュルモード

|visual-index|	ビジュアルモードコマンドの目次

|v|	   v		文字単位のvisualモードを開始   }  カーソルを動かして、
|V|	   V		行単位のvisualモードを開始     }  ハイライト化した範囲
|CTRL-V|   CTRL-V	矩形単位のvisualモードを開始   }  に対しコマンドを実行
|v_o|	   o		カーソル位置とハイライト範囲の先頭を入れ替え
|gv|	   gv		直前の選択範囲を選んだ状態でビジュアルモードを開始
|v_v|	   v		文字単位visualモードを開始、もしくは中断
|v_V|	   V		行単位visualモードを開始、もしくは中断
|v_CTRL-V| CTRL-V	単位visualモードを開始、もしくは中断
------------------------------------------------------------------------------
*Q_to*		文字列オブジェクト (visualモードか、オペレータ指定後

|v_aw|	N  aw		"a word"を選択(単語の前後の空白も削除)
|v_iw|	N  iw		"inner word"を選択(正味の単語だけを削除)
|v_aW|	N  aW		"a |WORD|"を選択
|v_iW|	N  iW		"inner |WORD|"を選択
|v_as|	N  as		"a sentence"を選択
|v_is|	N  is		"inner sentence"を選択
|v_ap|	N  ap		"a paragraph"を選択
|v_ip|	N  ip		"inner paragraph"を選択
|v_ab|	N  ab		"a block"( "[("～"])"の範囲)を選択
|v_ib|	N  ib		"inner block" ( "[("～"])"の範囲)を選択
|v_aB|	N  aB		"a Block" ( "[{"～"]}"の範囲)を選択
|v_iB|	N  iB		"inner Block" ( "[{"～"]}"の範囲)を選択
------------------------------------------------------------------------------
*Q_re*		繰り返しコマンド

|.|	   N  .		直前のコマンドを繰り返す。(回数はN回となる)
|q|	      q{a-z}	入力された文字群をレジスタ{a-z}に記録
|q|	      q{A-Z}	入力された文字群をレジスタ{a-z}に追加して記録
|q|	      q		記録を終了
|@|	   N  @{a-z}	レジスタ{a-z}の内容を N 回実行
|@@|	   N  @@	直前の@{a-z} を N 回実行
|:@|	      :@{a-z}	レジスタ{a-z}の内容をExコマンドとみなして、N回実行
|:@@|	      :@@	直前の:@{a-z} を N 回実行
|:g|	      :[range]g[lobal]/{pattern}/[cmd]
			[range]の中で、指定の{pattern}に合致する各行に対して
			[cmd]コマンド(デフォルトでは":p")を実行する。
|:g|	   :[range]g[lobal]!/{pattern}/[cmd]
			[range]の中で、指定の{pattern}に合致**しない**各行に
			対して[cmd]コマンド(デフォルトでは":p")を実行する。
|:so|	   :so[urce] {file}
			{file}からExコマンドを読み出す。
|:so|	   :so[urce]! {file}
			{file}からvimコマンドを読み出す。
|:sl|	   :sl[eep] [sec]
			[sec] 秒間の間、何もしない
|gs|	   N  gs	N 秒間の間、何もしない
------------------------------------------------------------------------------
*Q_km*		Key mapping

|:map|	     :ma[p] {lhs} {rhs}	  通常モード/visualモードで{lhs} を{rhs} 
				  に割り付け
|:map!|	     :ma[p]! {lhs} {rhs}  挿入モード/コマンドラインモードで{lhs} を
				  {rhs} に割り付け
|:noremap|   :no[remap][!] {lhs} {rhs}
				  ":map"と同じだが、{rhs}の再割り付けしない
|:unmap|     :unm[ap] {lhs}	  通常モード/visualモード用の{lhs} 定義を
				  削除
|:unmap!|    :unm[ap]! {lhs}	  挿入モード/コマンドラインモードの{lhs} 
				  定義を削除
|:map_l|     :ma[p] [lhs]	  通常モード/visualモード用の( [lhs]で始まる)
				  マップを一覧表示
|:map_l!|    :ma[p]! [lhs]	  挿入モード/コマンドラインモードの( [lhs]
				  で始まる) マップを一覧表示
|:cmap|	     :cmap/:cunmap/:cnoremap
				  ":map!"/":unmap!"/":noremap!" と同じだが、
				  コマンドラインモードのみ対象となる。
|:imap|	     :imap/:iunmap/:inoremap
				  ":map!"/":unmap!"/":noremap!" と同じだが、
				  挿入モードのみ対象となる。
|:nmap|	     :nmap/:nunmap/:nnoremap
				  ":map!"/":unmap!"/":noremap!" と同じだが、
				  通常モードのみ対象となる。
|:vmap|	     :vmap/:vunmap/:vnoremap
				  ":map!"/":unmap!"/":noremap!" と同じだが、
				  visualモードのみ対象となる。
|:omap|	     :omap/:ounmap/:onoremap
				  ":map!"/":unmap!"/":noremap!" と同じだが、
				  operator保留モードのみ対象となる。
|:mapc|      :mapc[lear]	  通常モード/Visualモード用のマップを削除
|:mapc|      :mapc[lear]!	  挿入モード/コマンドモード用のマップを削除
|:imapc|     :imapc[lear]	  挿入モード用のマップを削除
|:vmapc|     :vmapc[lear]	  visualモード用のマップを削除
|:omapc|     :omapc[lear]	  Operator保留モード用のマップを削除
|:nmapc|     :nmapc[lear]	  通常モード用のマップを削除
|:cmapc|     :cmapc[lear]	  コマンドラインモード用のマップを削除
|:mkexrc|    :mk[exrc][!] [file]  現在のマップ、短縮、設定を [file]に書き出
				  す。(デフォルトは".exrc"で[!]指定すると
				  上書きとなる)
|:mkvimrc|   :mkv[imrc][!] [file]
				  ":mkexrc"と同じ。但しデフォルトは".vimrc"
|:mksession| :mks[ession][!] [file]
				  ":mkvimrc"と同じ。ただし、現在のセッション
				  を後で続けられるように、現在のファイル名、
				  ウィンドウ情報などもいっしょに書き出す。
------------------------------------------------------------------------------
*Q_ab*		短縮形

|:abbreviate|	:ab[breviate] {lhs} {rhs}  短縮形 {lhs} を {rhs} で定義
|:abbreviate|	:ab[breviate] {lhs}	   {lhs}で始まる短縮形を一覧表示
|:abbreviate|	:ab[breviate]		   全短縮形を一覧表示
|:unabbreviate|	:una[bbreviate] {lhs}	   {lhs}の短縮形を削除
|:noreabbrev|	:norea[bbrev] [lhs] [rhs]  ":ab"と同じだが、 [rhs]の再定義は
					   しない
|:iabbrev|	:iab/:iunab/:inoreab	   ":ab"と同じだが、挿入モード用のみ
					   が対象
|:cabbrev|	:cab/:cunab/:cnoreab	   ":ab"と同じだが、コマンドライン
					   モード用のみが対象
|:abclear|	:abc[lear]		   全短縮形を削除
|:cabclear|	:cabc[lear]		   コマンドライン用の全短縮形を削除
|:iabclear|	:iabc[lear]		   挿入モード用の全短縮形を削除
------------------------------------------------------------------------------
*Q_op*		Options

|:set|		:se[t]			  変更した全オプションを表示
|:set|		:se[t] all		  termcap以外の全オプションを表示
|:set|		:se[t] termcap		  termcapオプションを表示
|:set|		:se[t] {option}		  論理値タイプの場合はオプション設定
					  (ONになる)
					  文字列、数値タイプでは内容を表示
|:set|		:se[t] no{option}	  論理値タイプのオプションをOFFに
|:set|		:se[t] inv{option}	  論理値タイプのオプションを反転。
|:set|		:se[t] {option}={value}	  文字列/数値タイプのオプションの値
					  を{value}に
|:set|		:se[t] {option}+={value}  文字列タイプのオプションに{value}
					  を追加数値タイプなら加算
|:set|		:se[t] {option}-={value}  文字列タイプのオプションから{value}
					  を除去
					  数値タイプなら{value}を減算
|:set|		:se[t] {option}?	  {option}の値を表示
|:set|		:se[t] {option}&	  {option}の値をデフォルト値に

|:setlocal|	:setl[ocal]		  ":set"と同じ、ただしオプションに
					  ローカル値を与える。(？？？)
|:setglobal|	:setg[lobal]		  ":set"と同じ、ただしローカルオプ
					  ションにグローバル値を与える。

|:fix|		:fix[del]		  't_kb'の値に従って、't_kD'の値を
					  セットする。
|:options|	:opt[ions]		  オプションの閲覧と設定を行うために
					  新たなウィンドウを開く。一覧は機能
					  順に並べられ、各行にはオプションの
					  説明とヘルプへのリンクをつけてある。

各オプションの簡易説明:				*option-list*
|'aleph'|	  |'al'|     Aleph文字(ヘブライ語)用のアスキーとする
|'allowrevins'|	  |'ari'|    挿入モードとコマンドラインモードで、 CTRL-_ を
			     使うことを認める。
|'altkeymap'|	  |'akm'|    デフォルトの第２言語(Farsi/ヘブライ)
|'autoindent'|	  |'ai'|     直前の行から新しい行のインデントを得る
|'autoread'|	  |'ar'|     vim以外でファイル変更した時に自動再読み込みする
|'autowrite'|	  |'aw'|     変更があったら、自動的に書き出す
|'autowriteall'|  |'awa'|    'autowrite'と同様だが、より多くのコマンドと連動
|'background'|	  |'bg'|     "dark"/"light"：ハイライト色の指定に使用
|'backspace'|	  |'bs'|     １行目でのBackSpaceの振る舞い
|'backup'|	  |'bk'|     上書きした時にバックアップを作成する。
|'backupcopy'|	  |'bkc'|    ファイルをrenameするのではなく、コピーする。
|'backupdir'|	  |'bdir'|   バックアップファイル用のディレクトリを指定
|'backupext'|	  |'bex'|    バックアップファイル用の拡張子
|'backupskip'|	  |'bsk'|    指定のパターンに合致するファイルはバックアップ
			     しない。
|'balloondelay'|  |'bdlay'|  バルーンヘルプ(?)が出るまでの遅延時間(ms)
|'ballooneval'|   |'beval'|  バルーン評価のON/OFF
|'binary'|	  |'bin'|    バイナリモードで、読み/書き/編集する
|'bioskey'|	  |'biosk'|  MS-DOS専用: 文字入力にbiosコールを使う
|'bomb'|		     prepend a Byte Order Mark to the file (？？？)
|'breakat'|	  |'brk'|    改行の理由となる文字（？？？）
|'browsedir'|	  |'bsdir'|  ブラウズを始めるディレクトリ
|'bufhidden'|	  |'bh'|     ウィンドウに繋がったバッファがなくなった時の動き
|'buflisted'|	  |'bl'|     バッファリストにバッファを表示するかどうか
|'buftype'|	  |'bt'|     特殊なタイプのバッファ
|'cdpath'|	  |'cd'|     ":cd"コマンドで検索するディレクトリ
|'cedit'|		     コマンドラインウィンドウを開くためのキー
|'charconvert'|   |'ccv'|    expression for character encoding conversion
|'cindent'|	  |'cin'|    Ｃ言語用のインデントを行う
|'cinkeys'|	  |'cink'|   'cindent'が有効な場合のインデントするキー
|'cinoptions'|	  |'cino'|   'cindent'が有効な場合のインデント方法
|'cinwords'|	  |'cinw'|   words where 'si' and 'cin' add an indent
|'clipboard'|	  |'cb'|     use the clipboard as the unnamed register
|'cmdheight'|	  |'ch'|     コマンドライン用に使う行数
|'cmdwinheight'|  |'cwh'|    コマンドラインウィンドウの高さ(？？？何が違う？)
|'columns'|	  |'co'|     画面上の桁数
|'comments'|	  |'com'|    コメント行を開始できるパターン
|'commentstring'| |'cms'|    コメント用テンプレート(foldマーカ用)
|'compatible'|	  |'cp'|     可能な限りVi互換で動く
|'complete'|	  |'cpt'|    挿入モードでの補完の動きを指定する
|'confirm'|	  |'cf'|     未保存ファイル、リードオンリファイルの確認方法
|'conskey'|	  |'consk'|  コンソールからの直接キー検出(MS-DOSのみ)
|'cpoptions'|	  |'cpo'|    vi互換な振る舞いのフラグ集
|'cscopepathcomp'| |'cspc'|  how many components of the path to show
|'cscopeprg'|	  |'csprg'|  cscopeを実行するためのコマンド定義
|'cscopetag'|	  |'cst'|    cscope for tag commands
|'cscopetagorder'| |'csto'|  determines ":cstag" search order
|'cscopeverbose'| |'csverb'| give messages when adding a cscope database
|'debug'|		     set to "msg" to see all error messages
|'define'|	  |'def'|    pattern to be used to find a macro definition
|'delcombine'|	  |'deco'|   delete combining characters on their own
|'dictionary'|	  |'dict'|   list of file names used for keyword completion
|'diff'|		     use diff mode for the current window
|'diffexpr'|	  |'dex'|    expression used to obtain a diff file
|'diffopt'|	  |'dip'|    options for using diff mode
|'digraph'|	  |'dg'|     enable the entering of digraphs in Insert mode
|'directory'|	  |'dir'|    list of directory names for the swap file
|'display'|	  |'dy'|     list of flags for how to display text
|'edcompatible'|  |'ed'|     toggle flags of ":substitute" command
|'eadirection'|   |'ead'|    in which direction 'equalalways' works
|'encoding'|	  |'enc'|    encoding used internally
|'endofline'|	  |'eol'|    write <EOL> for last line in file
|'equalalways'|   |'ea'|     windows are automatically made the same size
|'equalprg'|	  |'ep'|     external program to use for "=" command
|'errorbells'|	  |'eb'|     ring the bell for error messages
|'errorfile'|	  |'ef'|     name of the errorfile for the QuickFix mode
|'errorformat'|   |'efm'|    description of the lines in the error file
|'esckeys'|	  |'ek'|     recognize function keys in Insert mode
|'eventignore'|	  |'ei'|     autocommand events that are ignored
|'expandtab'|	  |'et'|     use spaces when <Tab> is inserted
|'exrc'|	  |'ex'|     read .vimrc and .exrc in the current directory
|'fileencoding'|  |'fenc'|   file encoding for multi-byte text
|'fileencodings'| |'fencs'|  automatically detected character encodings
|'fileformat'|	  |'ff'|     file format used for file I/O
|'fileformats'|	  |'ffs'|    automatically detected values for 'fileformat'
|'filetype'|	  |'ft'|     type of file, used for autocommands
|'fillchars'|	  |'fcs'|    characters to use for displaying special items
|'fkmap'|	  |'fk'|     Farsi keyboard mapping
|'foldclose'|	  |'fcl'|    close a fold when the cursor leaves it
|'foldcolumn'|	  |'fdc'|    width of the column used to indicate folds
|'foldenable'|	  |'fen'|    set to display all folds open
|'foldexpr'|	  |'fde'|    expression used when 'foldmethod' is "expr"
|'foldignore'|	  |'fdi'|    ignore lines when 'foldmethod' is "indent"
|'foldlevel'|	  |'fdl'|    close folds with a level higher than this
|'foldlevelstart'| |'fdls'|  'foldlevel' when startng to edit a file
|'foldmarker'|	  |'fmr'|    markers used when 'foldmethod' is "marker"
|'foldmethod'|	  |'fdm'|    folding type
|'foldminlines'|  |'fml'|    minimum number of lines for a fold to be closed
|'foldnestmax'|   |'fdn'|    maximum fold depth
|'foldopen'|	  |'fdo'|    for which commands a fold will be opened
|'foldtext'|	  |'fdt'|    expression used to display for a closed fold
|'formatoptions'| |'fo'|     how automatic formatting is to be done
|'formatprg'|	  |'fp'|     name of external program used with "gq" command
|'gdefault'|	  |'gd'|     the ":substitute" flag 'g' is default on
|'grepformat'|	  |'gfm'|    format of 'grepprg' output
|'grepprg'|	  |'gp'|     program to use for ":grep"
|'guicursor'|	  |'gcr'|    GUI: settings for cursor shape and blinking
|'guifont'|	  |'gfn'|    GUI: Name(s) of font(s) to be used
|'guifontset'|	  |'gfs'|    GUI: Names of multi-byte fonts to be used
|'guifontwide'|   |'gfw'|    list of font names for double-wide characters
|'guiheadroom'|	  |'ghr'|    GUI: pixels room for window decorations
|'guioptions'|	  |'go'|     GUI: Which components and options are used
|'guipty'|		     GUI: try to use a pseudo-tty for ":!" commands
|'helpfile'|	  |'hf'|     name of this help file
|'helpheight'|	  |'hh'|     minimum height of a new help window
|'hidden'|	  |'hid'|    don't unload buffer when it is |abandon|ed
|'highlight'|	  |'hl'|     sets highlighting mode for various occasions
|'hlsearch'|	  |'hls'|    highlight matches with last search pattern
|'history'|	  |'hi'|     number of command-lines that are remembered
|'hkmap'|	  |'hk'|     Hebrew keyboard mapping
|'hkmapp'|	  |'hkp'|    phonetic Hebrew keyboard mapping
|'icon'|		     let Vim set the text of the window icon
|'iconstring'|		     string to use for the Vim icon text
|'ignorecase'|	  |'ic'|     ignore case in search patterns
|'imactivatekey'| |'imak'|   key that activates the X input method
|'imcmdline'|	  |'imc'|    use IM when starting to edit a command line
|'iminsert'|	  |'imi'|    use :lmap or IM in Insert mode
|'imsearch'|	  |'ims'|    use :lmap or IM when typing a search pattern
|'include'|	  |'inc'|    pattern to be used to find an include file
|'includeexpr'|   |'inex'|   expression used to process an include line
|'incsearch'|	  |'is'|     highlight match while typing search pattern
|'indentexpr'|	  |'inde'|   expression used to obtain the indent of a line
|'indentkeys'|	  |'indk'|   keys that trigger indenting with 'indentexpr'
|'infercase'|	  |'inf'|    adjust case of match for keyword completion
|'insertmode'|	  |'im'|     start the edit of a file in Insert mode
|'isfname'|	  |'isf'|    characters included in file names and pathnames
|'isident'|	  |'isi'|    characters included in identifiers
|'iskeyword'|	  |'isk'|    characters included in keywords
|'isprint'|	  |'isp'|    printable characters
|'joinspaces'|	  |'js'|     two spaces after a period with a join command
|'key'|			     encryption key
|'keymap'|	  |'kmp'|    name of a keyboard mapping
|'keymodel'|	  |'km'|     enable starting/stopping selection with keys
|'keywordprg'|	  |'kp'|     program to use for the "K" command
|'langmap'|	  |'lmap'|   alphabetic characters for other language mode
|'langmenu'|	  |'lm'|     language to be used for the menus
|'laststatus'|	  |'ls'|     tells when last window has status lines
|'lazyredraw'|	  |'lz'|     don't redraw while executing macros
|'linebreak'|	  |'lbr'|    wrap long lines at a blank
|'lines'|		     number of lines in the display
|'linespace'|	  |'lsp'|    number of pixel lines to use between characters
|'lisp'|		     automatic indenting for Lisp
|'lispwords'|	  |'lw'|     words that change how lisp indenting works
|'list'|		     show <Tab> and <EOL>
|'listchars'|	  |'lcs'|    characters for displaying in list mode
|'loadplugins'|   |'lpl'|    load plugin scripts when starting up
|'magic'|		     changes special characters in search patterns
|'makeef'|	  |'mef'|    name of the errorfile for ":make"
|'makeprg'|	  |'mp'|     program to use for the ":make" command
|'matchpairs'|	  |'mps'|    pairs of characters that "%" can match
|'matchtime'|	  |'mat'|    tenths of a second to show matching paren
|'maxfuncdepth'|  |'mfd'|    maximum recursive depth for user functions
|'maxmapdepth'|   |'mmd'|    maximum recursive depth for mapping
|'maxmem'|	  |'mm'|     maximum memory (in Kbyte) used for one buffer
|'maxmemtot'|	  |'mmt'|    maximum memory (in Kbyte) used for all buffers
|'menuitems'|	  |'mis'|    maximum number of items in a menu
|'modeline'|	  |'ml'|     recognize modelines at start or end of file
|'modelines'|	  |'mls'|    number of lines checked for modelines
|'modifiable'|	  |'ma'|     changes to the text are not possible
|'modified'|	  |'mod'|    buffer has been modified
|'more'|		     pause listings when the whole screen is filled
|'mouse'|		     enable the use of mouse clicks
|'mousefocus'|	  |'mousef'| keyboard focus follows the mouse
|'mousehide'|	  |'mh'|     hide mouse pointer while typing
|'mousemodel'|	  |'mousem'| changes meaning of mouse buttons
|'mouseshape'|	  |'mouses'| shape of the mouse pointer in different modes
|'mousetime'|	  |'mouset'| max time between mouse double-click
|'nrformats'|	  |'nf'|     number formats recognized for CTRL-A command
|'number'|	  |'nu'|     print the line number in front of each line
|'osfiletype'|	  |'oft'|    operating system-specific filetype information
|'paragraphs'|	  |'para'|   nroff macros that separate paragraphs
|'paste'|		     allow pasting text
|'pastetoggle'|	  |'pt'|     key code that causes 'paste' to toggle
|'patchexpr'|	  |'pex'|    expression used to patch a file
|'patchmode'|	  |'pm'|     最初のバージョンを保全する
|'path'|	  |'pa'|     list of directories searched with "gf" et.al.
|'previewheight'| |'pvh'|    height of the preview window
|'previewwindow'| |'pvw'|    identifies the preview window
|'printdevice'|   |'pdev'|   name of the printer to be used for :hardcopy
|'printfont'|	  |'pfn'|    name of the font to be used for :hardcopy
|'printheader'|   |'pheader'| format of the header used for :hardcopy
|'printoptions'|  |'popt'|   controls the format of :hardcopy output
|'readonly'|	  |'ro'|     disallow writing the buffer
|'remap'|		     allow mappings to work recursively
|'report'|		     threshold for reporting nr. of lines changed
|'restorescreen'| |'rs'|     Win32: restore screen when exiting
|'revins'|	  |'ri'|     inserting characters will work backwards
|'rightleft'|	  |'rl'|     window is right-to-left oriented
|'ruler'|	  |'ru'|     show cursor line and column in the status line
|'rulerformat'|	  |'ruf'|    custom format for the ruler
|'runtimepath'|   |'rtp'|    list of directories used for runtime files
|'scroll'|	  |'scr'|    lines to scroll with CTRL-U and CTRL-D
|'scrollbind'|	  |'scb'|    scroll in window as other windows scroll
|'scrolljump'|	  |'sj'|     minimum number of lines to scroll
|'scrolloff'|	  |'so'|     minimum nr. of lines above and below cursor
|'scrollopt'|	  |'sbo'|    how 'scrollbind' should behave
|'sections'|	  |'sect'|   nroff macros that separate sections
|'secure'|		     secure mode for reading .vimrc in current dir
|'selection'|	  |'sel'|    what type of selection to use
|'selectmode'|	  |'slm'|    when to use Select mode instead of Visual mode
|'sessionoptions'| |'ssop'|  options for |:mksession|
|'shell'|	  |'sh'|     name of shell to use for external commands
|'shellcmdflag'|  |'shcf'|   flag to shell to execute one command
|'shellpipe'|	  |'sp'|     string to put output of ":make" in error file
|'shellquote'|	  |'shq'|    quote character(s) for around shell command
|'shellredir'|	  |'srr'|    string to put output of filter in a temp file
|'shellslash'|	  |'ssl'|    use forward slash for shell file names
|'shelltype'|	  |'st'|     Amiga: influences how to use a shell
|'shellxquote'|	  |'sxq'|    like 'shellquote', but include redirection
|'shiftround'|	  |'sr'|     round indent to multiple of shiftwidth
|'shiftwidth'|	  |'sw'|     number of spaces to use for (auto)indent step
|'shortmess'|	  |'shm'|    list of flags, reduce length of messages
|'shortname'|	  |'sn'|     non-MS-DOS: Filenames assumed to be 8.3 chars
|'showbreak'|	  |'sbr'|    string to use at the start of wrapped lines
|'showcmd'|	  |'sc'|     show (partial) command in status line
|'showfulltag'|	  |'sft'|    show full tag pattern when completing tag
|'showmatch'|	  |'sm'|     briefly jump to matching bracket if insert one
|'showmode'|	  |'smd'|    message on status line to show current mode
|'sidescroll'|	  |'ss'|     minimum number of columns to scroll horizontal
|'sidescrolloff'| |'siso'|   min. nr. of columns to left and right of cursor
|'smartcase'|	  |'scs'|    no ignore case when pattern has uppercase
|'smartindent'|   |'si'|     smart autoindenting for C programs
|'smarttab'|	  |'sta'|    use 'shiftwidth' when inserting <Tab>
|'softtabstop'|	  |'sts'|    number of spaces that <Tab> uses while editing
|'splitbelow'|	  |'sb'|     new window from split is below the current one
|'splitright'|	  |'spr'|    new window is put right of the current one
|'startofline'|   |'sol'|    commands move cursor to first blank in line
|'statusline'|	  |'stl'|    custom format for the status line
|'suffixes'|	  |'su'|     suffixes that are ignored with multiple match
|'suffixesadd'|   |'sua'|    suffixes added when searching for a file
|'swapfile'|	  |'swf'|    whether to use a swapfile for a buffer
|'swapsync'|	  |'sws'|    how to sync the swap file
|'switchbuf'|	  |'swb'|    sets behavior when switching to another buffer
|'syntax'|	  |'syn'|    syntax to be loaded for current buffer
|'tabstop'|	  |'ts'|     number of spaces that <Tab> in file uses
|'tagbsearch'|	  |'tbs'|    use binary searching in tags files
|'taglength'|	  |'tl'|     number of significant characters for a tag
|'tagrelative'|   |'tr'|     file names in tag file are relative
|'tags'|	  |'tag'|    list of file names used by the tag command
|'tagstack'|	  |'tgst'|   push tags onto the tag stack
|'term'|		     name of the terminal
|'termencoding'|  |'tenc'|   character encoding used by the terminal
|'terse'|		     shorten some messages
|'textauto'|	  |'ta'|     obsolete, use 'fileformats'
|'textmode'|	  |'tx'|     obsolete, use 'fileformat'
|'textwidth'|	  |'tw'|     maximum width of text that is being inserted
|'thesaurus'|	  |'tsr'|    list of thesaurus files for keyword completion
|'tildeop'|	  |'top'|    tilde command "~" behaves like an operator
|'timeout'|	  |'to'|     time out on mappings and key codes
|'timeoutlen'|	  |'tm'|     time out time in milliseconds
|'title'|		     let Vim set the title of the window
|'titlelen'|		     percentage of 'columns' used for window title
|'titleold'|		     old title, restored when exiting
|'titlestring'|		     string to use for the Vim window title
|'toolbar'|	  |'tb'|     GUI: which items to show in the toolbar
|'ttimeout'|		     time out on mappings
|'ttimeoutlen'|	  |'ttm'|    time out time for key codes in milliseconds
|'ttybuiltin'|	  |'tbi'|    use built-in termcap before external termcap
|'ttyfast'|	  |'tf'|     indicates a fast terminal connection
|'ttymouse'|	  |'ttym'|   type of mouse codes generated
|'ttyscroll'|	  |'tsl'|    maximum number of lines for a scroll
|'ttytype'|	  |'tty'|    alias for 'term'
|'undolevels'|	  |'ul'|     maximum number of changes that can be undone
|'updatecount'|   |'uc'|     after this many characters flush swap file
|'updatetime'|	  |'ut'|     after this many milliseconds flush swap file
|'verbose'|	  |'vbs'|    give informative messages
|'viewdir'|	  |'vdir'|   directory where to store files with :mkview
|'viewoptions'|   |'vop'|    specifies what to save for :mkview
|'viminfo'|	  |'vi'|     use .viminfo file upon startup and exiting
|'virtualedit'|   |'ve'|     when to use virtual editing
|'visualbell'|	  |'vb'|     ビープの代わりにvisualベル(画面フラッシュ)を使用
|'warn'|		     warn for shell command when buffer was changed
|'weirdinvert'|   |'wi'|     for terminals that have weird inversion method
|'whichwrap'|	  |'ww'|     allow specified keys to cross line boundaries
|'wildchar'|	  |'wc'|     command-line character for wildcard expansion
|'wildcharm'|	  |'wcm'|    like 'wildchar' but also works when mapped
|'wildignore'|	  |'wig'|    files matching these patterns are not completed
|'wildmenu'|	  |'wmnu'|   use menu for command line completion
|'wildmode'|	  |'wim'|    mode for 'wildchar' command-line expansion
|'winaltkeys'|	  |'wak'|    when the windows system handles ALT keys
|'winheight'|	  |'wh'|     minimum number of lines for the current window
|'winminheight'|  |'wmh'|    minimum number of lines for any window
|'winminwidth'|   |'wmw'|    minimal number of columns for any window
|'winwidth'|	  |'wiw'|    minimal number of columns for current window
|'wrap'|		     long lines wrap and continue on the next line
|'wrapmargin'|	  |'wm'|     chars from the right where wrapping starts
|'wrapscan'|	  |'ws'|     searches wrap around the end of the file
|'write'|		     ファイルへの保存を許可する
|'writeany'|	  |'wa'|     ファイルへの保存時は"!"がなくても上書きする。
|'writebackup'|   |'wb'|     上書きする時にはバックアップを作る。
|'writedelay'|	  |'wd'|     delay this many msec for each char (for debug)
------------------------------------------------------------------------------
*Q_ur*		Undo/Redo commands

|u|	  N  u		最後の N 回分の作業をアンドゥ
|CTRL-R|  N  CTRL-R	最後の N 回分のアンドゥを取り消す(redo)
|U|	     U		行全体への変更を取り消す
------------------------------------------------------------------------------
*Q_et*		外部コマンド

|:shell|	:sh[ell]	シェルを起動する
|:!|		:!{command}	{command}をシェルで起動する
|K|		   K		カーソル下にある単語を'keywordprg' プログラム
				で調べる。(デフォルトは"man")
------------------------------------------------------------------------------
*Q_qf*		Quickfix commands

|:cc|		:cc [nr]	display error [nr] (default is the same again)
|:cnext|	:cn		次のエラーを表示
|:cprevious|	:cp		１つ前のエラーを表示
|:clist|	:cl		全エラーの一覧を表示
|:cfile|	:cf		'errorfile'からエラーを読み込む
|:cquit|	:cq		書き込まずにエラーコードを(コンパイラに)渡す
				smz ？？？ さっぱりわからない。
|:make|		:make [args]	makeする。エラーを開き最初のコンパイルエラー
				にジャンプ
|:grep|		:gr[ep] [args]	'grepprg'を実行し、合致する最初の行にジャンプ
------------------------------------------------------------------------------
*Q_vc*		さまざまなコマンド

|CTRL-L|	   CTRL-L	画面の再描画
|CTRL-G|	   CTRL-G	現在の(パス名＋)ファイル名とカーソル位置を
				表示
|ga|		   ga		カーソル位置のASCII文字コードを10進、16進、
				8進で表示
|g_CTRL-G|	   g CTRL-G	カーソル桁数、行数、単語数、文字数を表示
|CTRL-C|	   CTRL-C	検索中：検索を中止
|dos-CTRL-Break|   CTRL-Break	MS-DOS: 検索中：検索を中止
|<Del>|		   <Del>	回数指定中: 最後の文字を削除
|:version|	:ve[rsion]	バージョン情報を表示
|:mode|		:mode N		MS-DOS: 画面モードを N (数字,C80,C4350,など)
				に 

|:normal|	:norm[al][!] {commands}
				通常モードコマンドを実行
|Q|		Q		"Ex"モードに移行

|:redir|	:redir >{file}		メッセージを{file}にリダイレクト
|:silent|	:silent[!] {command}	{command} を寡黙に実行
|:confirm|	:confirm {command}	終了時、保存時などに保存していない
					変更やリードオンリーの確認をする
|:browse|	:browse {command}	ファイルを開く時や保存する時に選択
					ダイアログ画面を使う。
------------------------------------------------------------------------------
*Q_ce*		コマンドラインの編集

|c_<Esc>|	<Esc>		   コマンドラインを破棄する('wildchar'が<Esc>
				   の場合は２回押す)

|c_CTRL-V|	CTRL-V {char}	   {char}を文字として挿入する(CTRL文字など)
|c_CTRL-V|	CTRL-V {number}    文字コードを10進数入力する(最大３桁まで)
|c_CTRL-K|	CTRL-K {char1} {char2}
				   合字を入力する(|Q_di|参照)
|c_CTRL-R|	CTRL-R {0-9a-z"%#:-=}
				   レジスタの内容を挿入する

|c_<Left>|	<Left>/<Right>	   カーソルを左右に移動
|c_<S-Left>|	<S-Left>/<S-Right> カーソルを単語単位で左右に移動
|c_CTRL-B|	CTRL-B/CTRL-E	   カーソルを行頭、行末に移動

|c_<BS>|	<BS>		   カーソルの直前の文字を削除
|c_<Del>|	<Del>		   カーソル位置の文字を削除
|c_CTRL-W|	CTRL-W		   カーソルの直前の文字を削除
|c_CTRL-U|	CTRL-U		   全文字を削除

|c_<Up>|	<Up>/<Down>	   現在のコマンドで始まるコマンドラインの履歴
				   を呼び出す
|c_<S-Up>|	<S-Up>/<S-Down>	   コマンドラインの履歴を呼び出す
|:history|	:his[tory]	   コマンドライン履歴を表示

文脈依存の補完機能

|c_wildchar|	'wildchar'  	(デフォルト: <Tab>)
				カーソルの直前のパターンに合せた補完を実施
				合致するものが複数ある場合は、ビープを鳴らし
				最初に合致したものを表示。さらに'wildchar'を
				押すと次に合致したものを表示。
|c_CTRL-D|	CTRL-D		現在のカーソルの直前のパターンに合致する全
				ての名前の一覧を表示
|c_CTRL-A|	CTRL-A		現在のカーソルの直前のパターンに合致する全
				ての名前を挿入
|c_CTRL-L|	CTRL-L		現在のカーソルの直前のパターンに合致するも
				ののうち、共通部分を挿入
smz 次の２つはわからん
|c_CTRL-N|	CTRL-N		after 'wildchar' with multiple matches: go
				   to next match
|c_CTRL-P|	CTRL-P		after 'wildchar' with multiple matches: go
				   to previous match
------------------------------------------------------------------------------
*Q_ra*		Ex ranges

|:range|	,		２つの行の範囲
|:range|	;		idem, set cursor to the first line number
				before interpreting the second one

|:range|	{number}	ファイル中の行番号
|:range|	.		現在行
|:range|	$		ファイルの最終行
|:range|	%		1,$と同じ(＝ファイル全体)
|:range|	*		'<,'>と同じ(＝visualモードの選択範囲)
|:range|	't		マーク t の行
|:range|	/{pattern}[/]	{pattern} に合致する行の次の行
|:range|	?{pattern}[?]	{pattern} に合致する行の前の行

|:range|	+[num]		直前の行指定(デフォルト:1)に[num]を加算した
				もの
|:range|	-[num]		直前の行指定(デフォルト:1)から[num]を減算し
				たもの
------------------------------------------------------------------------------
*Q_ex*		特殊な Ex 文字

|:bar|	    |		コマンドを２つに分割 (":global"と":!"では使用不可)
|:quote|    "		コメントの開始

|:_%|	    %		現在のファイル名(ファイル名を使うべき場所でのみ可)
|:_#|	    #[num]	別のファイル名[num] (ファイル名を使うべき場所でのみ可)

	Note: 以下の４つについては、そのまま打ち込みます。特殊キーの表記では
	      ありません。
|:<cword>|  <cword>	カーソル下の単語(ファイル名を使うべき場所でのみ可)
|:<cWORD>|  <cWORD>	カーソル下の大単語(ファイル名を使うべき場所でのみ可)
			※ 大単語については|WORD|を参照)
|:<cfile>|  <cfile>	カーソルのあるファイルの名前(ファイル名を使うべき場
			所でのみ使用可)
|:<afile>|  <afile>	自動コマンドのファイルの名前(ファイル名を使うべき
			場所でのみ使用可)
|:<sfile>|  <sfile>	そのファイルで ":source"を使ったファイルの名前(ファ
			イル名を使うべき場所でのみ使用可)

		"%", "#", "<cfile>", "<sfile>" , "<afile>" の後に以下の指定
		が可能
		|::p|	    :p		フルパス
		|::h|	    :h		ディレクトリ部(ファイル名を削除)
		|::t|	    :t		ファイル名のみ
		|::r|	    :r		ルート (ファイル名の拡張子のみ削除)
		|::e|	    :e		拡張子のみ
		|::s|	    :s/{pat}/{repl}/	{pat}を{repl}に置換
------------------------------------------------------------------------------
*Q_ed*		ファイルの編集

	   !なしの場合: 現バッファに変更が加わっている場合はコマンド失敗
	   !ありの場合: 現在のバッファに対する変更は破棄して、コマンド実行
|:edit_f|  :e[dit][!] {file}	{file}を編集
|:edit|	   :e[dit][!]		現在のバッファ内容を再読み込み
|:enew|	   :ene[w][!]		新たな名前なしバッファを編集
|:find|    :fin[d][!] {file}	{file} を'path' から探し、編集

|CTRL-^|   N   CTRL-^		別ファイル N を編集(":e #N"と同じ)
|gf|	       gf  or ]f	カーソル下にある名前のファイルを編集
|:pwd|	   :pwd			カレントディレクトリを表示
|:cd|	   :cd [path]		カレントディレクトリを [path] に変更
|:cd-|	   :cd -		直前のカレントディレクトリに戻る
|:file|	   :f[ile]		現在のファイル名とカーソル位置を表示
|:file|	   :f[ile] {name}	現在のファイル名を{name}に変更
|:files|   :files		別ファイル一覧を表示
------------------------------------------------------------------------------
*Q_fl*		引数リストの使い方			|argument-list|

|:args|	   :ar[gs]		引数一覧を表示。現在のファイルは[ ]で囲む
|:all|	   :all  or :sall	引数一覧にある全ファイルをウィンドウで表示
|:wn|	   :wn[ext][!]		現在のファイルを保存し、次のファイルを編集
|:wn|	   :wn[ext][!] {file}	{file}がなければ、現在のバッファを{file}に
				保存し、次のファイルを編集。"!"を使えば、
				既存ファイルを上書き保存
|:wN|	   :wN[ext][!] [file]	現在のファイルを保存し、１つ前のファイルを
				編集

	     in current window    in new window	~
|:argument|  :argu[ment] N	  :sar[gument] N	ファイル N を編集 
|:next|	     :n[ext]		  :sn[ext]		次のファイルを編集
|:next_f|    :n[ext] {arglist}	  :sn[ext] {arglist}	新たな引数リストを作り
							最初のファイルを編集
|:Next|	     :N[ext]		  :sN[ext]		１つ前のファイルを編集
|:first|     :fir[st]		  :sfir[st]		最初のファイルを編集
|:last|	     :la[st]		  :sla[st]		最後のファイルを編集
------------------------------------------------------------------------------
*Q_wq*		保存と終了

|:w|	  :[range]w[rite][!]		現在のファイルに保存
|:w_f|	  :[range]w[rite] {file}	{file}がなければ、{file}に保存。
|:w_f|	  :[range]w[rite]! {file}	{file}に保存。ファイルがあれば上書き。
|:w_a|	  :[range]w[rite][!] >>		現在のファイルに追記
|:w_a|	  :[range]w[rite][!] >> {file}	{file}に追記
|:w_c|	  :[range]w[rite] !{cmd}	[range]の行を標準入力として{cmd}を
					実行。
|:up|	  :[range]up[date][!]		変更されていれば、上書き保存
|:wall|	  :wall[!]			変更のある全バッファを上書き保存

|:q|	  :q[uit]		変更がなければ、現在のバッファを終了。他に
				ヘルプ以外のバッファがなければvimを終了。
|:q|	  :q[uit]!		変更を破棄して、現在のバッファを終了。他に
				ヘルプ以外のバッファがなければvimを終了。
|:qa|	  :qall			変更がない限りvimを終了
|:qa|	  :qall!		変更があってもvimを強制終了 
|:cq|	  :cq			保存せずに終了し、エラーコードを返す。

|:wq|	  :wq[!]		現ファイルを保存して終了
|:wq|	  :wq[!] {file}		{file}に保存して終了
|:xit|	  :x[it][!] [file]	":wq"と同様だが、変更が加わっている場合のみ
				保存
|ZZ|	     ZZ			":x"と同じ
|ZQ|	     ZQ			":q!"と同じ
|:xall|	  :xall[!]  or :wqall[!]
				変更のある全バッファを保存して終了

|:stop|	  :st[op][!]		vimをサスペンドし、新たなシェルを起動。'aw'
				オプションがONで、[!]も指定していない場合は
				バッファを保存
|CTRL-Z|     CTRL-Z		":stop"と同じ。
------------------------------------------------------------------------------
*Q_st*		VIMの起動

smz 省略
|-vim|	   vim [options]		空バッファで起動
|-file|	   vim [options] {file} ..	最初の{file}を開いて起動
|--|	   vim [options] -		標準入力からファイル内容を取り込む
|-tag|	   vim [options] -t {tag}	{tag}にリンクされたファイルを開いて起動
|-qf|	   vim [options] -q [fname]	QuickFixモードで起動
					最初のエラーを表示する

	Vim の引数

|-gui|	-g		    GUIで起動 (他のオプションも許可)

|-+|	+[num]		    カーソルを[num]行目にして起動(デフォルト:最終行)
|-+c|	+{command}	    ファイルの読み込み後に{command}を起動
|-+/|	+/{pat} {file} ..   カーソルを最初の{pat}に合致するところに移動
|-v|	-v		    Vi モード, ex を通常モードで起動
|-e|	-e		    Ex モード, vimをEx(コマンドライン)モードで起動
|-R|	-R		    リードオンリーモードで起動。-nを含む。
|-m|	-m		    変更を認めない('write' オプションをoffで起動)
|-b|	-b		    バイナリモード
|-l|	-l		    lisp モード
|-F|	-F		    Farsi モード ('fkmap' と 'rightleft' をセット)
|-H|	-H		    Hebrew モード ('hkmap' と 'rightleft' をセット)
|-V|	-V		    冗長モード
|-C|	-C		    互換モード, 'compatible' をセットして起動
|-N|	-N		    非互換モード, 'compatible' をoffにして起動
|-r|	-r		    swapファイルの一覧を与える
|-r|	-r {file} ..	    異常終了したファイルのリカバリ
|-n|	-n		    swapファイルを作らない
|-o|	-o [num]	    [num]個のウィンドウを開く(default: one for each file)
smz よくわからない。
|-f|	-f		    GUI: foreground process,  fork()しない。
			    Amiga: ウィンドウを開くときにvimを再起動しない
			           (例：メールなど)
|-s|	-s {scriptin}	    最初のコマンド群を{scriptin}から読む。
|-w|	-w {scriptout}	    入力した文字をファイル{scriptout} に保存(追記)
|-W|	-W {scriptout}	    入力した文字をファイル{scriptout} に保存(上書き)
|-T|	-T {terminal}	    端末名{terminal}を指定
|-d|	-d {device}	    Amiga: open {device} to be used as a console
|-u|	-u {vimrc}	    read inits from {vimrc} instead of other inits
|-U|	-U {gvimrc}	    同上, GUIでの起動時用
|-i|	-i {viminfo}	    read info from {viminfo} instead of other files
|---|	--		    引数の最後を示す。以降の引数は全部ファイル名
|--help|    --help	    引数のヘルプを表示して終了
|--version| --version	    バージョン情報を表示して終了
|--|	-		    標準入力から読み込む
------------------------------------------------------------------------------
*Q_ac*		自動コマンド

|viminfo-file|	起動時にレジスタ、マーク、ヒストリを読み込み、終了時に保存

|:rviminfo|	:rv[iminfo] [file] 	viminfoファイル [file] から情報を読む
|:rviminfo|	:rv[iminfo]! [file]	同上。既存情報を破棄して読む
|:wviminfo|	:wv[iminfo] [file]	viminfoファイル [file] に情報を追記
|:wviminfo|	:wv[iminfo]! [file]	viminfoファイル [file] に情報を上書き

|modeline|	ファイルを編集する時にautomaticオプションを設定

|modeline|	vim:{set-arg}: ..	ファイルの最初か最後の行にあれば、
					('ml'オプションを参照) {set-arg}の
					内容を":set"への引数として与える。

|autocommand|	特定のイベントで自動的にコマンドを実行

|:autocmd|	:au			自動コマンドの一覧表示
|:autocmd|	:au {event}		{event}用の自動コマンドの一覧表示
|:autocmd|	:au {event} {pat}	{event}用の自動コマンドのうち、{pat}
					に合致するコマンドの一覧表示 
					{pat}
|:autocmd|	:au {event} {pat} {cmd}	{event}と{pat}用の新たな自動コマンドを
					{cmd}として登録
|:autocmd|	:au!			全ての自動コマンドを削除
|:autocmd|	:au! {event}		{event}用の自動コマンドを削除
|:autocmd|	:au! * {pat}		{pat}に合致する自動コマンドを削除
|:autocmd|	:au! {event} {pat}	{event}と{pat}に合致する自動コマンド
					を削除
|:autocmd|	:au! {event} {pat} {cmd}  {event}と{pat}に合致する自動コマン
					ドを削除後、{cmd}として再登録
------------------------------------------------------------------------------
*Q_wi*		複数ウィンドウコマンド

|CTRL-W_s|	CTRL-W s  or  :split	ウィンドウを２つに分割
|:split_f|	:split {file}		ウィンドウを２つに分割し、片方で
					{file}を開く
|:sfind|	:sf[ind] {file}		ウィンドウを分割し、{file}を'path'
					中で探し、それを編集
|CTRL-W_]|	CTRL-W ]		ウィンドウを分割し、カーソル下のタグ
					にジャンプ
|CTRL-W_f|	CTRL-W f		ウィンドウを分割し、カーソル下のファ
					イルにジャンプ
|CTRL-W_CTRL-^| CTRL-W CTRL-^		ウィンドウを分割し、別ファイルにジャ
					ンプ
|CTRL-W_n|	CTRL-W n  or  :new	新たな空ウィンドウを作成
|CTRL-W_q|	CTRL-W q  or  :q[uit]	編集を終了しウィンドウを閉じる
|CTRL-W_c|	CTRL-W c  or  :cl[ose]	バッファを隠しウィンドウを閉じる
|CTRL-W_o|	CTRL-W o  or  :on[ly]	画面を現在ウィンドウ１つだけにする

|CTRL-W_j|	CTRL-W j		カーソルを下のウィンドウに移動
|CTRL-W_k|	CTRL-W k		カーソルを上のウィンドウに移動
|CTRL-W_CTRL-W|	CTRL-W CTRL-W		カーソルを下のウィンドウに移動(wrap)
|CTRL-W_W|	CTRL-W W		カーソルを上のウィンドウに移動(wrap)
|CTRL-W_t|	CTRL-W t		カーソルを一番上のウィンドウに移動
|CTRL-W_b|	CTRL-W b		カーソルを一番下のウィンドウに移動
|CTRL-W_p|	CTRL-W p		カーソルを直前のアクティブウィンドウ
					に移動

|CTRL-W_r|	CTRL-W r		ウィンドウを下側にローテートする。
|CTRL-W_R|	CTRL-W R		ウィンドウを上側にローテートする。
|CTRL-W_x|	CTRL-W x		現在のウィンドウを次のウィンドウと
					入れ換え

|CTRL-W_=|	CTRL-W =		全ウィンドウの高さを同一に
|CTRL-W_-|	CTRL-W -		現在のウィンドウの高さを減らす
|CTRL-W_+|	CTRL-W +		現在のウィンドウの高さを増やす
|CTRL-W__|	CTRL-W _		現在のウィンドウの高さを変更する
					(デフォルト:最大)
------------------------------------------------------------------------------
*Q_bu*		バッファ管理コマンド

|:buffers|	:buffers  or  :files	全バッファとファイル名の一覧

|:ball|		:ball	  or  :sball	全引数/バッファを編集
|:unhide|	:unhide   or  :sunhide	読み込み中の全バッファを編集

|:badd|		:badd {fname}		ファイル名{fname}をバッファ一覧に追加
|:bunload|	:bunload[!] [N]		[N]番バッファをメモリから開放
|:bdelete|	:bdelete[!] [N]		[N]番バッファを開放してバッファ一覧
					から削除

	      in current window   in new window	~
|:buffer|     :[N]buffer [N]	  :[N]sbuffer [N]     N 番バッファ/argへ
|:bnext|      :[N]bnext [N]	  :[N]sbnext [N]      N番分、次のバッファ/argへ
|:bNext|      :[N]bNext [N]	  :[N]sbNext [N]      N番分、次のバッファ/argへ
|:bprevious|  :[N]bprevious [N]   :[N]sbprevious [N]  同上
|:bfirst|     :bfirst		  :sbfirst	      最初のバッファ/argへ
|:blast|      :blast		  :sblast	      最後のバッファ/argへ
|:bmodified|  :[N]bmod [N]	  :[N]sbmod [N]	      N番分、更新したバッファへ
------------------------------------------------------------------------------
*Q_sy*		シンタックスハイライト

|:syn-on|	:syntax on		シンタックスハイライトの使用開始
|:syn-off|	:syntax off		シンタックスハイライトの使用停止

|:syn-keyword|	:syntax keyword {group-name} {keyword} ..
					add a syntax keyword item
|:syn-match|	:syntax match {group-name} {pattern} ...
					add syntax match item
|:syn-region|	:syntax region {group-name} {pattern} ...
					add syntax region item
|:syn-sync|	:syntax sync [ccomment | lines {N} | ...]
					tell syntax how to sync
|:syntax|	:syntax [list]		list current syntax items
|:syn-clear|	:syntax clear		clear all syntax info

|:highlight|	:highlight clear	clear all highlight info
|:highlight|	:highlight {group-name} {key}={arg} ..
					set highlighting for {group-name}

|:filetype|	:filetype on		switch on file type detection, without
					syntax highlighting
|:filetype|	:filetype plugin indent on
					switch on file type detection, with
					automatic indenting and settings
------------------------------------------------------------------------------
*Q_gu*		GUI commands

|:gui|		:gui			UNIX: ＧＵＩ版を起動
|:gui|		:gui {fname} ..		同上、さらに{fname} .. を編集

|:menu|		:menu			全メニューを表示
|:menu|		:menu {mpath}		{mpath}で始まる全メニューを表示
|:menu|		:menu {mpath} {rhs}	add menu {mpath}, giving {lhs}
|:menu|		:menu {pri} {mpath} {rhs}
					idem, with priorities {pri}
|:menu|		:menu ToolBar.{name} {rhs}
					add toolbar item, giving {lhs}
|:tmenu|	:tmenu {mpath} {text}	add tooltip to menu {mpath}
|:unmenu|	:unmenu {mpath}		remove menu {mpath}

------------------------------------------------------------------------------
*Q_fo*		Folding

|'foldmethod'|	set foldmethod=manual	manual folding
		set foldmethod=indent	folding by indent
		set foldmethod=expr	folding by 'foldexpr'
		set foldmethod=syntax	folding by syntax regions
		set foldmethod=marker	folding by 'foldmarkers'

|zf|		{motion}zf		operator: Define a fold manually
|:fold|		:{range}fold		define a fold for {range} lines
|zd|		zd			delete one fold under the cursor
|zD|		zD			delete all folds under the cursor

|zo|		zo			open one fold under the cursor
|zO|		zO			open all folds under the cursor
|zc|		zc			close one fold under the cursor
|zC|		zC			close all folds under the cursor

|zm|		zm			fold more: decrease 'foldlevel'
|zM|		zM			close all folds: make 'foldlevel' zero
|zr|		zr			reduce folding: increase 'foldlevel'
|zR|		zR			open all folds: make 'foldlevel' max.

|zn|		zn			fold none: reset 'foldenable'
|zN|		zN			fold normal set 'foldenable'
|zi|		zi			invert 'foldenable'

 vim:tw=78:ts=8:ft=help:norl:
