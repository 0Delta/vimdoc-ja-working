COMMENT: ちょっとした変更
STATUS: finished 7.0
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*usr_04.txt*	For Vim version 7.0.  Last change: 2006 Apr 24

		     VIM USER MANUAL - by Bram Moolenaar

				  簡単な編集


本章では、 文の修正方法や他の場所への移動方法の一部を述べます。
また、変更する範囲を選択する３つ（カーソルモーション、ビジュアルモード、テキスト
オブジェクト）の基本的な繰作方法についても説明します。

|04.1|	オペレータとモーション
|04.2|	テキストの変更
|04.3|	変更の繰り返し
|04.4|	ビジュアルモード
|04.5|	テキストの移動
|04.6|	テキストのコピー
|04.7|	クリップボード
|04.8|	テキストオブジェクト
|04.9|	置換モード
|04.10|	終わりに

次章: |usr_05.txt|  設定の変更
前章: |usr_03.txt|  カーソルの移動
目次: |usr_toc.txt|

==============================================================================
*04.1*	オペレータとモーション

２章で学んだように、"x"は１文字削除コマンドです。カウンタを使って、"4x"とす
れば４文字を削除します。
"dw"コマンドは単語を削除します。"w"が単語単位で移動するコマンドであることを思
い出してください。"d"コマンドにモーション(移動)コマンドを続けることで、現在の
場所から、モーションコマンドで移動した場所までを削除できます。
例えば、"4w"コマンドはカーソルを４単語分、動かします。ということは、"d4w"は
４つの単語を削除するコマンドなわけです。

	To err is human. To really foul up you need a computer. ~
			 ------------------>
				 d4w

	To err is human. you need a computer. ~

モーションコマンドでカーソルが移動した場所までが削除されます。移動先の単語の先
頭文字が削除されないのは、そのほうが便利だろうと判断したからです。"e" コマンド
で単語の末尾まで移動した場合は、末尾の文字も削除したほうが便利でしょう:

	To err is human. you need a computer. ~
			-------->
			   d2e

	To err is human. a computer. ~

カーソル下の文字が範囲に含まれるかどうかは、移動に使ったコマンドによって異なり
ます。リファレンスマニュアルでは、移動先の文字が含まれないことを "exclusive"
(排他的)、含まれることを "inclusive" (包括的) と呼んでいます。

"$"コマンドは行末まで移動します。"d$"コマンドはカーソル位置から、行末まで
を削除します。これは包括的モーションなので行末の文字は削除処理の対象と
なります。

	To err is human. a computer. ~
		       ------------>
			    d$

	To err is human ~

オペレータ-モーション というのは定型操作です。最初にオペレータコマンドを入力し
ます。例えば、"d" は削除オペレータです。次に "4l" や "w" といったモーションコ
マンドを入力します。この方法なら、動ける範囲のどんな文章でも操作ができます。

==============================================================================
*04.2*	テキストの変更

"c" は「変更」オペレータです。"d" オペレータと同じように使えますが、挿入モード
に入る点が違います。例えば、"cw" は単語を変更します。もっと正確に言うと、単語
を削除してから挿入モードに入ります。

	To err is human ~
	   ------->
	     c2wbe<Esc>

	To be human ~

"c2wbe<Esc>" には次の成分が含まれます。

	c	変更オペレータ
	2w	２単語進む (単語が削除され、挿入モードに入る)
	be	この文字列を挿入する
	<Esc>	ノーマルモードに戻る

勘のいい人なら、ちょっと変だと感じるかも知れません。"human" の前の空白が削除さ
れていないのです。"どんな問題に関しても単純で、明解で、間違った答えがある" と
いう格言があります。この "cw" コマンドを使った例がまさにそれです。"c" オペレー
タは "d" オペレータと全く同じように使えますが、"cw" はその例外なのです。実際に
はこれは"ce"と同じく、単語末までを変更します。ですから、単語の後ろの空白は含ま
れないのです。これはかつての Vi までさかのぼる例外です。多くの人々がこれを使っ
ていますので、Vim でも不本意ながら残してあるのです。 


その他の変更コマンド
--------------------

"dd" が行を削除するのと同じように、"cc" は行全体を変更します。ただし、インデン
ト(行頭の空白類)は残されます。

"d$"が行末まで削除するのと同じように、"c$"は行末までを変更します。この機能は
"d$"で行末まで削除した上で、"a"で挿入モードに入り、文を追加するのと同じです。


ショートカット
--------------

いくつかのオペレータ-モーションの組合せは頻繁に使われるため、１文字コマンドと
して用意されています。

	x  は  dl (カーソル下の文字を削除)
	X  は  dh (カーソルの左側の文字を削除)
	D  は  d$ (行末まで削除)
	C  は  c$ (行末まで変更)
	s  は  cl (１文字変更)
	S  は  cc (１行変更)


カウンタの使い方
----------------

"3dw"も"d3w"も３つの単語を削除するコマンドです。細かいことが気になる方のため
に補足しておくと、最初の例(3dw)は１単語削除を３回実行し、２つ目の例(d3w)は
３単語の削除を１度だけ実行します。２つの違いは区別できません。やろうと思えば、
カウンタを２個所で指定できます。例えば、"3d2w"は２単語の削除を３回繰り返し、
結果として、６単語を削除します。


１文字の置き換え
----------------

"r" コマンドはオペレータではありません。文字が入力されるまで待機し、入力された
文字で、カーソル下の文字を置き換えます。"cl" や "s" でも同じ事ができますが、
"r" の場合は最後に <Esc> を押す必要がありません。

	there is somerhing grong here ~
	rT	     rt    rw

	There is something wrong here ~

"r" にカウンタを指定すると、指定した数の文字がすべて、同じ文字に置き換えられま
す。

	There is something wrong here ~
			   5rx

	There is something xxxxx here ~

文字を改行に置き換えたければ、"r<Enter>"を使います。１文字を削除した上で、
改行を挿入します。ただし、改行に対してはカウンタは無効で、削除する文字にのみ
有効となります。"4r<Enter>"は４文字削除し、１つの改行を挿入します。

==============================================================================
*04.3*	変更の繰り返し

"." コマンドはもっともシンプルでパワフルなコマンドの一つです。これは直前の変更
コマンドを繰り返します。例えば、HTMLファイルの編集中に、全ての<B>タグを削除す
るとしましょう。カーソルを最初の"<"に移動し、"df>"コマンドで<B>を削除します。
次に</B>の"<"を探し、それを削除するのに"."コマンドを使います。"."コマンドは直
前の変更コマンド(この場合なら"df>")を実行します。他のタグの削除したければ、
カーソルを"<"の上に置いて、"."を打てばよいのです。

			      To <B>generate</B> a table of <B>contents ~
	f<   find first <     --->
	df>  delete to >	 -->
	f<   find next <	   --------->
	.    repeat df>			    --->
	f<   find next <		       ------------->
	.    repeat df>					    -->

"." コマンドはすべての変更操作を繰り返せますが、 "u" (アンドゥ)、CTRL-R (リ
ドゥ)、先頭が ":" のコマンドは繰り返せません。

例２：文中に何度も出てくる単語"four"を"five"に変更したいとします。
      次に示した手順でそれができます。

	/four<Enter>	最初の"four"を探す。
	cwfive<Esc>	その単語を"five"に変更する。
	n		次の"four"を探す
	.		直前の変更を繰り返す。
	n		次の"four"を探す
	.		直前の変更を繰り返す。
			以下同文。

==============================================================================
*04.4*	ビジュアルモード

単純なものならオペレータ-モーション方式で簡単に変更できますが、どのコマンドを
使えば目的の範囲を選択できるか簡単には決められないこともよくあります。そんなと
きは ビジュアルモードを使ってください。

ビジュアルモードに入るには "v" を押します。ここでカーソルを動かして対象とした
い領域を選択します。選択中はその領域が強調表示されます。最後にオペレータコマン
ドを入力します。
例えば、単語の途中から、次の単語の途中までを削除するには、次のようにします。

		This is an examination sample of visual mode ~
			       ---------->
				 velllld

		This is an example of visual mode ~

この方法だと、"l"を何回押せば目的の場所まで移動できるか？などと考える必要が
全くありません。その場で削除の範囲を確認してから、"d"を押すことができるので
す。

選択されている範囲に対して何もしたくない場合は <Esc> キーを押してください。
ビジュアルモードが終了し、なにも変更されません。


行選択
------

行全体を対象としたければ、"V" コマンドでビジュアルモードを開始してください。ただ
ちに、行全体が選択されます。ここで左右に移動しても何も起こりません。上下に移動
すると、選択範囲が行単位で拡張されます。
例えば、"Vjj"で３行を選択してみましょう。

			  +------------------------+
			  | text more text	   |
		       >> | more text more text    | |
	  選択された行 >> | text text text	   | | Vjj
		       >> | text more		   | V
			  | more text more	   |
			  +------------------------+


ブロック選択
------------

四角いブロック(矩形)の処理を行いたければ、CTRL-V でビジュアルモードを開始しま
す。このモードは表を編集するような場合に非常に便利です。

		name		Q1	Q2	Q3
		pierre		123	455	234
		john		0	90	39
		steve		392	63	334

例えば、中央の Q2 の列を削除するには、カーソルを "Q2" の "Q" に移動します。
CTRL-V を押し、ブロック選択ビジュアルモードに入ります。次にカーソルを "3j" で
３行下に動かし、"w"を押して１単語分右に移動します。この状態では、最後の列の先
頭を範囲に含んでいますので、"h" でそれをはずします。"d" を押すと、選択してあっ
た範囲が削除されます。


反対側に移動
------------

ビジュアルモードで選択中に、選択範囲の反対側(始点)にカーソルを動かしたい時は、
"o"を押します (o は "other end" の意味です) 。カーソルは始点に動き、始点を自由
に変更できるようになります。もう一度 "o" を押すと、元の終点側に戻ります。

ブロック選択のときは４隅が存在します。"o" は始点と終点を斜めに動くだけです。同
じ行の反対側に移動するには "O" を使ってください。

Note: ビジュアルモードの "o" と "O" はノーマルモードのコマンドとはまったく違う
動作なので注意してください。ノーマルモードではカーソル行の上や下に空行を作る機
能です。

==============================================================================
*04.5*	テキストの移動

"d" や "x" などのコマンドで何かを削除すると、そのテキストは記録されます。"p"
コマンドを使うと、そのテキストをペースト (張り付け。Vimではこれをプットと呼び
ます) できます。
どのように動くかを見てみましょう。まず、削除したい行にカーソルを移動し、"dd"
コマンドでその行を削除します。次にプットしたい場所にカーソルを動かして "p" を
押します。先ほど削除した行の内容がカーソルの下の行に挿入されます。

	 最初		削除後       プット後
	a line		a line	      a line
	line 2	  dd	line 3	  p   line 3
	line 3			      line 2

行全体を削除した時にその内容を保存していたので、"p"コマンドを使った時にその
内容がカーソルの下の行にプットされたわけです。行の一部(単語など)を削除した
場合は、"p"コマンドはカーソルの直後にそれをプットします。

	Some more boring try text to out commands. ~
			 ---->
			  dw

	Some more boring text to out commands. ~
			 ------->
			    welp

	Some more boring text to try out commands. ~



その他のプット
--------------

"P"コマンドは"p"と同じですが、カーソルの前にプットします。直前に"dd"コマン
ドで削除をしていれば、"P"はカーソルの上にその行をプットします。"dw"で単語を
削除した場合は、カーソルの直前にプットします。

プットは何回でも好きなだけ繰り返せます。同じ文が毎回使われます。

"p"も"P"もカウンタを指定できます。指定しただけ、プット処理を繰り返します。例え
ば、"dd"の後に、"3p"を実行すると、削除した行のコピーが３つプットされます。


２文字の入れ換え
----------------

入力している時には、指が頭を追い越してしまうことがしばしばあります。その結果
は、"the"が"teh"になるといった類のタイポ(打ち間違い)です。Vimではこの種の間違
いを簡単に修正できます。カーソルを"teh"の"e"の上に置いて、"xp"と打てばよいので
す。これは、"x"で"e"の文字を削除してレジスタに入れ、"p"でカーソル ("h"の上にあ
る) の後ろにレジスタ内容をプットするのです。

	teh     th     the ~
	 x       p

==============================================================================
*04.6*	テキストのコピー

テキストを別の場所にコピーするには、それを削除して、"u" で削除を取り消し、他の
場所で "p" を使いプットすることもできますが、ヤンク (yank) を使えばもっと簡単
です。"y" オペレータは文字列をレジスタにコピーします。その文字列は "p" コマン
ドでプットできます。
コピーのことを Vim ではヤンクと呼びます。文字 "c" は既に変更オペレータのために
使われていましたが、"y" は利用可能でした。"y" キーを覚えやすくするするために、
コピー操作をヤンク (yank) と呼びます。

"y" はオペレータなので、"yw" とすれば単語をヤンクできます。カウンタも当然指定
可能です。２単語をヤンクするには、"y2w" とします。例を示しましょう。

	let sqr = LongVariable * ~
		 -------------->
		       y2w

	let sqr = LongVariable * ~
			       p

	let sqr = LongVariable * LongVariable ~

"yw" は単語の後の空白まで含むので気をつけてください。それが嫌なら、"ye" を使っ
てください。

"yy" コマンドは "dd" が行削除するのと同様に、行全体をヤンクします。ただ、"D"は
行末まで削除するのに対して、"Y" は "yy" と同じ動きになります。この点は気をつけ
てください。行末までヤンクしたい時には "y$" を使ってください。

	a text line   yy	a text line	       a text line
	line 2			line 2		p      line 2
	last line		last line	       a text line
						       last line

==============================================================================
*04.7*	クリップボード

GUI版の Vim (gvim) を使っている場合は、[編集] メニューに [コピー] コマンドがあ
ります。ビジュアルモードで文字列を選択してから、メニューの [編集]-[コピー] を
使ってください。選択文字列がクリップボードにコピーされるので、それを他のプログ
ラムにペーストできます。もちろん Vim 自身でも使えます。

他のアプリケーションでクリップボードに文字列をコピーしておけば、Vim の [編集]-
[貼り付け] メニューでそれをペーストできます。これはノーマルモードでも挿入モー
ドでも機能します。ビジュアルモードでは、選択文字列がペーストされた文字列に置換
されます。

メニューの [編集]-[切り取り] はクリップボードにプットする前に文字列を削除しま
す。[コピー]、[切り取り]、[貼り付け] の３つはポップアップメニューでも (ポップ
アップメニューが出る時だけですよ、当り前ですが) 使えます。お使いの Vim にツー
ルバーがあれば、そこにも同じ項目があるはずです。

GUI を使っていない場合やメニューを使うのが嫌いな場合は他の方法を使うしかありま
せん。普通の "y" や "p" コマンドを使う前に "* (ダブルクオート＋アステリスク)を
指定するのです。行を丸ごとクリップボードにコピーするには次のようにします: >

	"*yy

クリップボードからプットするにはこうします: >

	"*p

この機能はクリップボードをサポートした Vim でのみ動きます。クリップボードにつ
いての詳細は|09.3|章 と |clipboard|をご覧ください。

==============================================================================
*04.8*	テキストオブジェクト

単語の真ん中にカーソルがあり、その単語を削除したい場合、"dw" をする前にカーソ
ルをその単語の先頭に戻す必要があります。"daw" を使うともっと簡単です。

	this is some example text. ~
		       daw

	this is some text. ~

"daw" の "d" は削除オペレータです。"aw" はテキストオブジェクトです。"aw" は"a
word" の意味です。つまり "daw" は "Delete A Word" という意味になります。正確に
は、単語の後の空白も削除されます (単語が行末にある場合は、行末までのすべての空
白が削除されます)。

テキストオブジェクトの利用は Vim での第３の変更方法です。オペレータ-モーション
方式とビジュアルモードは既に述べました。そこにオペレータ＋テキストオブジェクト
方式を追加します。
これはオペレータ-モーション方式と非常に似ていますが、オペレータ-モーション方式
では移動コマンドの前と後のカーソル位置がオペレータの範囲となっていたのに対し、
テキストオブジェクトではオブジェクト全体を対象とします。オブジェクトのどこに
カーソルがあっても構いません。

文全体を変更するのは "cis" です。次の文を使いましょう:

	Hello there.  This ~
	is an example.  Just ~
	some text. ~

２行目の先頭、"is an" の上に移動し、"cis"を実行してください:

	Hello there.    Just ~
	some text. ~

カーソルは１行目の空白の間にあります。ここで新たな文 "Another line." を入力し
ます:

	Hello there.  Another line.  Just ~
	some text. ~

"cis" は変更オペレータの "c" と、テキストオブジェクトの "is" に分けられます。
"is" は "Inner Sentence" の意味です。"as" (a sentence) オブジェクトというのも
あります。"as" では文の後の空白を含みますが、"is" は含みません。文を削除する時
に、前後の空白も同時に消したい場合は、"das" を使います。文を修正するため、空白
を残しておきたい場合は、"cis"を使えばよいでしょう。

テキストオブジェクトはビジュアルモードでも使えます。テキストオブジェクトを選択
範囲に含めることができます。テキストオブジェクトを指定してもビジュアルモードは
終了しないので、何度でもテキストオブジェクトを使えます。例えば、"v" でビジュア
ルモードを開始して、"as" で文を選択した後に、"as" を繰り返してたくさんの文を追
加できます。最後にオペレータを使って、選択した文を対象として、何らかの処理を行
います。

テキストオブジェクトの機能一覧は |text-objects| をご覧ください。

==============================================================================
*04.9*	置換モード

"R" コマンドを使うと置換モードに入ります。このモードでは、入力した文字が、カー
ソル下の文字を置き換えます。このモードは <Esc> を押すまで続きます。
例えば、"text" の１つ目の "t" で置換モードを開始したとします:

	This is text. ~
		Rinteresting.<Esc>

	This is interesting. ~

末尾の 5 文字が 12 文字の他の文字に置き換えられています。"R" コマンドは置換す
る文字がなくなると自動的に行末をずらします。次の行へ移動したりはしません。

<Insert> キーで挿入モードと置換モードを切り換えることができます。

<BS> キーで修正をしようとすると、元の文字が復元されます。直前に打った文字をア
ンドゥするような働きをします。

==============================================================================
*04.10*	終わりに

オペレータ、移動コマンド、テキストオブジェクトを組み合せると、とてつもない数
のコンビネーションを生み出すことができます。既に説明したように、Ｎ個のオペ
レータとＭ個の移動コマンドを使えば、Ｎ＊Ｍ個のコマンドが作れるのです！

オペレータの一覧を探すのなら |operator| をご覧ください。

テキストの一部を削除するには数多くの方法があります。ほんの一部ですが、よく使
うものを挙げておきましょう。

x	カーソル位置の文字を削除 ("dl"と同じ)
X	カーソル位置の直前の文字を削除 ("dh"と同じ)
D	カーソル位置から行末までを削除 ("d$"と同じ)
dw	カーソル位置から次の単語の先頭までを削除
db	カーソル位置から直前の単語の先頭までを削除
diw	カーソル位置の単語を削除 (文の後の空白は除く)
daw	カーソル位置の単語を削除 (文の後の空白を含む)
dG	ファイルの末尾まで削除
dgg	ファイルの先頭まで削除

"d" の代わりに "c" を使うと削除ではなく、変更コマンドになります。"y" にすれ
ばヤンクコマンドです。他のオペレータも同様です。


他の章では触れる機会のない変更コマンドをいくつか挙げておきます。

	~	カーソル位置の大文字/小文字を変更し、カーソルを次に進めます。
		これは('tildeop'がオフの場合は)オペレータではありません。つま
		りモーションコマンドを使うことはできません。ビジュアルモードで
		選択した文字列については全体が対象となります。

	I	(大文字の"i"です) カーソルを行の最初の非空白文字に移動して
		挿入モードを開始します。

	A	行末にカーソルを動かして、挿入モードを開始します。

==============================================================================

次章: |usr_05.txt|  設定の変更

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
