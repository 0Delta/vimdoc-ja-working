COMMENT: 起動方法、起動引数、起動設定ファイル
STATUS: finished 5.7
TRANSLATOR: 村岡太郎 <koron@tka.att.ne.jp>

*starting.txt*  For Vim version 5.7.  Last change: 2000 Feb 14


		VIMリファレンスマニュアル    by Bram Moolenaar


Vimる							*starting*

1. Vimの起動引数		|vim-arguments|
2. Vim on the Amiga		|starting-amiga|
3. xargsからVimを起動		|xargs|
4. 初期化			|initialization|
5. サスペンド			|suspend|
6. The vimrcファイル		|vimrc-intro|
7. The viminfoファイル		|viminfo-file|

==============================================================================
1. Vimの起動引数					*vim-arguments*

大抵、Vimは一つのファイルを編集するために次のコマンドのように起動される。

	vim filename					*-vim*

一般的にはVimはこのように起動することができる:

	vim [option | filename] ..

オプション引数とファイル引数は混在でき、幾つでも与える事ができる。しかし引数を
取るオプションには注意が必要。

さまざまなViのバージョンとの互換性に付いては|cmdline-arguments|を参照。

正確には、どうやって編集をスタートするかには次の5つの方法のどれか1つが使われる
ことになる:

							*-file* *---*
filename	一つかそれ以上のファイル名。最初の一つが最初の編集ファイルとし
		てバッファに読み込まれる。カーソルはバッファの最初の行に置かれ
		る。
		'-'で始まるファイル名をオプションと区別するために、引数に"--"
		を先行させることができる。例:
			Vim -- -filename
		"--"の後の全ての引数はファイル名として解釈されるので、その他の
		オプションや引数"+command"は使用することができない。

							*--*
-		この引数には、Exモードを使用するかによって、2つの意味がある。

		ノーマルモードで始める場合:
>	vim -   or  ex -v -
		新しいバッファに、標準入力を読み込んで編集を始める。このコマン
		ドを使用するとまず標準入力を読み込み、それから標準エラー出力を
		読み込む。例:
>			find . -name "*.c" -print | vim -
		バッファにはセーブを必要とするテキストが含まれるので、自動的に
		「変更」のマークがつけられる。ただし書き込み禁止モードでバッ
		ファが変更されていない場合は除く。例:
>			ls | view -

		Exモードで始める:
>	ex -    or   vim -e -
		サイレントモードで編集を開始するには|-s-ex|を参照。

							*-t* *-tag*
-t {tag}	タグを開く。"tag"がtagsファイルから検索され、関連づけられた
		ファイルが現在のファイルとされ、関連づけられたコマンドが実行さ
		れる。大抵これはCプログラムを編集するときに使用され、"tag"は関
		数名である事が多い。それにより、その関数を含むファイルが自動的
		に開かれ、カーソルがその関数の定義位置に設定される(|tags|を参
		照)。

							*-q* *-qf*
-q [errorfile]	クイックフィックスモードで起動。[errorfile]という名前のファイ
		ルが読み込まれ最初のエラーが表示される。|quickfix|を参照。
		[errorfile]が与えられない場合、オプション'errorfile'がファイル
		名として使用される。省略値に関しては'errorfile'を参照。
		{not in Vi}

(nothing)	上記の4つのうち、どれも指定せずにVimを起動すると、新しいバッ
		ファが用意される。そのバッファは空で、ファイルネームを持たな
		い。


起動時のモードはプログラム名を"vim"とは別の名前にすることで指定でき、それは次
のようにオプションを与えたのと同じである:
ex	vim -e	    Exモードで起動(|Ex-mode|を参照)。		    *ex*
view	vim -R	    読み込み専用モードで起動(|-R|を参照)。	    *view*
gvim	vim -g	    GUIで起動(|gui|を参照)。			    *gvim*
gex	vim -eg	    GUIのEXモードで起動。			    *gex*
gview	vim -Rg	    GUIの読み込み専用モードで起動。		    *gview*
rvim	vim -Z	    "vim"の制限モードで起動(|-Z|を参照)。	    *rvim*
rview	vim -RZ	    "view"の制限モード。			    *rview*
rgvim	vim -gZ	    "gvim"の制限モード。			    *rgvim*
rgview	vim -RgZ    "gview"の制限モード。			    *rgview*

これらの別名の後ろに付けられる文字は無視される。たとえばGUIで起動するのに
"gvim-5"という名前を付けることができる。もちろんその名前で実行可能なファイルが
なければならない。

UNIXでは通常、Vimという名前の実行可能ファイルが一つあり、それにに対して違う名
前のリンクが用意される。使用しているシステムがリンクをサポートせず、実行ファイ
ルのコピーを幾つも作りたくないのならば、リンクの代わりにエイリアスを使うことも
できる。例:
>	alias view   vim -R
>	alias gvim   vim -g

							*startup-options*
オプション引数はどんな順番で与えても良い。一文字のオプションは一つのダッシュ
(-)の後に組み合わせる。引数"--"の後にはオプション引数を置くことはできない。

--help							*-h* *--help*
-h		使用法(ヘルプ)を表示して終了する。{Viにはない機能}

							*--version*
--version	バージョン情報を表示して終了する。出力は|:version|コマンドと一
		緒。{Viにはない機能}

							*-+*
+[num]		最初に編集されるファイルの"num"行目にカーソルを置いて開く。
		"num"がなかった場合には、カーソルは最終行に置かれる。

							*-+/*
+/{pat}		最初に編集されるファイルの、"pat"を含む最初の行にカーソルを置
		いて起動する(指定可能な検索パターンについては|pattern|を参
		照)。

+{command}						*-+c* *-c*
-c {command}	最初のファイルが読み込まれた後(加えてそのファイルに適応される
		autocommandとmodelineが処理された後)に"command"が実行される。
		"command"はExコマンドとして解釈される。"command"にスペースを含
		んでいる場合には、ダブルクォートで挟まれている必要がある(これ
		は使われているシェルに依存する)。例:
>			vim  "+set si"  main.c
>			vim  -c "set ff=dos"  -c wq  mine.mak

		Note: Vimコマンドの引数として"+"か"-c"をあわせ、最大10個まで使
		うことができる。これらの引数は与えられた順番で実行される。{Vi
		は一つのコマンドしか許さない}

							*-r*
-r		リカバリモード。ファイル名の引数なしで実行した場合には、存在す
		るスワップファイルのリストが表示される。ファイルを指定すると、
		クラッシュしたセッションを復活させるために、スワップファイルが
		読み込まれる。|crash-recovery|を参照。

							*-L*
-L		-rと同じ。{幾つかのバージョンのViだけにある"復活可能な編集セッ
		ションのリスト"の意味}

							*-R*
-R		読み込み専用モード。オプション'readonly'が、編集される全ての
		ファイルに設定される。これにより、まだバッファを編集することは
		できるが、偶然にファイルを上書きしてしまうようなことは防がれ
		る。もしも、読み込み専用モードにいることを忘れてバッファへ変更
		を行ったとしても、":w!"のようにExコマンドに「ビックリマーク」
		を付けることで上書きすることが可能。'readonly'オプションは
		":set noro"によりリセットすることが可能(オプションの章|option|
		を参照)。その後の編集は読み込みモードではなくなる。実行ファイ
		ルを"view"として起動した場合は、この-R引数と同じ動作になる。オ
		プション'updatecount'は10000に設定され、これはスワップファイル
		がそう頻繁には自動更新されなくなるという意味になる。

							*-m*
-m		変更が許されない。オプション'write'がリセットされ、ファイルを
		保存することができなくなる。オプション'write'をセットすれば、
		再び保存することが可能になる。

							*-Z* *restricted-mode*
-Z		制限モード。外部シェルを実行するあらゆるコマンドの使用を不許可
		にする。これにはサスペンドであるCTRL-Zや、":sh"、それにフィル
		タリングその他も含まれる。

							*-g*
-g		VimをGUIモードで起動する。|gui|を参照。

							*-v*
-v		ExをViモードで起動する。実行ファイルが"ex"や"gvim"である時にだ
		け、違いが現れる。gvimでは可能ならば"GUI"ではないモードで起動
		する。

							*-e*
-e		VimをExモードで起動する。実行ファイルが"ex"以外の名前の時に意
		味がある。

							*-s-ex*
-s		サイレント、もしくはバッチモード。Vimが"ex"で起動されるか、こ
		のオプションよりも先に"-e"が付いていた場合にだけ働く。そうでな
		い場合には|-s|を参照。端末の替わりにファイルからExコマンドを実
		行する場合に使用される。ほとんどのプロンプトとメッセージは抑制
		される。しかし警告とエラー以外のメッセージ、そして":print"や
		":list"のようなコマンドの出力結果は表示される。
		初期化処理はスキップされる(このオプションが引数"-u"と一緒に使
		われた場合は除く)。

							*-b*
-b		バイナリモード。ファイルのI/Oが<NL>だけを行のセパレータとして
		認識するようになる。オプション'expandtab'は無効化される。オプ
		ション'textwidth'は0に設定される。'modeline'はリセットされる。
		オプション'binary'がセットされる。これはvimrc/exrcのファイルが
		読み込まれた直後、引数で与えられたファイルが読み込まれるよりも
		前に行われる。|edit-binary|も参照。{Viにはない機能}

							*-l*
-l		Lispモード。オプション'lisp'と'showmatch'をセットする。

							*-F*
-F		Farsiモード。'fkmap'と'rightleft'オプションをオンにする。
		(|+rightleft|と|+farsi|有効にしてコンパイルした時にだけ有効。
		そうでない場合Vimはエラーメッセージを表示して終了する)。{Viに
		はない}

							*-H*
-H		Hebrew(ヘブライ)モード。オプション'hkmap'と'rightleft'がセット
		される。(|+rightleft|を有効にしてコンパイルした時にだけ使用
		可。そうでない場合Vimはエラーメッセージを表示して終了する)。
		{Viにはない機能}

							*-V* *verbose*
-V[n]		Verbose(多弁な/詳細)。オプション'verbose'を[n]に設定する(nを省
		略した場合:10)。":source"が実行される度、viminfoの読み書きを行
		う度に情報が表示される。Vimの起動時と終了時に何が行われている
		か、調べる時に使うことができる。{Viにはない機能}


							*-C*
-C		コンパチブルモード。オプション'compatible'をセットする。.vimrc
		ファイルがある場合にもViとのコンパチブルを得る場合に使用でき
		る。|compatible-default|も参照。{Viにはない機能}

							*-N*
-N		非コンパチブルモード。オプション'compatible'をリセットする。
		ファイル.vimrcがないときに、'nocomatible'にするためにこれを使
		うことができる。|compatible-default|も参照。{Viにはない機能}

							*-n*
-n		スワップファイルを使用しない。クラッシュ時の編集ファイルを復旧
		することはできなくなる。非常に低速なメディア(たとえばフロッ
		ピーディスク)のファイルを読んだり編集したい時に使える。
		":set updatecount=0"とすることでスワップファイルを設定しない効
		果がある。オプション'updatecount'に0以上の値を設定することで、
		動作をオンにすることができる。例、":set uc=100"
		ファイルvimrcの実行解釈の直後で、GUIが初期化される前に
		'updatecount'が0に設定される。よってファイルvimrcの中で設定さ
		れるupdatecountは上書きされることになるが、gvimrcでの設定は上
		書きされない。|startup|を参照。{Viにはない機能}
		ディスクへのアクセスを減らしたいのならば(ノートPCを使用してい
		る場合など)、"-n"を使用する替わりに、'updatetime'を設定し、
		'updatecount'に非常に大きい値を設定し、編集中のファイルを保存
		する時に":preserve"とタイプすると良い。この方法だとクラッシュ
		からの復旧の可能性を保てる。

							*-o*
-o[N]		N個のウィンドウを開く。[N]が与えられない場合には、引数で指定さ
		れた全てのファイルに対して1個のウィンドウが開かれる。画面に十
		分な広さがない場合には、始めのほうの数個のファイルだけがウィン
		ドウを伴って表示される。逆にファイルの数よりもウィンドウの数が
		多く指定された場合、多い分のウィンドウは空ファイルの編集用とし
		て開かれる。{Viにはない機能}

							*-T*
-T {terminal}	端末の種類を"terminal"に設定する。これはVimがユーザの端末へ送
		るコードに影響を与える。Vimはユーザが使用している端末の種類を
		自分で判断することができるので、通常これは必要がない
		(|terminal-info|を参照)。{Vimにはない機能}

							*-d*
-d {device}	Amiga専用機能: "device"が編集用に開かれる。普通、ウィンドウの
		位置とサイズを設定するために"-d con:x/y/width/height"の形式で
		指定する。例、"-d con:30/10/600/150"。しかしその他のAUX:のよう
		なデバイスを編集を開始することにも使用できる。{Viにはない機能}

							*-f*
-f		Amiga専用機能: Vimを新しいウィンドウを開いて起動しない。編集作
		業が終わるのを待つプログラム(メールソフトやニュースリーダ)に
		よってVimが起動される時に、このオプションは使用される。
		|amiga-window|を参照。{Viにはない機能}

		GUI: Vimを起動したプログラムと切断しない。'f'は"foreground"を
		意味する。省略されると、GUIバージョンは新しいプロセスへforkし
		て、現在のプロセスは終了してしまう。gvimの編集セッションが終わ
		るのを待つプログラム(メールソフトやニュースリーダなど)には、
		"-f"を使うべきだろう。gvimがforkしないようにするには、自分の.
		gvimrcの中で'guioptions'に'f'を加えれば良い。
		Note: "-gf"でGUIをフォアグラウンドで実行開始できるが、"-fg"だ
		と前景色の設定になってしまう。{Viにはない機能} |gui-fork|参
		照。

							*-u*
-u {vimrc}	初期化のためにファイル"vimrc"が読込まれる。その他の初期化はス
		キップされる;|initialization|を参照。これによりVimを特殊なマッ
		ピングと設定による、特殊なモードで起動することができる。これを
		簡単に使用するにはシェルのエイリアスが使えるだろう。例:
>			alias vimc vim -u ~/.c_vimrc !*
		autocommandsを使うことも考慮すべき;|autocommand|を参照。
		{vimrc}に"NONE"(全て大文字)が指定された時には、ファイルと環境
		変数による全ての初期化、.gvimrcによるGUIの初期化も含め、スキッ
		プされる。
		"-u"の引数を使用することで、暗にオプション'compatible'が設定さ
		れる。これには予期しない副作用がある。|'compatible'|を参照。
		{Viにはない機能}

							*-U*
-U {gvimrc}	GUIがスタートする時にファイル"gvimrc"が読込まれる。その他のGUI
		初期化はスキップされる。{gvimrc}にNONEが指定された場合、初期化
		ファイルは何も読込まれない。
		例外: システムのメニューファイルは常に読込まれる。

							*-i*
-i {viminfo}	デフォルトのviminfoの替わりにファイル"viminfo"が使用される。名
		前として"NONE"(全て大文字)が使用された場合、'viminfo'が指定さ
		れたり、":rv"や":wv"が使われても、viminfoは読み書きともに使用
		されない。|viminfo-file|参照。{Viにはない機能}

							*-x*
-x		ファイルの読み書き時に暗号化を施す。暗号の鍵としてオプション
		'key'に設定された値を使用する。全ての書き込みは、テキストに対
		して鍵を使って暗号化を行ってから なされる。ファイルを読込む時
		には、Vimは暗号化ファイルかチェックし、自動的に鍵を聞いてくる
		ので、引数'-x'は必要でない。|encryption|

							*-s*
-s {scriptin}	スクリプトファイル"scriptin"が読込まれる。ファイルの中のキャラ
		クタは、全てユーザがタイプしたものとして解釈される。エディタが
		終了する前にファイルの終端に達した場合、以降のキャラクタはキー
		ボードから読込まれる。Exモード動作時には働かない、|-s-ex|を参
		照。|complex-repeat|も参照。{Viにはない機能}

							*-w*
-w {scriptout}	Vimを終了するまで、ユーザがタイプした全部のキャラクタが記録さ
		れ、ファイル"scriptout"に書き出される。これは"vim -s"や
		":source!"で読込まれるスクリプトファイルを 作成するのに役立
		つ。既にファイル"scriptout"が存在する場合、新しいキャラクタが
		追加される。|complex-repeat|も参照。{Viにはない機能}

							*-W*
-W {scriptout}	-wに似ているが、アペンド(追加)せずに、既にあるファイルを上書き
		する。{Viにはない機能}

							*-w_nr*
-w{number}	なにもしない。これはViとの互換性のためにある。Viではオプション
		'window'が設定されるが、Vimでは実装されていない。

複数のファイル内の名前を変更するスクリプトファイルの例:
	置換コマンドと:wqコマンドを含んだファイル"subs.vi"を作る:
>		:%s/Jones/Smith/g
>		:%s/Allen/Peter/g
>		:wq

	変更をしたいファイル全てに対してVimを実行する:

>		foreach i ( *.let ) vim -s subs.vi $i

実行ファイルが"view"だったならば、Vimは読込み専用モードで起動する。"view"から
"vim"へハードリンクかシンボリックリンクを作成できると便利だろう。"vim -R"とす
ることでも読込み専用モードで起動できる。

実行ファイルが"ex"ならば、VimはExモードで起動する。これは":"コマンドだけしか使
えないことを意味している。しかし引数"-v"が与えられれば、Vimはとにかくノーマル
モードで起動する。

==============================================================================
2. Vim on the Amiga					*starting-amiga*

VimをWorkbenchから起動する				*workbench*
--------------------------

Workbench上でアイコンを2度クリックすればVimを起動することができる。すると空の
バッファで起動するだろう。

"Project"アイコンを使用することで、1つ以上のファイルを編集するために起動するこ
とができる。アイコンの"Default Tool"にはVimの実行ファイルの完全なパスを設定し
なければならない。".info"ファイルの名前は、テキストファイルの名前と同じでなけ
ればならない。このアイコンを2度クリックすることで、そのファイル名を カレント
ファイルの名前として、バッファに読み込み起動する シフトキーを押しながらアイコ
ンをクリックし、最後のファイルを2度クリックすることで、複数のファイルを編集す
ることができる。これら全てのアイコンの"Default Tool"は同じでなければならない。

Workbenchからではファイル名以外の引数は、Vimへ与えることができない。

Vimウィンドウ						*amiga-window*
----------

Vimは起動されたCLIウィンドウの中で動作する。Vimが"run"や"runback"コマンド、
ワークベンチから起動された場合には、自分自身でウィンドウを開く。

技術的詳細:
	新しいウィンドウを開くためにちょっとしたトリックを使う。Vimは普通のCLI
	ウィンドウの中で起動されていないことを検出するとすぐに、"t:"にあるスク
	リプトファイルの作成する。このスクリプトファイルは起動されたVimと同じ
	コマンドに、加えて"endcli"コマンドを持っている。このスクリプトファイル
	は"newcli"コマンドと一緒に実行される (これが行われる時には"c:run"と
	"c:newcli"コマンドが必要)。スクリプトファイルはリブートされるか、手動
	で消すまで存在しつづける。この方法には":sh"と":!"コマンドが正しく働く
	必要である。しかしVimが-fオプション(フォアグラウンドモード)で起動され
	た時には、この方法は使われない。Vimを-fオプションで起動した時には、そ
	の終了を待つからである。スクリプトのトリックを使うと、Vimを呼び出した
	プログラムはその終了を知ることができない。オプション-fはメールプログラ
	ムなど編集のセッションが終わったことを 検出したい場合に、Vimを起動する
	方法として使用される。だからオプション-fが指定された時には、":sh"と
	":!"コマンドは使用することができない。

Vimは自動的にWindowのサイズを認識して変更する。Amiga DOS 1.3の元では、表示の更
新速度を上げるために、fastfontsのプログラム"FF"の支援を受けて動作する。

==============================================================================
3. xargsからVimを起動						*xargs*

xargsは標準入力からの入力を引数として、プログラムを起動するためのプログラムで
ある。典型的な使い方は:

>	find . -name "*.c" -print | xargs vim

問題はxargsが起動するプログラムのために標準入力のプロパティを設定しないこと
で、これがVimにとって問題を引き起こす。Vimが標準入力からの入力を期待するコマン
ドだからである。タイプした文字がechoされて<Return>を押すまで効力を発揮しないと
いう症状がでる。

これはxargsを使う上で忌々しき問題である。これを回避するために、次のような小さ
なプログラムを使うことができる:

> #include <unistd.h>
> #include <stdio.h>
>
> main(argc, argv)
>     int    argc;
>     char   **argv;
> {
>     close(0);		/* close stdin */
>     dup(2);		/* duplicate stdin from stderr */
>     execvp(argv[1], argv + 1);
>     perror("could not execute program");
> }

これを"start.c"として保存し、"start"という名前でコンパイルし、検索パスのどこか
に置く。使っているシステムによっては修正が必要だろう。使い方の例:

>	find . -name "*.c" -print | xargs start vim

==============================================================================
4. 初期化					*initialization* *startup*

このセクションはVimの非GUIバージョンについて書く。GUIをスタートさせた時の追加
の初期化は|gui-fork|を参照。

スタート時に、Vimは環境変数とファイルを調べ、然るべく値を設定する。Vimはこの順
序で取り掛かる。

1. オプション'shell'を設定する				*SHELL* *COMSPEC*
	環境変数SHELLが存在するならば、オプション'shell'を設定するのに使われ
	る。MS-DOSとWin32ではSHELLが設定されていない場合COMPSPECの値が使用され
	る。

2. オプション'term'を設定する				*TERM*
	環境変数TERMが存在するならば、オプション'term'を設定するのに使われる。

3. 環境変数とファイルのExコマンドを実行する
	環境変数の値は一つのExコマンドラインとして読まれるので、複数のコマンド
	を実行したい時には'|'か"<NL>"で区切る必要がある。
								*vimrc* *exrc*
	"vimrc"ファイルは初期化コマンドを含んだファイルである。vimrcファイルは
	一行ずつExコマンドとして実行される。"exrc"とほぼ等価である。それらは同
	じタイプのファイルであるが、"exrc"が常にViによって使われるのに大して、
	"vimrc"はVim特有のものである。|vimrc-intro|も参照。

	個人の初期化ファイルの推奨される配置場所:
		Unix		    $HOME/.vimrc
		OS/2		    $HOME/.vimrc or $VIM/.vimrc (or _vimrc)
		MS-DOS and Win32    $HOME/_vimrc or $VIM/_vimrc
		Amiga		    s:.vimrc or $VIM/.vimrc

	Vimが"-u filename"で起動された場合、デフォルトのvimrcの代わりに
	"filename"が使われる。続く初期化処理のの5.までがスキップされる。
	"vim -u NONE"によりこれらの初期化を省略することができる。|-u|

	起動引数"-s"によりVimがExモードで起動されたならば、続く4.までの初期化
	処理がスキップされる。オプション"-u"だけが割り込まれる。
     							*system-vimrc*
     a. Unix, OS/2, VMS, Macintosh, RISC-OSそしてAmigaでは、システムのvimrc
	ファイルが初期化のために読み込まれる。このファイルのパスは":version"コ
	マンドによって確認できる。 Note このファイルは'compatible'モードであっ
	ても読み込まれる。'compatible'の自動リセットはこれが終わった後に行われ
	ることになっている。必要ならば":set nocp"コマンドを追加する。

			  *VIMINIT* *.vimrc* *_vimrc* *EXINIT* *.exrc* *_exrc*
     b. 初期化のために4つの場所が検索される。最初に見つかったものが使用され、
	残りは無視される。
	-  環境変数VIMINIT(|compatible-default|も参照) (*)
	-  ユーザvimrcファイル:
		    "$HOME/.vimrc"	(for Unix and OS/2) (*)
		    "s:.vimrc"		(for Amiga) (*)
		    "home:.vimrc"	(for Amiga) (*)
		    "$VIM/.vimrc"	(for OS/2 and Amiga) (*)
		    "$HOME/_vimrc"	(for MS-DOS and Win32) (*)
		    "$VIM\_vimrc"	(for MS-DOS and Win32) (*)
		Note: Unix, OS/2そしてAmigaでは、".vimrc"がなかった場合には、
		MS-DOS互換のファイルシステムを使用することを考え、"_vimrc"も試
		みられる。MS-DOSとWin32では"_vimrc"を探したあとで、ロングファ
		イルネームの仕組みを使用して".vimrc"が探される。
		Note: MS-DOSとWin32では"$HOME"がまず検査される。"_vimrc"と
		".vimrc"のどちらもない場合には、"$VIM"が調べられる。$VIMが設定
		されていない場合については|$VIM|参照。
	-  環境変数EXINIT
	-  ユーザのexrcファイル。vimrcと同じだが、vimrcがexrcによって置き換え
	   られている。But without the (*)!

     c. 'exrc'オプションがオン(初期状態ではオフ)の場合、現在のディレクトリで4
	つのファイルが検索される。最初に見つかったものだけが使用され、残りは無
	視される。
	-  The file ".vimrc" (for Unix, Amiga and OS/2) (*)
		    "_vimrc" (for MS-DOS and Win32) (*)
	-  The file "_vimrc" (for Unix, Amiga and OS/2) (*)
		    ".vimrc" (for MS-DOS and Win32) (*)
	-  The file ".exrc"  (for Unix, Amiga and OS/2)
		    "_exrc"  (for MS-DOS and Win32)
	-  The file "_exrc"  (for Unix, Amiga and OS/2)
		    ".exrc"  (for MS-DOS and Win32)

     (*) このファイルを使用するか環境変数を使用した場合、自動的に'compatible'
	 オプションがオフに設定される。|compatible-default|を参照。

4. ファイルタイプ設定スクリプトがロードされる。
	このスクリプトはautocommandのFileTypeイベントに使用される。|FileType|
	と|'filetype'|を参照。これはVimが|+autocmd|機能を伴ってコンパイルされ
	た時にだけ行われる。
	Vimが"-u filename"で起動された時には、これはスキップされる。 |-u|
	このファイルの名前はシステムに依存する:
		Amiga	    $VIMRUNTIME/filetype.vim
		Mac	    $VIMRUNTIME:filetype.vim
		MS-DOS	    $VIMRUNTIME\filetype.vim
		RiscOS	    Vim:Filetype
		Unix	    $VIMRUNTIME/filetype.vim
		VMS	    $VIMRUNTIME/filetype.vim

5. 'shellpipe'と'shellredir'を設定する
	それ以前に設定されていなければ、'shell'オプションに従って'shellpipe'と
	'shellredir'オプションが設定される。これは自分で設定しなくても、Vimが
	適切な'shellpipe'と'shellredir'の値を考えてくれることを意味している。

6. "-n"コマンド引数が使用されていたら、'updatecount'を0に設定する

7. バイナリオプションを設定する
	Vimの起動時に"-b"フラグが与えられた場合、この時点でバイナリ編集用のフ
	ラグが設定される。|-b|参照。

8. GUIの初期化を行う
	"gvim"として起動された場合、GUIの初期化が行われる。|gui-init|参照。

9. viminfoファイルを読み込む
	'viminfo'オプションが殻でなければ、viminfoファイルが読み込まれる。デ
	フォルトでは空だから、これ以前の初期化によって'viminfo'は設定しておく
	必要がある。|viminfo-file|参照。

10. quickfixファイルを読み込む
	Vimに"-q"フラグが与えられた場合、quickfixファイルが読み込まれる。これ
	に失敗するとVimは終了する。

11. 全てのウィンドウを開く
	|-o|フラグが与えられ場合、ウィンドウが開く(しかしまだ表示されない)。
	スクリーンが切り替えられると、描画が始まる。
	"-q"フラグがVimに与えられた場合、最初のエラーにジャンプする。全ての
	バッファがロードされる。

12. スタートアップコマンドが実行される
	"-t"フラグがVimに与えられた場合、タグにジャンプする。
	|-c|と|+cmd|引数で与えられたコマンドが実行される。
	'insertmode'オプションがセットされていると、インサートモード入る。
	|VimEnter|のautocommandが実行される。

初期化の使い方のヒント:

スタンダードセットアップ:
全ての編集セッションに有効な、デフォルト設定とキーマッピングを設定するvimrc
ファイルを作成する。それを既に3bで述べた位置に置く:
	~/.vimrc	(Unix and OS/2)
	s:.vimrc	(Amiga)
	$VIM\_vimrc	(MS-DOS and Win32)
Note vimrcファイルを作るとデフォルトで'compatible'オプションがオフに設定され
る。|compatible-default|参照。

ローカルセットアップ:
特定のディレクトリだけにおいて編集時に必要になるコマンドを vimrcファイルに書
き、そのディレクトリに".vimrc" (MS-DOSとWin32は"_vimrc")という名前で置く。
NOTE: Vimに、これらのファイルを見るように指定するには、'exrc'オプションをオン
にする必要がある。|trojan-horse|(トロイの木馬)も参照。

システムセットアップ:
これは複数人で使うUNIXシステムを管理し、全員のデフォルト設定を行いたい時に適用
される。デフォルト設定とキーマッピングを行うコマンドをvimrcファイルに記述し、
":version"コマンドで表示される場所に置く。

Vimの現在状態をファイルに保存する:
オプションの値を変えたときや、キーマッピングを作成した時には、それらを後で再利
用するためにvimrcファイルに保存したいだろう。現在の設定状態をファイルに保存す
るためには|save-settings|を参照。

Viユーザの設定の問題の回避:
Viは環境変数EXINITとファイル"~/.exrc"を初期化に使用する。もし(Vimの設定が)Viに
干渉して欲しくないならば、それらを使う替わりにVIMINITとvimrcを使用する。

Amigaの環境変数:
Amigaには2種類の環境変数が存在する。1つはDOS 1.3(かそれ以上)のsetenvコマンド
で、これはVimによって認識される。AmigaDos 1.3のマニュアルを参照。古いManxのSet
コマンド(バージョン5.0以前)の環境変数は、認識されない。

MS-DOSの行区切り文字:
MS-DOS風(MS-DOS自信、Win32、そしてOS/2)では、全てのvimrcファイルは行区切文字と
して<CR> <NL>を使用していると仮定する。<NL>だけを行区切文字として持つファイル
や、":map xx yy^M"のような設定のファイルを使う場合、問題を引き起こす。末尾の^M
は無視されてしまうだろう。

						     *compatible-default*
Vimが起動すると、オプション'compatible'がオンに設定される。これは起動の初期化
時に使用される。ユーザのvimrcファイルが見つかるか、現在のディレクトリにvimrcが
見つかるか、もしくは環境変数"VIMINIT"が設定されている場合すぐに、
'nocompatible'が設定される。これにはその他のオプションへの設定・非設定の副作用
がある('compatible'参照)。しかし設定・非設定されないタイプのオプションだけが変
えられるだろう。これはVimの起動時に持っている'compatible'の値と同様の効果であ
る。Note これはシステムvimrcファイルでは起こらない。

しかし'compatible'の有効・無効化が.vimrc内で見つかった場合には、副作用が発生す
る:キーマッピングは見つかるたびに解釈される。これは"<CR>"のようなものを使う時
に違いを生じる。もしもマッピングが'compatible'のある値に依存している場合、その
マッピングを与える前に有効・無効化をする。

上記した振る舞いは次の方法で無効にすることができる:
- コマンドライン引数に"-N"を与えた場合、vimrcファイルが存在しなくても
  'nocompatible'が使用される。
- コマンドライン引数に"-C"が与えられた場合、vimrcが存在しても'compatible'が使
  用される。
- 引数"-u {vimrc}"が使用された場合、'compatible'が使われる。
- 実行ファイルの名前が"ex"で終わっていた場合、"-C"引数が与えられたのと同様に働
  く: vimrcファイルが存在しても'compatible'が使用される。これは"ex"としてVimが
  起動された時にはVimは"ex"のように振舞うようにするためである。

トロイの木馬を回避する:					*trojan-horse*
現在のディレクトリにある"vimrc"や"exrc"を読み込むときに、'secure'オプションを
設定することで、安全性のために幾つかのコマンドを無効にすることができる。タグ
ファイル内のコマンドを実行する際にも常にこれが行われる。そうでないと他人が作成
した悪意を持ったコマンドを、偶然実行してしまう可能性がある。使用不可になるコマ
ンドは、シェルを起動するものと、ファイルに書き込むものと、そして":autocmd"であ
る。":map"コマンドは表示され、どのようなマッピングがなされたか確認することがで
きる。
	ローカルなvimrcファイル内で全てのコマンドを実行したい場合には、EXINIT
かVIMINIT環境変数か、グローバルな"exrc"もしくは"vimrc"ファイルで'secure'オプ
ションをリ セットする。現在のディレクトリにある"vimrc"と"exrc"では、明らかな理
由だが、これはできない。
	UNIXシステムで、vimrcファイルが自分のものではない時にだけ、これは起こ
る。警告: vimrcかexrcを含むアーカイブを展開したときには、そのファイルはあなた
自身のものになる。そこには安全性保護などない。Vimを起動する前に現在のディレク
トリにvimrcファイルがないかチェックするか、'exrc'オプションをリセットしたほう
が良い。幾つかのUNIXシステムでは一般ユーザがファイルに"chown"を行うことを許し
ているものがある。これは別のユーザが悪意に満ちたvimrcを作成し、所有者を貴方に
することを可能にしている。注意されたし!
	タグサーチコマンドを使う時には、実行されるサーチコマンド(タグファイル
の各行の最後の部分)は常に安全なモードで行われる。これは現在のディレクトリにあ
る vimrc/exrcからコマンドが実行されるのと、ちょうど同じように働く。

							*slow-start*
Vimの起動に時間がかかる場合、幾つかの理由が考えられる:
- UnixバージョンがGUIおよび/もしくはX11オプションと供にコンパイルされた場合
  (":version"の出力で"+GUI"と"+X11"をチェック)、共有ライブラリをロードしX11
  サーバに接続する必要がある。GUIとX11を無効にしてコンパイルしたバージョンを試
  して欲しい。これにより実行ファイルが小さくもなるだろう。
- "viminfo"を使用している場合、viminfoファイル尾w読み込むのに少し時間がかか
  る。viminfoが原因ならば一時的にviminfoを無効にすることによって確認することが
  できる(Vimを引数"-i NONE"を使用する。|-i|)。":set viminfo='20\"50"で、レジス
  タに保存される行数を減らすことを試すのも良い。
							|viminfo-file|.

							*:intro*
ファイル名を与えずにVimを起動した場合、(Vimが何だかしらない人に向けて)紹介メッ
セージが表示される。そのメッセージはなんらかの操作によって画面が再描画されると
すぐに消される。もう一度メッセージをみるには、":intro"コマンドを使用する。起動
時に紹介メッセージを表示しないようにするには'shortmess'に'I'フラグを追加する。

==============================================================================
5. サスペンド						*suspend*

						*iconise* *CTRL-Z* *v_CTRL-Z*
CTRL-Z			":stop"のようにVimをサスペンドする。
			ノーマルとビジュアルモードで動作する。挿入モードとコマ
			ンドラインモードでは、CTRL-Zは通常のキャラクタ文字とし
			て入力・挿入される。


:sus[pend][!]	or			*:sus* *:suspend* *:st* *:stop*
:st[op][!]		Vimをサスペンドする。
			もしも'!'を付けないで'autowrite'がセットされているなら
			ば、変更とファイル名を持つ全てのバッファは保存される。
			もしも'!'をつけたか、'autowrite'がセットされていないな
			らば、変更のあるバッファは保存されないので、後でVimを
			フォアグラウンドに戻すのを忘れてはならない。

GUIモードでは、サスペンドはgvimのアイコン化として実装されている。Windows 95/NT
では、gvimは最小化される。

多くのUNIXシステムでは、VimをCTRL-Zでサスペンドすることが可能である。これは
ノーマルモードとビジュアルモードにおいて有効である(次の章|vim-modes|を参照)。
Vimを再びフォアグラウンドに戻せば、続きの作業を行うことができる。それ以外のシ
ステムでは、CTRL-Zは新しいシェルをスタートさせる。これはコマンド":sh"と同じで
ある。この場合、シェルを終了させればVimで続きの作業を行うことができる。

==============================================================================
6. The vimrcファイル			*vimrc-intro* *vim-script-intro*

vimrcファイルは全てのVimセッション で使おうとしている設定をするために使われ
る。通常ファイルは$HOME/.vimrcとなるが、別のファイルを使用することも可能であ
る。詳細は|vimrc|。Vimは起動時にそれ(もしくは複数)を読み込み、中のコマンドを解
釈する。

Vimスクリプトファイルを他の目的のために使用することもできる。シンタックスハイ
ライティングに使われるファイルが一例である。Vimにはあらゆるタスクを成し遂げる
に十分なコマンドが揃っている。

						*vimrc_example.vim*
vimrcファイルのサンプルを$VIMRUNTIME/vimrc_example.vimに見つけることができるだ
ろう。これを独自のvimrcファイルとして使い始めることができる。他人の作ったvimrc
ファイルの中に沢山の例を見出すこともできる。http://www.vim.org/user.htmlを訪れ
てみよう。


EXコマンドを使う ~

vimrcファイルはVimのコマンドラインで打ち込むことのできる全てを含むことができ
る。タイプする時に必要な先頭のコロンは、スクリプトファイルには要求されない。
Vimのコマンドラインでは次のようにタイプするだろう
>	:set number
同じことをvimrcファイルでは、単に次のようにすれば良い
>	set number

行末の文字はシステムに依存する。Unixでは一文字<NL>を使用する。MS-DOS、
Windows、OS/2、そしてそれに類するシステムでは<CR><LF>が使用される。これは<CR>
で終わっているマッピングを使用するときには重要である。|:source_crnl|を参照。

長い行は、次行の書き出しに"\" (バックスラッシュ。訳注:Windows等では円記号)を置
いて区切り、複数行に渡らせることができる。|line-continuation|参照。
例:
>	iabbr Http  Hyper Text Transfer
>		\ Protocol
Note これはVimスクリプトファイルでだけ有効。


空白 ~

空の行を書くことが許され、そしてそれは無視される。

先行する空白文字(ブランクとタブ)は常に無視される。引数の間の空白文字(上記例で
言えば'set'と'number'の間)は1文字のブランク文字として解釈され、区切り文字とし
ての役割を担う。行末(最後の可視文字以降)の空白文字は、状況に応じて無視されたり
されなかったりする。下記参照。

"="記号を必要とする次のような":set"コマンドを考えると
>	set cpoptions    =aABceFst
"="記号の直前の空白文字は無視される。しかし"="以後には空白文字を置くことはでき
ない!

オプションの値として空白文字を含むためには、次の例のように"\"(バックスラッ
シュ)によってエスケープしなければならない:
>	set tags=my\ nice\ file
同様の例で次のように書いたものは
>	set tags=my nice file
次のように解釈されてしまうので、エラーを出す:
>	set tags=my
>	set nice
>	set file


コメント ~

文字"(ダブルクォーテーション記号)がコメントの開始記号である。この文字を含むそ
れ以降、行末まで全ての文字はコメントとみなされ無視される。但し以下に示す例のよ
うなコメントとは解釈されない場合を除く。コメントは行のどの位置からでも開始でき
る。

コマンドにコメントで簡単な注釈を付ける。その例:
>	abbrev dev development		" shorthand
>	map <F3> o#include		" insert include
>	execute cmd			" do it
>	!ls *.c				" list C files
短縮形'dev'は'development    " shorthand'に展開される。<F3>のマッピングは実際
には、'o# ....'以降の'" insert include'も、全体を含んだ形になる。"execute"コマ
ンドはエラーになる。"!"コマンドは、それ以降の全てをシェルに送るので、'"'文字が
マッチしない、というエラーを引き起こす。
":map"、":abbreviate"、":execute"そして"!"コマンドの後には、一切のコメントを置
くことはできない(その他にも幾つか、この制限があるコマンドがある)。"map"、
":abbreviate"そして"execute"コマンドには、次のようなトリックを使うことでコメン
トを記述することができる:
>	abbrev dev development|" shorthand
>	map <F3> o#include|" insert include
>	execute cmd			|" do it
コマンドは文字'|'によって次のコマンドと区切られる。そしてその次のコマンドとは
単なるコメントになっている。

Note 略語設定(abbreviation)とマッピングの例の'|'の前には、空白文字が挿入されて
いない。これらのコマンドでは、行末もしくは'|'までの全ての文字がコマンドとして
解釈される。この振る舞いの結果、行末に空白文字が含まれて、それに気がつかない場
合がある:
>	map <F4> o#include  
To avoid these problems, you can set the 'list' option when editing vimrc
files.
この問題を避けるために、vimrcファイルを編集して'list'オプションを設定すること
ができる。


落とし穴 ~

さらに大きな問題が、次の例によって発生する:
>	map ,ab o#include
>	unmap ,ab 
,abのマッピングはちゃんと',ab'にマッピングされ、これには続く空白文字は含まれな
い。しかし"unmap"が直接行末に達していない場合、Vimはマッピングされていない、存
在しないシーケンス、',ab 'をマッピングから解除(unmap)しようと試みる。このエ
ラーがあった場合、'unmap ,ab 'の行末の空白文字は表示されないために、見つけるの
は非常に困難である。

これは'unmap'コマンドの後にコメントを使った場合に生じる問題と、まったく同一で
ある:
>	unmap ,ab     " comment
コメントの部分は無視される。しかしながらVimは存在しない',ab     'をマッピング
から解除しようと試みる。この問題を解決するには'b'以降の文字は、空白文字そして
コメントを含めゴッソリ消すことが最善である。

上記のような状況を除けば、次のようにVimが定義するように、コマンドとコメントを
同一行に書くことができる。
>	set number	" display line numbers


ノーマルモードのコマンド ~

ノーマルモードのコマンドを実行するには、|:normal|コマンドを使用することができ
る。特殊文字に伴う問題を回避するには、|:execute|コマンドを使用する。その引数は
1つの式である(詳しいことはもっと下に記す)。例:
>	exe "normal mxGOA test.\<Esc>`x"
この例ではテキストの最末尾に"A test."という行を追加し、カーソルを現在の位置に
戻す。Note "\<ESC>"はエスケープ文字へと変換される。バックスラッシュやダブル
クォートを此処に使う時には、その前にバックスラッシュを書く必要がある:
>	exe "normal \"aYgg\"aP"
This yanks the current line and puts it above the first line in the file.  To
do this without changing the cursor position and the text displayed in the
window, this has to be extended a bit:
この例では、現在の行をヤンクし、ファイルの先頭に挿入している。カーソル位置と
ウィンドウに表示されるテキストを変更せずに行うためには、これを少し拡張すればよ
い:
>	exe "normal ma\"aYHmbgg\"aP`bzt`a"
詳しく見ると:
	ma		現在の位置にマークaを設定
	"aY		現在行をヤンクしてレジスタaに保存
	Hmb		ウィンドウの最上位行に移動し、マークbを設定
	gg		ファイルの先頭に移動
	"aP		カーソルのある行の上にヤンクした行を挿入
	`b		表示されていた最初の行へ移動
	zt		ウィンドウのテキスト位置を復帰
	`a		カーソルの位置を復帰


IF - ELSE - ENDIF ~

ある状況下においてだけコマンドを実行したいことが時々あるだろう。そんな時には
|:if|コマンドを使用することができる。例:
>	if &term == "xterm"
>	  echo "this is an xterm"
>	endif
"if"コマンドの引数は「式」である。式が真(0以外)として評価されると、そこから
"endif"までの文が実行される。式が0(偽)として評価された場合、これらのコマンドは
スキップされる。|:echo|コマンドもまた式であり、その引数を表示する。

式には多くの構成を使用することができる。サンプルを参考にすると:
	&term		'term'オプションの値。'&'で始まる名前は、その名前のオ
			プションの値である。
	==		"equal"、両側の文字列または数字を比較し、等しければ真
			として評価する。
	"xterm"		文字通りの文字列
式について詳しい情報は|expression|を参照。

"else"も使用することができる:
>	if &tabstop != 8
>	  echo "tabstop is " . &tabstop
>	else
>	  echo "tabstop is OK"
>	endif
Note 最初のechoコマンドに使われている点"."は、文字列定数と'tabstop'オプション
の値を連結する。その際に連結できるように、数値は文字列に自動的に変換される。


WHILE - ENDWHILE ~

コマンドのシーケンスを繰り返すために|:while|コマンドを使うことができる:
>	let i = 1
>	while i < 10
>	  echo i
>	  let i = i + 1
>	endwhile
これは内部変数"i"を使用する。内部変数は多くのプログラミング言語と同じように使
われる。変数に値を代入するために|:let|コマンドが使用される。変数は前もって宣言
しておく必要はないし、数値を保存するのか文字列なのかの区別も存在しない。
"while"と"endwhile"の間の分は9回繰り返される。
Note 変数"i"は"let i = i + 1"コマンドによって増加している。もしこれを忘れてし
まった場合、ループは永遠に回りつづけるだろう。不幸にもそのループに陥った場合に
は、CTRL-C(MS-DOSではCTRL-Break)で脱出することができる。


組み込み関数 ~

Vim has builtin functions that you can use.  Example:
Vimには便利に使うことのできる関数群が組み込まれている。例:
>	echo exists("did_my_inits")
この例では変数"did_my_inits"が存在すれば1、存在しなかった場合には0を表示する。
>	if has("gui_running")
>	  syntax on
>	endif
これはGUIモードで起動された時に、シンタックスハイライティング(構文強調)を有効
にしている。has()関数はある機能がサポートされているかを確かめるために使うこと
ができる。
>	call append(0, hostname() . " - " . strftime("%Y %b %d"))
これはコンピュータの名前と現在時刻を記した行をカレントバッファの先頭に挿入す
る。

Vimにさせたい仕事を実現するための、多くの関数が用意されている。これらはノーマ
ルコマンドと一緒に使うことで、とても複雑になる。|functions|参照。


ユーザ定義関数 ~

Vimを使いこなすにつれ、同じようなコマンドを何度も使うようになるだろう。そんな
時は関数を自分で定義して、必要な時にはそれを呼び出すようにする。例:
>	function My_Func(name)
>	  if a:name ==? "john"
>	    let s = "Hello "
>	  else
>	    let s = "I don't know "
>	  endif
>	  echo s . a:name . "."
>	endfun
解説:
関数"My_Func"は1つの引数を持つものとして定義されている。"a:name"が、その引数を
参照するために"a:name"が使用される。"==?"演算子は引数と文字列"john"を、大文字
小文字の区別無しで比較する。こんな風に呼び出すことができる:
>	call My_Func("John")
>	Hello John.
>	call My_Func("James")
>	I don't know James.

Note ユーザ関数の名前は、必ず大文字で始まらなければならない。引数はいくらでも
使うことができる。|:function|参照。


パッケージ ~

To avoid your function names to interfere with functions that you get from
others, use this scheme:
他人の作った関数の名前と自分のものが衝突するのを避けるためには、次のスキーム
(仕組み)を使う:
- 各々の関数の前には、ただひとつと思われる文字列を付加する。慣用的に略語が使用
  される。例えばオプションウィンドウに関連する関数ならば"OW_"という具合であ
  る。
- ファイルに関数の定義を含める。既に関数が読み込まれたかは、グローバル変数を設
  定することで知ることができる。ファイルを再び読み込んだ(|:source|)時には、予
  め関数を読み込み解除する。
例:
>	" This is the XXX package
>
>	if exists("XXX_loaded")
>	  delfun XXX_one
>	  delfun XXX_two
>	endif
>
>	function XXX_one(a)
>		... body of function ...
>	endfun
>
>	function XXX_two(b)
>		... body of function ...
>	endfun
>
>	let XXX_loaded = 1


自動コマンド実行 ~

ファイルの種類に応じてオプションやマッピングを設定したい場合があるだろう。幸運
なことにVimは既にファイルの多くの種類を認識する。これは構文強調のために使用さ
れるが、もちろん他のことに使うこともできる。使うためには構文解析を有効にする
|:syn-on|か、このコマンドを使う必要がある:
>	filetype on

例えばCのソースに対して'cindent'オプションを、自動コマンドを実行するには:
>	au  FileType  c  set cindent
このautocommandは3つの部分から構成されている:
	FileType	使われるイベントの名前
	c		検出されたファイルタイプの名前
	set cindent	ファイルタイプが"c"でイベントが起こった時に実行される
			コマンド
詳しい解説は|:autocmd|を参照。

'cindent'のようなバッファで局所的に働くオプションには、これでうまくいく。マッ
ピングを定義するために使用した場合には、複数ウィンドウで使用してしまうと正しく
働かない。例をあげると、あるウィンドウでfoo.txtを、他のウィンドウでfoo.cを編集
したとすると、foo.cのために設定したマッピングがfoo.txtでも使用されることにな
る。foo.cに対してだけ働くマッピングを作るためには、ファイルfoo.cが現在のバッ
ファでなくなったらすぐにマッピング解除する必要がある。それはこの方法でできる:
>	au BufEnter * if &ft == "c" | call CM_map() | endif
>	au BufLeave * if &ft == "c" | call CM_unmap() | endif
>	fun CM_map()
>	  set cindent
>	  imap { {<CR> <BS><CR>}<Up><End>
>	endfun
>	fun CM_unmap()
>	  iunmap {
>	endfun
ここではある関数がマッピングを定義するために、別の一つがそれを解除するために使
用されている。これにより、自動コマンドの部分を変更せずにマッピングを追加するこ
とが可能になる。
関数を使うことで自動コマンドを短くすることができる。'|'はコマンド区切り文字で
ある。
":imap"コマンド内の<>というコードは、コントロール文字の代替である。こうすると
入力も、確認も容易になる。" <BS>"は、<CR>がタイプされた時に字下げが消えてしま
うのを、回避するためのものである。

==============================================================================
7. The viminfoファイル					*viminfo-file*

いったんVimを終了させ、後に再び起動する時には、通常多くの情報が失われてしま
う。viminfoファイルは終了する時の情報を保存しておくのに使用され、それにより再
起動した時には同じ状態で編集セッションを続けることができる。

viminfoファイルにはこんなものを記憶できる:
- コマンドラインの履歴
- 検索文字列の履歴
- 入力(|input()|)の履歴
- レジスタの内容
- 複数のファイルのマーク
- ファイルの中の位置を指し示すマーク
- 最後の検索/置換パターン('n'と'&'のため)
- バッファのリスト
- グローバル変数

コンパイル時に|+viminfo|機能が無効にされていたら、viminfoファイルはサポートさ
れない。

セッションファイルも使用することができる。viminfoファイルは「している仕事」に
依存しない、という点で異なる。通常viminfoファイルは一つしか存在しない。セッ
ションファイルは、ある特定の編集作業の状態を保存するのに使う。セッションファイ
ルは、作業しているプロジェクト毎に複数作成することが可能である。Viminfoもセッ
ションファイルどちらも、Vimをスタートしてすぐに好みの設定を行うという目的のた
めに、効果的に使用できる。 |session-file|


							*viminfo-read*
Vimが起動した時に'viminfo'オプションが空でなかったら、viminfoファイルが読み込
まれ、適切な情報が適用される。起動時にはマークは読み込まれない(しかしファイル
マークは読み込まれる)。起動時に'viminfo'オプションをどうやって設定するのかは
|initialization|を参照。

							*viminfo-write*
Vimが終了する時に'viminfo'が空でなかったら、情報がviminfoファイルに保存される
(もし既にあった存在した場合には、それと混合させられる)。'viminfo'オプション
は、どのような情報が保存されるか、またどのくらいの量を保存するべきかその限界を
指定する為の情報を含む文字列である。('viminfo'参照)。

Unixの注意:
- viminfoファイルには入力したテキストや、使用したコマンドが記載されているの
  で、他人に覗かれないように保護(パーミション設定)したほうが良い。
- 複数のユーザでviminfoファイルを共有したい時(例えば他のユーザへ"su"する時な
  ど)には、グループもしくは全員にviminfoファイルへの書き込み権限を与える。Vim
  ファイルが新しいviminfoファイルを書くときには、これらの設定はそのままに保護
  する。しかし、誰にでもviminfoファイルを読ませたり書かせたりすべきではない
  し、注意が必要。
- 現在の"本当"のユーザによって書き込み不能なviminfoファイルは、Vimは決して上書
  きしない。これは"su"でrootユーザになった時、しかし$HOMEがまだ通常ユーザの
  ホームディレクトリのままの時の支援となる。そうでないとVimはroot所有の、他の
  誰にも読めないviminfoファイルを作成してしまう。

マークは個々のファイル別々に保存される。ファイルが読み込まれ'viminfo'が空でな
い場合、viminfoファイルからマーク情報が読み込まれる。注意: マークはVimが終了す
る時にだけ保存され、Vimとのセッション中にオープンされ":bdel"されていないファイ
ル全てに対して、マークが記憶される。もしも":bdel"で破棄したファイルについて
マークを保存しておきたいのならば、":wv"を使う。'['と']'のマークは保存されない
が、'"'は保存される。'"'マークは最後にファイルを閉じた時にカーソルがあった場所
に行くのに、非常に便利である。'viminfo'に文字"r"が与えられた時には、一切のマー
ク情報は記録されない。これはリムーバブルメディア上のファイルのマークが保存され
るのを避ける場合に使う(MS-DOSでは"ra:,rb:"を、Amigaでは"rdf0:,rdf1:,rdf2:"を使
うと良い)。

							*viminfo-file-marks*
大文字のマーク('Aから'Z)はviminfoファイルが書かれるときに、保存される。数字の
マーク('0から'9)はちょっと特別である。viminfoファイルが書き込まれる時(終了時、
もしくは":wviminfo"コマンド実行時)に、'0が現在のファイルの現在のカーソル位置に
設定される。古い'0は'1になり、'1は'2になり、以下同様。"1から"9の削除レジスタに
起こることに似ている。'0に記憶する位置が'1から'9に既出であった時には、同じ位置
が2度記憶されるのではなく、そのレジスタが'0に浮き上がってくる。結果として"'0"
を使用すると、最後にVimを終了した時のファイルとその行に戻ることができる。起動
後直ちにそれを行うには、次のコマンドを試す:

>	vim -c "normal '0"

シェルではエイリアスをこんな風に使用して:

>	alias lvim vim -c '"'normal "'"0'"'

Viminfoファイルの名前:					*viminfo-file-name*
- viminfoファイルの名前を特に指定しない時は、UnixとOS/2では"$HOME/.viminfo"
  に、Amigaでは"s:.viminfo"に、MS-DOSとWin32では"$HOME\_viminfo"になる。MS-DOS
  とWin32で、$HOMEが設定されていない時には、"$VIM\_viminfo"になる。$VIMも設定
  されていない時には"c:\_viminfo"が使われる。OS/2では、$HOMEが設定されず$VIMが
  設定されていれば"$VIM/.viminfo"となる。
- 'viminfo'オプションの'n'フラグは、別の名前のviminfoファイルを使うために、そ
  のファイル名を指定するのに使用される|'viminfo'|。
- Vimの起動引数"-i"も、viminfoとして別のファイルを指定するのに使用できる|-i|。
  ファイル名として"NONE"(全て大文字)が与えられると、viminfoファイルは使用(読み
  込みも書き込みも)されない。
- 起動後に、コマンドで別の名前を与えると、デフォルト名や'viminfo'や"-i"で与え
  た名前を上書きすることができる("-i"はNONEが指定されていない時に限る)。

viminfoファイルを手動で読み書きするのに2つのコマンドが用意されている。これは同
時に起動している複数のVim間で、レジスタの内容を交換するのに利用できる: まず片
方で":wv"してから、もう片方で":rv"する。既にレジスタに何かを記憶している場合に
は、":rv!"する必要があることに注意。またこれを行うとコマンドラインの履歴を含む
全ての情報が、送り側のVimのもので上書きされてしまうことにも注意。

viminfoファイル自信を手で編集することもできるが、Vimによって作られる正しい
フォーマットのviminfoを元にすることを推奨する。一度そこに至ると、それはかなり
自己説明的である(訳注:この一文よくわからん)。これはVimを起動した時に設定されて
いて欲しい内容を含む、"~/.my_viminfo"と言われるファイルを作る目的で使うと重宝
する。例としては、あるデータをレジスタに予め読み込んでおくとか、コマンドライン
履歴に特定のコマンドをいれるとか、そういう使い方がある。.vimrcファイルに次の一
行を入れておけば
>	rviminfo! ~/.my_viminfo
この情報を読み込むのに使うことができる。ファイルの種類によって(Cコードだとか
vimスクリプトだとか)、異なるviminfoを持ち、":autocmd"を組み合わせることでファ
イル名に基づいたりしながら、それらを使用することもできる(|:autocmd|)参照。

							*viminfo-errors*
Vimがviminfoファイルを読み込み中にエラーを検出すると、ファイルの上書きはされな
くなる。もしも10個以上のエラーがある場合には、それ以上viminfoファイルを読み込
むのを止める。こうするのはviminfoファイル内のファイル名が間違っている場合、突
発的にそのファイルを破壊してしまうのを避けるためである。これは"vim -R file"と
したいときに、誤って"vim -i file"とタイプしてしまうと起こり得る(そう、偶然何人
かが実際にそうしてしまったよ!!)。viminfoファイルにエラーがあったけれども
viminfoを上書きしたいのならば、エラーを修正するか、またはファイルを消すかのど
ちらかが必要(Vimの実行中は、殆どの情報が回復してしまう)。

						   *:rv* *:rviminfo*
:rv[iminfo][!] [file]	viminfoファイルを[file](デフォルト:上記参照)から読込
			む。[!]が与えれらた場合、既に設定されている情報(レジス
			タ、マーク、その他)は上書きされる。{Viにはない機能}


						   *:wv* *:wviminfo*
:wv[iminfo][!] [file]	viminfoファイルを[file](デフォルト:上記参照)として保存
			する。ファイルに書き出される情報は、まず古い情報が読込
			まれ、次に新しい情報が読込まれマージ(混合)されたも の
			となる。[!]が使用されると、古い情報は読込まれず、内 部
			の情報だけが出力される。'viminfo'に指定がない場合、100
			個のファイルのマークが書き出される。{Viにはない機能}

 vim:tw=78:ts=8:ft=help:norl:
