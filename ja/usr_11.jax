COMMENT: クラッシュ時の対処方法
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*usr_11.txt*	For Vim version 6.3.  Last change: 2004 Apr 23

		     VIM USER MANUAL - by Bram Moolenaar

			    クラッシュから立ち直る


マシンがクラッシュした？しかも何時間もかけて編集していたところだった？
大丈夫！vimはあなたの作業のほとんどを復元できるだけの情報をハードディスク上
に残しています。この章では復元方法を示し、さらにスワップファイルの使い方につ
いて説明をします。

|11.1|	基本的なリカバリ
|11.2|	スワップファイルはどこにある？
|11.3|	クラッシュかどうか？ 
|11.4|	さらに詳しい情報

     Next chapter: |usr_12.txt|  ちょっとしたテクニック
 Previous chapter: |usr_10.txt|  大規模な変更
Table of contents: |usr_toc.txt|

==============================================================================
*11.1*	基本的なリカバリ

ほとんどの場合、編集中のファイル名さえ覚えていれば(そしてハードディスクが正
しく動いていれば)ファイルのリカバリはとても簡単です。vimを起動する時にその
ファイル名に"-r"オプションを付けるだけです。 >

	vim -r help.txt

vimはスワップファイル(編集中の文書を保持するのに使います)を読み込み、元ファ
イルのかけらを見つけます。全てがうまくいけば、次のようなメッセージが表示され
ます。(当たり前ですがファイル名は違います）

	Using swap file ".help.txt.swp" ~
	Original file "~/vim/runtime/doc/help.txt" ~
	Recovery completed. You should check if everything is OK. ~
	(You might want to write out this file under another name ~
	and run diff with the original file to check for changes) ~
	Delete the .swp file afterwards. ~

念のために、このファイルを別ファイル名で保存します。 >

	:write help.txt.recovered

最終的にあなたが期待していたものになっているかどうかを調べるために元のファイ
ルと比較してください。このような場合はvimdiff(|08.7|)が便利です。オリジナルの
ファイルに新しいバージョン(クラッシュする前に保存してあったファイル)の内容を
含んでいることを確認します。なくなっている行がないかどうかも確認してください。
(時々vimがリカバリできない場合もあります)
リカバリの時に警告メッセージが表示された場合は、気をつけて読んでください。
まあ、こんなことは滅多にありませんが。

さて、うまくいった場合でもクラッシュ直前の変更内容はリカバリできないのが普通
です。vimは４秒間入力をしないか、約200文字の入力があった場合に、ディスクに変
更内容を書き出(フラッシュ)します。これは'updatetime'と'updatecount'オプション
で指定できます。ですから、システムがダウンする時に、それを保存するチャンスが
なければ、最後にフラッシュした以降の変更は失われてしまうのです。

ファイル名なしで編集していた場合は、引数として空文字列を与えます。 >

	vim -r ""

これはクラッシュした時のディレクトリで実行しなくてはなりません。そうでないと
vimはスワップファイルを探し出せません。

==============================================================================
*11.2*	スワップファイルはどこに？

vimがスワップファイルを置く場所はいくつかあります。通常は元のファイルと同じ
ディレクトリにあります。それを探し出すには、そのファイルのあるディレクトリに
移動して、次のコマンドを使います。 >

	vim -r

vimは発見したスワップファイルをリスト表示します。現在のディレクトリにある
ファイル用のスワップファイルが別ディレクトリにあれば、それも表示します。どの
ディレクトリでもスワップファイルが見つけられない場合でも、ディレクトリツリー
の検索は行いません。
結果出力は次のようになります。

	Swap files found: ~
	   In current directory: ~
	1.    .main.c.swp ~
		  owned by: mool   dated: Tue May 29 21:00:25 2001 ~
		 file name: ~mool/vim/vim6/src/main.c ~
		  modified: YES ~
		 user name: mool   host name: masaka.moolenaar.net ~
		process ID: 12525 ~
	   In directory ~/tmp: ~
	      -- none -- ~
	   In directory /var/tmp: ~
	      -- none -- ~
	   In directory /tmp: ~
	      -- none -- ~

リカバリの対象に該当しそうなファイルがいくつもある場合には、スワップファイル
のリストを表示します。その中から使いたいファイルの番号を入力して、決定しま
す。
どれが本当に必要なファイルかは日付を見て注意して決定してください。
どれを指定したらよいかわからない場合には、１つづつ試してみて、期待していた結
果となるファイルを探してください。


スワップファイル名の直接指定
------------------------

リカバリしたいスワップファイルが解っている場合には、そのスワップファイル名を
指定してリカバリさせることができます。vimはスワップファイルから元のファイル
名を復元します。

例えば次のとおりです。 >
	vim -r .help.txt.swo

これはスワップファイルが思っているのとは違うディレクトリにある場合に便利です。
それでもうまく動かない場合、vimがリポートするファイル名が何かを見て、そのファ
イルに従ってください。'directory'オプションの値を見て、vimがスワップファイル
をどこに置くのかを確認してください。

	Note:
	vimは'dir'オプションで定義されたディレクトリを検索して"filename.sw?"
	というパターンにヒットするスワップファイルを見つけます。ワイルドカー
	ド拡張がうまく動かない(例えば'shell'オプションが無効であった)場合で
	もvimはしつこく"filname.swp"というファイルを見つけようとします。
	それも失敗した場合は、ファイルをリカバリできるようなスワップファイル
	名を与えるしかありません。

==============================================================================
*11.3*	クラッシュした？してない？			*ATTENTION* *E325*

vimはおバカをしてしまうことからあなたを守ろうとします。無邪気にファイルの内容
を確認しようとして、ファイル編集を始めようとします。vimはその代わりに次のよう
な長いメッセージを表示します。

	E325:注意 ~
	次の名前でスワップファイルを見つけました。".main.c.swp" ~
		  所有者: mool ~
		    日付: Tue May 29 21:09:28 2001 ~
	      ファイル名: ~mool/vim/vim6/src/main.c ~
		変更状態: あり ~
		ユーザ名: mool   ホスト名: masaka.moolenaar.net ~
	      プロセスID: 12559 (still running) ~
	ファイルを開いている最中 "main.c" ~

	(1) 別のプログラムが同じファイルを編集しているのでしょう. ~
	    そうであるならば, 変更をした際に最終的に, 同じファイルの異なる ~
	    2つのインスタンスができてしまうことに注意してください. ~
	    終了するか, 注意しながら続けます. ~

	(2) このファイルの編集セッションがクラッシュした. ~
	    その場合には ":recover" か "vim -r main.c" ~
	    を使用して変更をリカバーします(":help recover" を参照). ~
	    既にこれを行ったのならば, スワップファイル ".main.c.swp" ~
	    を消せばこのメッセージを回避できます. ~

vimはファイルの編集を開始する時に、そのファイル用のスワップファイルがあるか
どうかをチェックします。既にそれがある場合には、何かがおかしくなっています。
次のいずれかでしょう。

1. このファイルを編集している別のセッションがあります。上記のメッセージ中の
   "プロセスID"の行を見てください。次のような形式になっているはずです。

		process ID: 12559 (still running) ~

   "(still running)" というのは、同じマシン上でこのファイルを編集しているプ
   ロセスがあることを示しています。ただし、非Unixシステムではこれは表示され
   ないでしょう。ネットワーク越しにファイルを編集している場合もこのメッセー
   ジは表示されません。というのはそのプロセスは他のマシン上で動いているため
   です。この２つのケースでは何が起こっているかを、あなたが調べなければなり
   ません。
   同じファイルを編集しているvimプロセスが他にいる場合に、編集を続けると同じ
   ファイルに対して２つのバージョンができてしまいます。両者のうち、最後に書
   き込んだ時に、その前のを上書きしますから、変更内容(の一部)を失なうことに
   なります。この場合は後で起動したvimを終わるのが良いでしょう。

2. スワップファイルはマシンやvimが前回クラッシュした時の結果かもしれません。
   メッセージに表示される日付を確認してください。スワップファイルの日付が
   編集しようとしているファイルよりも新しい場合は次のように表示されます。

		modified: YES ~

   この場合、リカバリすべきクラッシュしたセッションがある可能性が高いです。
   ファイルの日付の方がスワップファイルより新しいという場合もあります。、これ
   はクラッシュした後に何らかの変更を加えたのでしょう(おそらく、以前にリカバリ
   したのに、スワップファイルを消し忘れているのではないですか?)。もしくは、ス
   ワップファイルが更新されてからクラッシュする前にファイルが保存されたのかも
   しれません(そうならラッキーです。ふるいスワップファイルは必要ありません)。
   こういう場合、vimは次のような警告を表示します。

      NEWER than swap file! ~


読めないスワップファイル
------------------------

ときどき次の行が

	[読込めません] ([cannot be read])

スワップファイルの名前の下に表示されます。これは状況により、良い場合と悪い場
合があります。

以前のセッションがファイルに変更を加えることなくクラッシュした場合は良い状態
です。その場合ゼロバイトのファイルがスワップファイル用のディレクトリにあるで
しょう。それを削除して作業を続けてください。

あなたにスワップファイルの読み込み権限がない場合は少し悪い状態です。ファイル
をリードオンリーで開くか、そのまま終了してください。マルチユーザーシステム
で、あなたが最後に変更を加えたときに違う名前でログインしていたら、その名前で
ログインしなおせば"リードエラー"が直るかもしれません。あるいはそのファイルを
最後に変更した(している)人を見つけて話し合ってください。

スワップファイルを保存しているディスクの物理的な故障の場合はとても悪い状態で
す。幸いにもこれはほとんど起こりません。始めに(もしできるなら)どの変更が失わ
れたかを確認するために、リードオンリーでファイルを開いてください。あなたがそ
のファイルの責任者なら、変更をやり直す覚悟をしてください。


どうしようか？
--------------

ダイアログが出た時は、次の５つからどれか１つを選びます。

  Swap file ".main.c.swp" already exists! ~
  [O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort, (D)elete it: ~

"O" ファイルを読み込み専用で開きます。これはリカバリは要らないが、ファイルの
    内容を確認したい場合に使います。これは、誰か他の人が編集しているのは解っ
    ていて、それでも（変更をしないで)内容を確認したい時に使います。

"E" ファイルを普通に編集します。注意してください！ファイルを他のvimで編集し
    ている場合、そのファイルの２つのバージョンを作ってしまう可能性がありま
    す。このような現象が発生した場合vimは警告を発します。後でごめんなさい、
    するより、最初から安全な方法を選ぶのが良いでしょう。

"R" スワップファイルを使ってファイルを復元します。復元したい内容がスワップ
    ファイルにあることがわかっている場合に使います。

"Q" 終わる。ファイル編集を取り止めます。同じファイルを編集しているvimが他に
    ある場合に使います。
    vimを起動した時なら、vimが終了します。既にいくつかのウィンドウを開いてい
    る場合はスワップファイルがあるようなウィンドウだけを終わります。":edit"
    コマンドで開こうとした場合は、このファイルを開かずに直前に編集していた
    ファイルに戻ります。

"A" 停止する。Quitに似ていますが、これはコマンドを即座に停止します。例えば複数
    のウインドウで作業している時に、スクリプトを使っていくつかのファイルを編集
    する時に便利です。
    (訳注)以下のスクリプトで確認するとわかりやすいと思います。
      func Test()
        edit some_file.txt " すでに他のvimウインドウで開いているファイルを開く
        call confirm("Hello") " Quit: 表示される Abort: 表示されない
      endfunc

"D" スワップファイルを削除します。スワップファイルが不要なことがはっきりして
    いる時に使ってください。例えば、何も変更を加えていない場合や、ファイル本
    体の日付がスワップファイルより新しい場合に使います。
    Unixではスワップファイルを生成したプロセスが見当らない場合だけこの選択肢
    を表示します。

サポート外のバージョンのvimを使っていて、このようなダイアログが出ない場合は、
復元を手動で行わなければなりません。ファイル復元には次のコマンドを使います。
>
	:recover


vimはそのファイル用のスワップファイルが存在していることを必ず見つけ出せるわ
けではありません。他のセッションが別のディレクトリにスワップファイルを置いて
いる場合や、別のマシン上で編集している時にそのファイルのパスが違っていたりす
る場合などがそうです。ですからvimが常に警告してくれるとは考えないでください。

もしこのメッセージを全く見たくないのであれば、'shortmess'オプションに"A"フラ
グを追加してください。ただし、これが必要なのは非常に特殊な状況といえます。

==============================================================================
*11.4*	さらなる情報

|swap-file|	いつ、どんな名前のスワップファイルが作成されるかについての説
		明。
|:preserve|	スワップファイルの内容をディスクに手動でフラッシュする。
|:swapname|	現在のファイル用のスワップファイルの名前を見る。
'updatecount'	キーストロークの数。指定数の入力があれば、スワップファイルの
		内容をディスクにフラッシュする。
'updatetime'	タイムアウト値。指定の時間が過ぎたらスワップファイルの内容を
		ディスクにフラッシュする。
'swapsync'	スワップファイルをフラッシュした時にそのディスク内容を同期さ
		せるかどうか
'directory'	スワップファイルを置くディレクトリ名のリスト
'maxmem'	ファイルを書き込むまでにスワップファイルに使えるメモリの上限
'maxmemtot'	同上。ただし、全ファイルの合計値。

==============================================================================

Next chapter: |usr_12.txt|  Clever tricks

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
