COMMENT: コマンドラインの使用法
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>

*usr_20.txt*	For Vim version 6.3.  Last change: 2003 Apr 30
				      日本語訳：2002/07/12 清水 俊彦

		     VIM USER MANUAL - by Bram Moolenaar

		     コマンド行のコマンドを素早く入力する



vimはコマンドの入力を簡便に行うための汎用的な機能を持っています。コロン(:)コ
マンドでは短縮入力、行内編集、再利用ができます。補完機能もほとんど全てのケー
スで使えます。

|20.1|	コマンド行の編集
|20.2|	コマンド行の短縮入力
|20.3|	コマンド行の補完
|20.4|	コマンド行の履歴
|20.5|	コマンド行ウィンドウ

     Next chapter: |usr_21.txt|  行ったり来たり
 Previous chapter: |usr_12.txt|  ちょっとしたテクニック
Table of contents: |usr_toc.txt|

==============================================================================
*20.1*	コマンド行の編集

コロン(:)コマンドや検索(/や?)コマンドを使うときには、カーソルが画面の一番下に
動きます。そこにコマンドや検索パターンを入力するわけです。この行を「コマンド
行」と呼びます。この呼び方は検索コマンドの場合にも使います。

入力したコマンドを編集する一番わかりやすい方法は<BS>キーを使うことです。これ
はカーソル位置の直前の文字を削除できます。それより左側の文字を削除したい場合
は、まず矢印キーでカーソルをその場所まで動かします。
例えば、次のように入力してあるとします。 >

	:s/col/pig/
<
<Enter>キーを押す前になって、"col"が"cow"の入力ミスであることに気付きました。
これを修正するには、左矢印キー(<Left>)を５回押し、"col"の直後にカーソルを動
かします。次に<BS>キーと"w"を押して正しいものにします。 >

	:s/cow/pig/

修正したら、そこで<Enter>キーを押します。コマンドを実行するのに、わざわざ
カーソルを行末まで動かす必要はありません。

コマンド行でカーソルを動かすのに一番使うコマンドを掲げておきます。

	<Left>			１文字左へ
	<Right>			１文字右へ
	<S-Left> or <C-Left>	１単語左へ
	<S-Right> or <C-Right>	１単語右へ
	CTRL-B or <Home>	行頭へ
	CTRL-E or <End>		行末へ

	Note:
	<S-Left> (シフトキーを押したまま左矢印キーを押す)と<C-Left> (コント
	ロールキーを押したまま左矢印キーを押す)は使えないキーボードもありま
	す。他のシフトキー、コントロールキーの組み合せも同様です。

カーソルはマウスを使っても動かせます。


DELETING

上で述べたように<BS>キーはカーソルの直前の文字を削除します。単語を削除するに
は、CTRL-W を使います。

	/the fine pig ~

		     CTRL-W

	/the fine ~

また、行全体を最初から打ち直したい時には CTRL-U で行全体を消去できます。


上書き
------

<Insert>キーは挿入モードと上書きモードを交互に切り換えます。次の例で説明しま
しょう。

	/the fine pig ~

カーソルを<S-Left>を２回使って(<S-Left>が使えない場合は、<Left>を８回使って)
"fine"の最初まで動かします。ここで<Insert>を押すと上書きモードになります。
ここで"great"と入力します。

	/the greatpig ~

あれれ、空白文字がなくなってしまいました。でもここで<BS>を押すと"t"が消えて
しまいますから使えません。(これが上書きモードと挿入モードの違いです)。そこで
<Insert>キーをもう一度押して、上書きモードから挿入モードに戻してから、空白を
入力すればＯＫです。

	/the great pig ~


キャンセル処理
--------------

":"や"/"コマンド実行しようとしたけれど、止めたくなった場合はどうしましょう？
既に入力したコマンドを実行せずに取り止めるにはCTRL-Cか<Esc>を押します。

	Note:
	<Esc>キーはどこでも使える「脱出」キーです。残念なことに、古き良きvi
	ではコマンド行で<Esc>を押すとコマンドを実行してしまいます。これはバ
	グであるように思われますので、vimでは<Esc>でコマンドをキャンセルする
	仕様としています。ただし、'cpoptions'オプションを使えば、vi互換にす
	ることもできます。なお、マップを使う時は(vi用に書かれているかも知れ
	ないので)viと同じように動きます。つまりコマンドを実行します。結局、
	CTRL-Cを使えばどちらでもうまく動くということです。

なお、コマンド行の先頭にカーソルがある時に<BS>キーを押すとコマンドをキャンセ
ルします。これは行頭にある":"や"/"を削除するような動きとなります。

==============================================================================
*20.2*	コマンド行の短縮入力

":"コマンドはものによってとても長いものがあります。既に出てきた":subsititute"
は":s"と短縮して入力できます。全ての":"コマンドでは短縮入力するための一般的
な仕掛けがあります。

コマンドをどれだけ短縮できるか？アルファベットは26文字ですが、コマンドはそれ
よりたくさんあります。例えば、":set"は":s"で始まりますが、":s"は":set"を実行
するわけではありません。その代わり":set"は":se"と短縮入力できます。
このように短縮形に合致するコマンドが２つ以上あっても、使えるのは１つのコマン
ドだけです。その選択基準に明確なルールはありませんので、覚えるいただくしかあ
りません。ヘルプファイルには各コマンドの最短入力方法を説明してあります。例え
ば、 >

	:s[ubstitute]

これは":substitute"の最短入力形式が":s"であることを示しています。それ以降の
文字はオプションです。":su"でも":sub"でも正しく動きます。

ユーザマニュアルではコマンドのフル形式と短縮形式のどちらも使っています。た
だ、短縮形は読み易さを損わない範囲にとどめています。例えば、":function"とい
うコマンドは":fu"と略せますが、これだけだと大半の人が何の略なのか理解できな
いでしょう。ですからこのマニュアルでは":fun"を使っています。(vimには":funny"
コマンドなんてないですから。そうでなければ、":fun"でもやはり混乱を招きますよ
ね）

vimスクリプトでは完全なコマンド名で記述することをお勧めします。そうしておけ
ば、後になって変更したい時に読み直すのが楽ですから。あまりに頻繁に用いるコ
マンド(保存コマンドの":w"とか読み込みコマンドの":r"とか)はその限りではありま
せんが。
特にややこしいのは":end"です。これは":endif"の短縮形ですが、":endwhile"にも
":endfunction"にも見えます。ですから、常にフル形式を使うようにしましょう。


オプション名の短縮形
--------------------

ユーザマニュアルではオプション名はフル形式を使っています。実際には多くのオプ
ションに短縮名があります。":"コマンドと違い、オプションの短縮名はユニークに
なっています。例えば'autoindent'の短縮形は'ai'です。ですからこの２つのコマン
ドは同じ動きとなります。 >

	:set autoindent
	:set ai

オプション名のフル形式と短縮形式の全リストは|option-list|をご覧ください。

==============================================================================
*20.3*	コマンド行の補完

コマンド行の補完機能は、これだけでもviからvimに乗り換えたる理由になる程の機
能です。一度使ってしまえば、もうこれなしでは生きていけなくなります。

次のようなファイルを含むディレクトリがあるとします。

	info.txt
	intro.txt
	bodyofthepaper.txt

最後のbodyofthepaper.txtを編集するには、このコマンドを使います。 >

	:edit bodyofthepaper.txt

でもいかにも打ち間違えそうです。これの方がずっと早くて確実です。 >

	:edit b<Tab>

どちらも結果は同じコマンドになります。どういうことでしょうか？これは<Tab>キー
がカーソル位置にある単語(この場合なら"b")を補ってくれたためです。vimがディレ
クトリを見ると、"b"で始まるファイルは１つしかにことが解ります。これはあなたが
探しているファイルに違いありませんから、そのファイル名をvimが補ってくれたので
す。

さて、次はこのように入力してみます。 >

	:edit i<Tab>

vimは警告音を鳴らし、次のように表示します。 >

	:edit info.txt


この警告音はvimがヒットしたファイルが２つ以上あったことを示します。そこで(ア
ルファベット順で)最初にヒットしたファイルを表示しています。もう一度<Tab>を押
すと、次のようになります。 >

	:edit intro.txt

つまり、最初の<Tab>で探しているファイルが出てこなければ、もう一度<Tab>を押せ
ば良いのです。もっとある場合は順に１つづつ表示してくれます。
ヒットするものを全部表示した後に<Tab>を押すと、最初に<Tab>を押す直前に戻りま
す。 >

	:edit i

次はまた最初から繰り返し、合致するリストをサイクリックに表示します。CTRL-Pを
押すと、逆方向にリストを表示します。

	      <------------------- <Tab> -------------------------+
								  |
		  <Tab> -->		       <Tab> -->
	:edit i		      :edit info.txt		   :edit intro.txt
		  <-- CTRL-P		       <-- CTRL-P
	   |
	   +---------------------- CTRL-P ------------------------>


文脈による違い
--------------

":edit i"ではなく":set i"と入力した時に<Tab>を押すとどうなるでしょう？ >

	:set icon

あれ？どうして":set info.txt"とならないのでしょう？vimは文脈を考慮して補完を
行っているからです。vimが探そうとする単語の種類はその前のコマンドに依るので
す。vimは":set"コマンドの直後にファイル名は使えなくて、オプション名なら使え
ることを解っているのです。
さらに<Tab>の入力を繰り返すと、ヒットするものを順に表示します。ほとんどない
のですが、あらかじめ数文字を入力しておいた方がよいこともあります。 >

	:set isk<Tab>

上の結果は、こうなります。 >

	:set iskeyword

ここで"="を押してから<Tab>を押します。 >

	:set iskeyword=@,48-57,_,192-255

ここではオプションの古い値を挿入しています。この状態から、その値を編集すること
ができます。
<Tab>を押した際に補完される内容は、Vimがその補完場所に期待する内容です。何が補
完されるのかは、実際にやってみるのがわかりやすいでしょう。しかし状況によって
は、望んでいる結果が得られない場合もあります。そうなる原因は、1つはVimがあなた
のやりたいことを理解しているわけではないことであり、また単にその状況における補
完が提供されていないだけなのかもしれません。そのような場合は、<Tab>文字(画面上
では ^I として表示)が挿入されます。


ヒットリスト
------------

ヒットしたものが大量にある場合は、概要を見たいでしょう。これをするにはCTRL-D
を押してください。例えば、次の状態でCTRL-Dを押してみましょう。 >

	:set is

この結果はこのようになります。 >

	:set is
	incsearch  isfname    isident    iskeyword  isprint
	:set is

vimはヒットした項目のリストを入力中のテキストに挿入します。このリストから欲
しい項目をチェックできます。その中にもない場合、<BS>を押してまた別の単語を
探すことができます。ヒット項目が多い場合、残りの補完をするために<Tab>を押す
前にもう少し文字を入力してください。慎重に探せば"incsearch"は"is"で始まらな
いことに気付くでしょう。(多くのオプションには短縮名とフル形式名があります)
vimは,あなたがオプションの短縮名をフル形式に拡張して欲しいだろうと知っている
程度に賢明です。


さらに他にも
------------

CTRL-Lコマンドを使うと、最長一致した単語まで補完してくれます。例えば":edit i"
と入力したところ、"info.txt"と"info_backup.txt"というファイルがあったとする
と、":edit info"という文字列が得られます。

'wildmode'オプションは補完の動作を変更します。
'wildmenu'オプションはヒットしたリストをメニューのように表示させる時に使い
ます。
'suffixes'オプションにはあまり大切でないファイルを指定しておいて、ファイル
リストの末尾に表示するようにします。
'wildignore'オプションはファイルをリスト表示しない時に指定します。

この全部については|cmdline-completion|をご覧ください。

==============================================================================
*20.4*	コマンド行の履歴

３章でも履歴について少しだけお話しました。基本的には以前に使ったコマンドを
<Up>キーで呼び出す時に使うものです。<Down>キーを押すとより最近のコマンドに
戻ります。

実際には履歴には４種類があります。ここで述べるのは":"コマンドと"/","?"検索コ
マンド用のものです。"/"と"?"はどちらも検索コマンドですので、同じ履歴を共有し
ます。これ以外の２つの履歴は式と、input()関数で使う入力行です。
詳しくは|cmdline-history|をご覧ください。

":set"コマンドを実行してから、10個のコマンド行のコマンドを実行した後で、もう
一度":set"コマンドを実行したいとします。これは":"を押してから<Up>を10回押せ
ばできます。ですが、もっと素早い方法があります。 >

	:se<Up>

Vimは "se" で始まった最近のコマンドにまで戻ります。その上で、それが求めていた
":set" コマンドであるか、確かめることができます。普通は何度も<Up>を押すような
ことはありません(入力したのが全部":set"コマンドででもない限り)。

<Up>キーを押すと、その行に入力されているパターン(ここでは"se")と履歴の各行を
較べて、一致する行だけを表示します。
探している行に一致するものがなければ、<Down>キーで戻って入力した内容を変更し
ます。もちろんCTRL-Uで最初からやり直すこともできます。

履歴の全行を見るにはこのようにします。 >

	:history

これはコロン(:)コマンドのヒストリを表示します。検索コマンドの履歴を表示する
には次のようにします。 >

	:history /

矢印キーを使いたくない方は、<Up>の代わりにCTRL-Pを、また<Down>の代わりに
CTRL-Nが使えます。CTRL-Pは前(Previous)の意味で、CTRL-Nは次(Next)の意味です。

==============================================================================
*20.5*	コマンド行のウィンドウ

コマンド行での文字入力は通常の挿入モードでの入力とは違いがあります。コマンド
行では文字編集の多くのコマンドが使えません。たいていはあまり問題になりません
が、時に複雑なコマンドを入力したいこともあります。このような場合にはコマンド
行のウィンドウが便利です。

コマンド行のウィンドウを開くにはこのようにします。 >

	q:

すると画面の下の方に(小さな)ウィンドウが開きます。ここにはコマンド行の履歴が
表示され、一番下には空行が表示されます。

	+-------------------------------------+
	|other window			      |
	|~				      |
	|file.txt=============================|
	|:e c				      |
	|:e config.h.in			      |
	|:set path=.,/usr/include,,	      |
	|:set iskeyword=@,48-57,_,192-255     |
	|:set is			      |
	|:q				      |
	|:				      |
	|command-line=========================|
	|				      |
	+-------------------------------------+

ここでは通常モードのコマンドが使えます。"hjkl"でカーソルが動かせます。上の例
を使いましょう。まず"5k"を入力して":e config.h.in"の行まで動きます、次に"$h"
で行末の"in"の"i"にカーソルを置いてから、"cwout"と入力します。そうするとこの
ように行が変更されます。

	:e config.h.out ~

ここで<Enter>を押すとコマンドを実行して、コマンド行のウィンドウは閉じられます。
<Enter>キーを押した時に実行するのはカーソルのある行の内容です。その時にvimが
通常モードだったか、挿入モードだったかは関係ありません。
コマンド行のウィンドウで変更した内容は保存されません。ですから履歴の内容も変
化しません。ただ、実際に実行したコマンドは他の場合と同じく履歴に追加されます
から、その点は違うといえば違います。

コマンド行のウィンドウは履歴を一覧で見て、似たようなコマンドを探して、それを
ちょっと変更して再実行するような場合に便利です。コマンド行のウィンドウで検索
コマンドを使って何かを探すのもできます。 
上の例の場合なら、"?config"という検索コマンドを実行すれば、以前に実行したコ
マンドの中から"config"という文字列を含むものを探します。これはちょっと妙な感
じかも知れません。だってコマンド行ウィンドウの中を探すコマンド行を実行するわ
けですから。ただ、検索コマンドを入力している時は新たなコマンド行のウィンドウ
を開くことはできません。コマンド行ウィンドウは常に１つだけなのです。

==============================================================================

Next chapter: |usr_21.txt|  行ったり来たり

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
