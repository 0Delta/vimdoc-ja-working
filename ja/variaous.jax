COMMENT: 様々なコマンド(コマンド、ヘルプ、印刷)
STATUS: finished 5.7
TRANSLATOR: 村岡太郎 <koron@tka.att.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*various.txt*   For Vim version 5.7.  Last change: 2000 Apr 22


		VIMリファレンスマニュアル    by Bram Moolenaar


様々なコマンド						*various*

1. 様々なコマンド	|various-cmds|
2. オンラインヘルプ	|online-help|

==============================================================================
1. 様々なコマンド					*various-cmds*

							*CTRL-L*
CTRL-L			画面を消去して再描画する。

							*N<Del>*
<Del>			数値を入力している時: 最後の数字を削除する。
			Note: これを行なうために<BS>を使用したい場合、次のマッ
			ピングを自分の.vimrcに追加する:
				:map CTRL-V <BS>   CTRL-V <Del>
			<Del>が望みどおりに働かない場合には|:fixdel|を参照。

:as[cii]	または					*ga* *:as* *:ascii*
ga			カーソルの下の文字の文字コードを、10/16/8進数で表示す
			る。例えばカーソルが'R'の上にあるときは:
				<R>  82,  Hex 52,  Octal 122
			文字が非ASCIIではあるが'isprint'オプションで指定され表
			示可能である時には、表示不可能な形も同時に表示される。
			文字コードが127よりも大きい時には<M-x>という形式も同時
			に表示される。例:
				<~A>  <M-^A>  129,  Hex 81,  Octal 201
				<p>  <|~>  <M-~>  254,  Hex fe,  Octal 376
			(<p>は特別な文字とみなす)
			ファイルの中の<Nul>文字は内部的に<NL>として保存される
			が、次のように表示される:
				<^@>  0,  Hex 00,  Octal 000
			覚え方: Get Ascii value(アスキーコードを取得)
			{not in Vi}

							*:p* *:pr* *:print*
:[range]p[rint]		[range]の範囲の行を表示する(省略時は現在行)。
			Note: テキストファイルを表示する方法を探しているなら
			ば、外部プログラムが必要になる。GUIを使用しているなら
			ばFile.Printメニュー項目を使うことができる。

:[range]p[rint] {count}
			[range]から(省略時は現在行 |cmdline-ranges|)始まる
			{count}行を表示する

							*:P* *:Print*
:[range]P[rint] [count]
			":print"と同様。シフトキーを長く押し続けてしまう人のた
			めに追加された。

							*:l* *:list*
:[range]l[ist] [count]
			:printと同じだが、表示不可文字を'^'と一緒に表示する。

							*:nu* *:number*
:[range]nu[mber] [count]
			:printと同じだが、各行の先頭にその行番号を付加する。
			('highlight'オプションも参照)

							*:#*
:[range]# [count]	:numberと同じ。

							*:z*
:{range}z[+-^.=]{count}	{range}で指定される行、されなかった場合は現在行の周辺
			数行を表示する。何行表示したいかを指定する場合{count}
			を使用する; 指定しない場合には現在のウィンドウの大きさ
			が使用される。

			:zは単独で使うことも、修飾マークを付加して使うこともで
			きる。それらには次のような効果がある。

			記号   開始行        終了行         新しい位置     ~
			----   ------        ------         ----------  
			+      現在行        1画面先        1画面先
			-      1画面前       現在行         現在行
			^      2画面前       1画面前        1画面前
			.      半画面前      半画面先       半画面先
			=      半画面前      半画面先       現在行

			どのマークも指定しなかった場合、"+"を指定したことにな
			る。マークが"="ならば、現在行の周りにマイナス記号で
			作った線が表示される。

							*:=*
:=			カーソルのある行番号を表示する。

:norm[al][!] {commands}					*:norm* *:normal*
			{commands}をノーマルモードコマンドとして実行する。これ
			によりコマンドラインでタイプされたノーマルモードのコマ
			ンドを実行することができる。{commands}はタイプされたよ
			うに実行される。アンドゥ時には全てのコマンドが一度に取
			消される。[!]が与えられた場合、マッピングは行なわれな
			い。{commands}はコマンドとして完結するべきである。
			{commands}が完結していない場合には、更に文字がタイプさ
			れる必要があるが、この間ディプレイは更新されない。これ
			は挿入コマンドが完了されなければならないことを意味して
			いる(インサートモードを始めるには|:startinsert|を参
			照)。
			'|'はコマンドの一部として考えられてしまうので、続けて
			他のコマンドを書くことはできない。このコマンドは
			'maxmapdepth'で制限されるだけ再帰的に呼び出すことがで
			きる。
			このコマンドが再マップ不可能マッピング|:noremap|から呼
			ばれたときには、引数は全くマッピングされない。
			|:execute|を使用して副次的に使用するときには、引数とし
			て1つの式が使われる。これにより印刷可能文字を扱うこと
			ができる。例:
>				:exe "normal \<c-w>\<c-w>"
			ヒント: {commands}が<Esc>で終わっている時、Vimはそれを
			ファンクションキーの開始だと考え、'ttimeout'が適用され
			るので、非常に遅くなるか、何か定義されないタイプがされ
			るまで待機することになる。[！]を含む場合もこのケースに
			なる。
			{Vi には、もちろんない}
			コンパイル時に|+ex_extra|機能が無効化されていると使
			用できない。

:{range}norm[al][!] {commands}				*:normal-range*
			{range}の各行に{commands}のノーマルモードコマンドを実
			行する。{commands}を実行する前に、領域各行の最初のカラ
			ムにカーソルが置かれる。その他の点については領域指定の
			無い":normal"コマンドと同じ意味である。
			{Vi にはない}
			{not in Vi}
			コンパイル時に|+ex_extra|機能が無効化されていると使
			用できない。

							*:sh* *:shell*
:sh[ell]		このコマンドはシェルを起動する。シェルを終了した時に
			("exit"コマンドの後)Vimに戻ってくる。シェルコマンドの
			名前はオプション'shell'から与えられる。Note: これは
			AmigaのVimにおいてコンパイラからQuickFixモードで起動さ
			れた時には、コンパイラが標準出力を非インタラクティブ
			モードにしてしまうので使用できない。

							*:!cmd* *:!*
:!{cmd}			シェルで{cmd}を実行する。'shell'と'shelltype'オプショ
			ンも参照。
			{cmd}の中のあらゆる'!'は前の外部コマンドに置き換えられ
			る('cpoptions'も参照)。しかし'!'の前にバックスラッシュ
			がある時にはそれが削除され'!'は置き換えらない。
			例: ":!ls"の後の":!echo !\! \\!"は"echo ls ! \!"と解釈
			、実行される。
			コマンドが実行された後で、現在のファイルのタイムスタ
			ンプがチェックされる|timestamp|。
			{cmd}の中に'|'を含めることはできない(|:bar|参照)。
			Unixでは通常コマンドは非インタラクティブモードで動作す
			る。もしもインタラクティブに使いたい場合(aliasを使うな
			ど))には、'shellcmdflag'に"-ic"を設定する。
			|shell-window|も参照。

							*:!!*
:!!			最後の":!{cmd}"を繰り返す。

							*:ve* *:version*
:ve[rsion]		エディタのバージョン番号を表示する。コンパイラが
			"__DATE__"を解釈できるならば、コンパイルされた日時が記
			述される。できなければ最終修正日時が表示される。
			続く行にはVimがコンパイルされた時にどの機能が有効にさ
			れているかの情報を含む。機能名の前に'+'があればその機
			能は有効であり、'-'があるときには無効になっている。こ
			れを変えるにはfeature.hを編集してVimをコンパイルし直す
			必要がある。これを評価式の中でチェックするには、
			|has()|を参照。以下に機能の概要を示す:

							*+feature-list*
*+ARP*			Amiga のみ: ARP サポートを含む
*+autocmd*		|:autocmd|, 自動コマンド実行
*+browse*		|:browse| コマンド
*+builtin_terms*	幾つかの組み込み端末 |builtin-terms|
*++builtin_terms*	全部の組み込み端末 |builtin-terms|
*+byte_offset*		'statusline'オプション、"go"そして":goto"コマンドで'o'
			フラグをサポート
*+cindent*		|'cindent'|, C言語インデント
*+cmdline_compl*	コマンドライン補完 |cmdline-completion|
*+cmdline_info*		|'showcmd'| と |'ruler'|
*+comments*		|'comments'| サポート
*+cryptv*		暗号化サポート |encryption|
*+cscope*		|cscope| サポート
*+dialog_gui*		|:confirm| のGUIダイアログをサポート
*+dialog_con*		|:confirm| のコンソールダイアログをサポート
*+dialog_con_gui*	|:confirm| GUIとコンソールダイアログをサポート
*+digraphs*		|digraphs|
*+emacs_tags*		|emacs-tags| ファイル
*+eval*			式評価(訳注:Vimスクリプト) |eval.txt|
*+ex_extra*		Vimの拡張Exコマンド: |:center|, |:left|、
			|:normal|、|:retab| 及び |:right|
*+extra_search*		|'hlsearch'| と |'incsearch'| オプション
*+farsi*		|farsi| 言語
*+file_in_path*		|gf|, |CTRL-W_f| と |<cfile>|
*+find_in_path*		include ファイル検索: |[I|, |:isearch|、
			|CTRL-W_CTRL-I|、|:checkpath|、その他
*+fork*			Unix のみ: |fork| シェルコマンド
*+GUI_Athena*		Unix のみ: Athena |GUI|
*+GUI_BeOS*		BeOS のみ: BeOS |GUI|
*+GUI_GTK*		Unix のみ: GTK+ |GUI|
*+GUI_Motif*		Unix のみ: Motif |GUI|
*+hangul_input*		ハングル入力サポート |hangul|
*+insert_expand*	|insert_expand| 挿入モード補完
*+langmap*		|'langmap'|
*+linebreak*		|'linebreak'|、|'breakat'| と |'showbreak'|
*+lispindent*		|'lisp'|
*+menu*			|:menu|
*+mksession*		|:mksession|
*+modify_fname*		|filename-modifiers|
*+mouse*		マウス操作 |mouse-using|
*+mouse_dec*		Unix のみ: Dec端末マウス操作 |dec-mouse|
*+mouse_gpm*		Unix のみ: Linuxコンソールマウス操作 |gpm-mouse|
*+mouse_netterm*	Unix のみ: nettermマウス操作 |netterm-mouse|
*+mouse_xterm*		Unix のみ: xtermマウス操作 |xterm-mouse|
*+multi_byte*		マルチバイト文字(日韓中) |multibyte|
*+multi_byte_ime*	Win32 IMEサポート
*+ole*			Win32 GUI のみ: |ole-interface|
*+osfiletype*		自動コマンドでの'osfiletype'オプションとファイルタイプ
			チェックのサポート |autocmd-osfiletypes|
*+perl*			Perlインタフェース |perl|
*+python*		Pythonインタフェース |python|
*+quickfix*		|:make| と |quickfix| コマンド
*+rightleft*		右から左へタイプ |'rightleft'|
*+scrollbind*		|'scrollbind'|
*+smartindent*		|'smartindent'|
*+sniff*		SniFFインターフェース (解説文章無し)
*+statusline*		オプション'statusline'、'ruleformat'そして
			'titlestring'と'iconstring'の特殊フォーマット
*+syntax*		構文協調 |syntax|
*+system()*		Unix のみ: |+fork|の反対
*+tag_binary*		タグファイル内の高速(二分探査)検索 |tag-binary-search|
*+tag_old_static*	静的タグの古い方法 |tag-old-static|
*+tag_any_white*	tagsファイル内で空白文字を許す |tag-any-white|
*+tcl*			Tclインターフェース |tcl|
*+terminfo*		|terminfo|でtermcapを代替
*+textobjects*		|text-objects| 選択
*+tgetent*		非Unix のみ: 外部termcapを使用可能
*+title*		ウィンドウタイトル設定 |'title'|
*+user_commands*	ユーザ定義コマンド |user-commands|
*+viminfo*		|'viminfo'|
*+visualextra*		拡張ビジュアルモードコマンド |blockwise-operators|
*+wildignore*		|'wildignore'|
*+wildmenu*		|'wildmenu'|
*+writebackup*		|'writebackup'|がデフォルトで有効
*+xim*			Xインプットメソッド |xim|
*+xfontset*		Xフォントセットサポート |xfontset|
*+xterm_clipboard*	Unix のみ: xtermクリップボード操作
*+xterm_save*		xtermのスクリーンを保存と復帰 |xterm-screens|
*+X11*			Unix のみ: ウィンドウタイトルを復帰可能 |X11|

:ve[rsion] {nr}		現在は無視される。これはかつて.vimrcの中でバージョン番
			号をチェックするために使われた。現在は":if"コマンドを
			使ってバージョン依存の振る舞いを記述できるので、削除さ
			れている。 {Vi にはない}

							*:redi* *:redir*
:redi[r][!] > {file}	メッセージをファイル{file}にリダイレクトする。リダイレ
			クトを終了するまで、コマンド出力であるメッセージがファ
			イルに書き出される。メッセージは画面にも表示される。
			[!]が含まれた時には、現在のファイルが上書きされる。[!]
			が省略された時、既にファイル{file}が存在すると、コマン
			ドは失敗する。 {Vi にはない}

:redi[r] >> {file}	メッセージをファイル{file}にリダイレクトする。{file}
			が既に存在する時には追記する。 {Vi にはない}

:redi[r] @{a-zA-Z}	メッセージをレジスタ{a-z}にリダイレクトする。レジスタ
			名が大文字{A-Z}で与えられた時には、現在ある内容に追加
			する。

:redi[r] END		メッセージのリダイレクトを終了する。 {Vi にはない}

							*K*
K			カーソルの下の単語を参照するのにプログラムを実行する。
			プログラムの名前は'keywordprg' (kp) オプションで与えら
			れる(省略地は"man")。キーワードはアルファベットと数字
			と'iskeyword'で示される文字から構成される。キーワード
			はカーソルの直下、もしくは右が使用される。同じことは次
			のように行なえる
>				:!{program} {keyword}
			Vimのtoolsディレクトリにサンプルプログラムがある。それ
			は簡易スペルチェックを行なう'ref'と呼ばれるものであ
			る。
			特別なケース:
			- 'keywordprg'が空の時、":help"コマンドが使われる。よ
			  り効率的にヘルプを検索するために、'iskeyword'に文字
			  を追加すると良い。
			- 'keywordprg'が"man"のとき、"K"の前に入力された数字
			  が、"man"コマンドとキーワードの間に挿入される。例え
			  ば"mkdir"にカーソルがある時に"2K"を使うと、結果はこ
			  のようになる:
>				!man 2 mkdir
			- 'keywordprg'が"man -s"の時には、"K"の前に入力された
			  数字は"-s"の後に挿入される。数字が与えられなかった場
			  合、"-s"は取り除かれる。
			{Vi には無い}

							*v_K*
{Visual}K		"K"同様、しかしキーワードにはビジュアル選択されたテキ
			ストが使用される。選択されたテキストが1行に収まる時に
			しか機能しない。 {Vi にはない}

[N]gs							*gs* *:sl* *:sleep*
:[N]sl[eep] [N]	[m]	[N]秒間なにもしない。[m]が含まれていた時には、[N]ミリ
			セカンドスリープする。
>  :sleep	  "sleep for one second
>  :5sleep	  "sleep for five seconds
>  :sleep 100m    "sleep for hunderd millisonds
			CTRL-Cで割込むことができる(MS-DOSではCTRL-Break)。"gs"
			は"goto sleep"を意味する。スリープしている間カーソルは
			(可視ならば)テキストの中に置かれる。 {Vi にはない}

							*g_CTRL-A*
g CTRL-A		MEM_PROFILINGをdefine(非常に稀)してVimをコンパイルした
			時のみ: メモリ使用量の統計を表示する。Vimのデバッグ時
			に便利なくらい。

==============================================================================
2. オンラインヘルプ					*online-help*

			*help* *<Help>* *:h* *:help* *<F1>* *i_<F1>* *i_<Help>*
<Help>		or
:h[elp]			ウィンドウを分割してヘルプファイルを読込専用モードで開
			く。ヘルプウィンドウが既に開かれている場合にはそれを使
			用する。 {Vi にはない}

								*{subject}*
:h[elp] {subject}	":help"同様、加えて{subject}へタブジャンプする。
			{subject}には"*", "?" や "[a-z]"といったワイルドカード
			を含むことができる。
			   :help z?	あらゆる"z"コマンドのヘルプへ
			   :help z.	"z."のヘルプを開く
			パターンに完全に一致する項目が無かった場合、及び複数の
			項目が一致した場合には、"最善"の一致が選ばれる。洗練さ
			れたアルゴリズムでどの項目が一番最善かを決定する。これ
			らの事項が計算において考慮される:
			- 大小文字が一致したほうが、しない時よりも良い
			- 始まりがアルファベットではない一致項目のほうが、部分
			  一致よりも優先される。
			- タグの開始位置かそれに近いほうが、そうでないものより
			  もより良い。
			- 多くのアルファベットが一致するほうが良い。
			- マッチしたもののうち短いほうが良い。
			長い{subject}を与えても、より短いものにマッチしてしま
			うことに注意。これがどのように働くかはコマンドラインの
			補完を考えるとわかりやすいだろう(":help subject"の後で
			CTRL-Dをタイプしてみよう)。
			複数のマッチがある場合には、CTRL-Dを押すことでそれらの
			一覧を見ることができる。例:
>				:help cont<Ctrl-D>
			正規表現の|pattern|を使うには、まず":help"を行なってか
			ら、ヘルプウィンドウで":tag {pattern}"を使う。":tnext"
			コマンドでその他の項目へ移動することができ、":tselect"
			で一致項目の一覧から選択をすることができる。
>				:help index| :tse z.
			このコマンドは'|'で他のコマンドに繋ぐことができる。し
			かしヘルプコマンド内では'|'をエスケープする必要はな
			い。だからこれはどちらも正しく働く:
>				:help |
>				:help k| only
			'|'の直前の空白は":help"の引数の一部に見えることに注
			意。
			ヘルプコマンドと続くコマンドのセパレータには<LF>と<CR>
			も使うことができる。<LF>や<CR>を入力するにはまずCTRL-V
			をタイプする必要がある。例:
>				:help so<C-V><CR>only
			{Vi にはない}

ヘルプファイルの名前はオプション'helpfile'に設定することができる。初期のヘルプ
ウィンドウの高さはオプション'helpheight'で設定することができる(初期値:20)。あ
る項目へ移動するにはタグを使う。これには2つの方法がある:
- オプションやコマンド名にカーソルをあわせて"CTRL-]"コマンド使う。これはタグが
  キーワードの時にだけ使用できる。"<C-Leftmouse>"と"g<LeftMouse>"は"CTRL-]"と
  同じように働く。
- ":ta {subject}"コマンドを使う。これはどのようなキャラクタにも使用できる。

戻るには"CTRL-T"を使う。
ヘルプウィンドウを閉じるには":q"を使う。

							*help-xterm-window*
他のxtermのウィンドウでヘルプを表示したいならば、このコマンドが使えるだろう:
	:!xterm -e vim +help &


			*:helpfind* *:helpf*
:helpf[ind]		|:help|と同じだが、引数を入力するダイアログが表示され
			る。{|+GUI_GTK|でコンパイルされた時のみ}

 vim:tw=78:ts=8:ft=help:norl:
