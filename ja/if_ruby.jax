COMMENT: Rubyインターフェイス(外部スクリプト)
STATUS: finished 6.3.054
TRANSLATOR: 村岡太郎 <koron@tka.att.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*if_ruby.txt*   For Vim version 6.3.  Last change: 2004 Mar 14


		 VIM リファレンスマニュアル    by Shugo Maeda

Rubyインターフェイス					*ruby* *Ruby*


1. コマンド			|ruby-commands|
2. VIMモジュール		|ruby-vim|
3. VIM::Buffer オブジェクト	|ruby-buffer|
4. VIM::Window オブジェクト	|ruby-window|
5. グローバル変数		|ruby-globals|

{Viにはこれらのコマンドは無い}
			*E266* *E267* *E268* *E269* *E270* *E271* *E272* *E273*

Rubyインターフェイスは|+ruby|機能を有効化してVimをコンパイルした時にのみ動作す
る。

Rubyのホームページは http://www.ruby-lang.org/ です。ここでRubyをダウンロード
できます。

MS-Windows用のRubyライブラリは以下のところで入手できる(訳補):

	http://www.dm4lab.to/~usa/ruby_en.html

==============================================================================
1. コマンド						*ruby-commands*

							*:ruby* *:rub*
:rub[y] {cmd}		Rubyのコマンド{cmd}を実行する。

:rub[y] << {endpattern}
{script}
{endpattern}
			Rubyスクリプト{script}を実行する。
			{endpattern}の行では直前に空白文字を先行させてはいけな
			い。{endpattern}が省略された場合、|:append|や|:insert|
			コマンド同様に'.'(ドット)がデフォルトである。この形式
			の|:ruby|コマンドは主にVimスクリプトにRubyコードを埋め
			込むのに便利。
			Note: このコマンドはRuby機能をコンパイル時に指定しな
			かった時には動作しない。エラーを避けるには
			|script-here|を参照。

Vimスクリプトの例: >

	function! RedGem()
	ruby << EOF
	class Garnet
		def initialize(s)
			@buffer = VIM::Buffer.current
			vimputs(s)
		end
		def vimputs(s)
			@buffer.append(@buffer.count,s)
		end
	end
	gem = Garnet.new("pretty")
	EOF
	endfunction
<

						*:rubydo* *:rubyd* *E265*
:[range]rubyd[o] {cmd}	Evaluate Ruby command {cmd} for each line in the
			[range], with $_ being set to the text of each line in
			turn, without a trailing <EOL>. Setting $_ will change
			the text, but note that it is not possible to add or
			delete lines using this command.
			[range]の範囲の各行を1行ずつ$_へ、行末の<EOL>を削除し
			て設定し、Rubyコマンド{cmd}を実行評価する。$_を変更す
			るとバッファのテキストが変更をできるが、このコマンドを
			使って行を追加したり削除したりはできないことに注意。
			[range]を省略した場合ファイル全体が対象: "1,$"

							*:rubyfile* *:rubyf*
:rubyf[ile] {file}	ファイル{file}のRubyスクリプトを実行する。ファイル名の
			補完が利用できる以外は、":ruby load 'file'"と同じ。

|sandbox|環境内ではRubyコマンドを実行できない。

==============================================================================
2. VIMモジュール					*ruby-vim*

Rubyのコードは全てのVimへのアクセスをVIMモジュール経由で行なう。

概要 >
	print "Hello"			# メッセージを表示する
	VIM.command(cmd)		# Exコマンドを実行する
	num = VIM::Window.count		# ウィンドウ数を取得する
	w = VIM::Window[n]		# ウィンドウ n を取得する
	cw = VIM::Window.current	# 現在のウィンドウを取得する
	num = VIM::Buffer.count		# バッファ数を取得する
	b = VIM::Buffer[n]		# バッファ n を取得する
	cb = VIM::Buffer.current	# 現在のバッファを取得する
	w.height = lines		# ウィンドウの高さ(行数)を設定する
	w.cursor = [row, col]		# ウィンドウのカーソル位置を設定する
	pos = w.cursor			# カーソルの位置を配列で受け取る
	name = b.name			# バッファのファイル名を取得する
	line = b[n]			# バッファから行の内容を取得する
	num = b.count			# バッファの行数を取得する
	b[n] = str			# バッファの行の内容を変更する
	b.delete(n)			# 行を削除する
	b.append(n, str)		# n行目の直後に行を追加する
<

モジュール関数:

							*ruby-message*
VIM::message({msg})
	メッセージ{msg}を表示する。

							*ruby-set_option*
VIM::set_option({arg})
	Sets a vim option.  {arg} can be any argument that the ":set" command
	accepts.  Note that this means that no spaces are allowed in the
	argument!  See |:set|.
	Vimのオプションを設定する。{arg}は":set"コマンドで使えるもののならば何
	でも良い。これが引数の中では空白文字が許されないと意味していることに注
	意。|:set|を参照。

							*ruby-command*
VIM::command({cmd})
	Exコマンド{cmd}を実行する。

							*ruby-evaluate*
VIM::evaluate({expr})
	Vim内部の実行エンジンを使ってスクリプト{expr}を実行評価する
	(|expression|参照)。実行結果は文字列で返される。

==============================================================================
3. VIM::Buffer オブジェクト				*ruby-buffer*

VIM::Buffer objects represent vim buffers.

Class Methods:

current		Returns the current buffer object.
count		Returns the number of buffers.
self[{n}]	Returns the buffer object for the number {n}. The first number
		is 0.

Methods:

name		Returns the name of the buffer.
number		Returns the number of the buffer.
count		Returns the number of lines.
length		Returns the number of lines.
self[{n}]	Returns a line from the buffer. {n} is the line number.
self[{n}] = {str}
		Sets a line in the buffer. {n} is the line number.
delete({n})	Deletes a line from the buffer. {n} is the line number.
append({n}, {str})
		Appends a line after the line {n}.

==============================================================================
4. VIM::Window オブジェクト				*ruby-window*

VIM::Window オブジェクトはVimのウィンドウを表現している。

クラスメソッド:

current		現在のウィンドウオブジェクトを返す。
count		ウィンドウの数を返す。
self[{n}]	番号{n}のウィンドウオブジェクトを返す。番号は0から数え始める。

メソッド:

buffer		ウィンドウに表示されているバッファを返す。
height		ウィンドウの高さを返す。
height = {n}	ウィンドウの高さを{n}に設定する。
cursor		カーソルの位置を[行数, カラム]の形で配列にして返す。
cursor = [{row}, {col}]
		カーソルの位置を{row} 行の {col}カラムに設定する。

==============================================================================
4. グローバル変数					*ruby-globals*

2つのグローバル変数がある。

$curwin		現在のウィンドウオブジェクト
$curbuf		現在のバッファオブジェクト

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
