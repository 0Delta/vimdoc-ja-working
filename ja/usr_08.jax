COMMENT: ウィンドウ分割(複数のファイルを表示する)
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>

*usr_08.txt*	For Vim version 6.3.  Last change: 2004 Jun 04

		     VIM USER MANUAL - by Bram Moolenaar

			       ウィンドウの分割


関係のない２つの違ったファイルを表示したい。１つのファイルの２個所を同時に
見たい。２つのファイルを横に並べて差分を見てみたい。
ウィンドウ分割を使えばどれもできてしまいます。

|08.1|	ウィンドウの分割
|08.2|	他のファイルでウィンドウを分割
|08.3|	ウィンドウのサイズ
|08.4|	縦分割
|08.5|	ウィンドウの移動
|08.6|	全ウィンドウに対するコマンド
|08.7|	vimdiffで差分を見る
|08.8|	その他

     Next chapter: |usr_09.txt|  ＧＵＩを使う
 Previous chapter: |usr_07.txt|  ２つ以上のファイルを扱う
Table of contents: |usr_toc.txt|

==============================================================================
*08.1*	ウィンドウの分割

新しいウィンドウを開く一番簡単なコマンドはこれです。 >

	:split

このコマンドは画面を２つのウィンドウに割って、カーソルを上側のウィンドウに
置きます。

	+----------------------------------+
	|/* file one.c */		   |
	|~				   |
	|~				   |
	|one.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

画面には同じファイルが両方のウィンドウに表示されます。 "===="のラインは
ステータス行で、各ウィンドウの一番下にあってそのウィンドウの情報を表示しま
す。(実際にはステータス行は反転表示になります)
各ウィンドウには同じファイルの違う場所を表示できます。例えば、上側のウィンド
ウにはプログラムの変数宣言部を表示し、下の方にはその変数を使っている箇所を
表示させる、といったことができます。

CTRL-W w コマンドでウィンドウ間をジャンプできます。上側のウィンドウにカーソ
ルがある時にCTRL-W w を押すとその下のウィンドウにジャンプします。一番下の
ウィンドウにカーソルがある時は一番上のウィンドウに戻ります。(CTRL-W CTRL-Wも
同じですから、ちょっとだけCTRLキーを離すのが遅くても大丈夫です)


ウィンドウを閉じる
------------------

ウィンドウを閉じるのは次のコマンドです。 >

	:close

":quit"とか"ZZ"のようなファイル編集の終了コマンドはどんな場合でも使えます。
が、":close"では最後のウィンドウを閉じることができません。これは間違ってvim
を終了しないための防止策です。


他ウィンドウを全部閉じる
------------------------

いくつものウィンドウを開いていて、今だけは１つに集中したいと思った場合は、
次のコマンドが便利です。 >

	:only

これはカーソルのあるウィンドウ以外を全部閉じます。他のウィンドウで変更がある
場合には、エラーメッセージが表示され、ウィンドウも閉じません。

==============================================================================
*08.2*	他のファイルでウィンドウを分割

下のコマンドは２つ目のウィンドウを開き、指定のファイルの編集を始めます。
>
	:split two.c

one.cを編集している場合だと、結果は次のようになります。

	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

新規の空ファイルのウィンドウを開くのは次のコマンドです。

	:new

":split"や":new"コマンドは作りたいウィンドウの数だけ繰り返し実行できます。

==============================================================================
*08.3*	ウィンドウのサイズ

":split"コマンドは数値を引数として取れます。その値は新しいウィンドウの高さと
なります。例えば、次のコマンドは３行分の高さのウィンドウを開き、そこでalpha.c
の編集を始めます。 >

	:3split alpha.c

既存のウィンドウでもいくつかの方法でサイズを変更できます。マウスがあれば話
は簡単です。ウィンドウを分割しているステータス行にマウスを動かし、上下にド
ラッグしてください。

ウィンドウサイズを増やすには、 >

	CTRL-W +

逆に減らすには、 >

	CTRL-W -

です。どちらのコマンドも数値を引数として取り、その行数分、ウィンドウサイズを
増減します。ですから、"4CTRL-W+"はウィンドウを４行分大きくします。

ウィンドウの高さを指定の行数とするのは次のコマンドです。 >

	{height}CTRL-W _

これは{height}、CTRL-W、_(アンダースコア)です。
ウィンドウを最大限まで大きくするには、CTRL-W _ コマンドを数値指定なしで実行
します。


USING THE MOUSE [マウスを使う]

vimは様々なことをキーボードから極めて素早く行うことができます。残念ながら、
上で述べたウィンドウのサイズ変更コマンドは多少のタイピングが必要となりま
す。この場合、マウスを使う方が早いでしょう。マウスポインタをステータス行に
合せてから左ボタンを押してドラッグをしてください。ステータス行が動き、片方
のウィンドウが大きくなり、もう片方は小さくなります。


関連オプション

'winheight'オプションでは希望する最小のウィンドウの高さを設定することができ、
'winminheight'では最小のウィンドウの高さを強制することができます。
同様に、'winwidth'オプションでは希望する最小のウィンドウの幅を設定することがで
き、'winminwidth'では最小のウィンドウの幅を強制することができます。
'equalalways'オプションが設定されていると、ウィンドウが閉じたり開いたりするた
びに、全てのウィンドウのサイズが同じになるように調整されます。

==============================================================================
*08.4*	縦分割

":split"コマンドは新しいウィンドウを現在のウィンドウの上側に作ります。左側
にウィンドウを表示させるには、 >

	:vsplit

か、 >
	:vsplit two.c

を使います。実行後は次のようになります。

	+--------------------------------------+
	|/* file two.c */   |/* file one.c */  |
	|~		    |~		       |
	|~		    |~		       |
	|~		    |~		       |
	|two.c===============one.c=============|
	|				       |
	+--------------------------------------+

中央の縦棒(|)は実際には反転表示されます。これを縦セパレータと呼び、左右の
ウィンドウを分割します。

また新しい空ファイル用ウィンドウを作る、":vnew"コマンドもあります。これは
次のようにしてもできます。 >

	:vertical new

":vertical"コマンドはウィンドウ分割のコマンドの前に指定できます。これを
指定すると、ウィンドウは水平方向ではなく、垂直方向に分割されるようになり
ます。(ウィンドウを分割しないコマンドの場合は何も変わりません）


MOVING BETWEEN WINDOWS [ウィンドウ間の移動]

水平方向でも垂直方向でも好きなだけウィンドウ分割できますから、ウィンドウ
を自在に配置できます。そのウィンドウ間を移動するには次のようなコマンドを
使います。

	CTRL-W h	左側のウィンドウに移動
	CTRL-W j	下側のウィンドウに移動
	CTRL-W k	上側のウィンドウに移動
	CTRL-W l	右側のウィンドウに移動

	CTRL-W t	一番上のウィンドウに移動
	CTRL-W b	一番下のウィンドウに移動

カーソル移動と同じ文字を使うことに気付いたことでしょう。使いたければ、
矢印キーも同じように使えます。
上記以外のウィンドウ間移動コマンドは|Q_wi|をご覧ください。

==============================================================================
*08.5* ウィンドウの移動

いくつかのウィンドウに分割したが、良くない場所にあるとします。そんな場合、
ウィンドウをどこか別の場所に動かす必要があります。例えば、このように３つの
ウィンドウがあるとします。

	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file three.c */		   |
	|~				   |
	|~				   |
	|three.c===========================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

明らかに一番下のウィンドウが一番上にくるべきです。そのウィンドウに(CTRL-W w
を使って)移動し、次のコマンドを入力してください。 >

	CTRL-W K

ここでは大文字の"K"を使います。これを実行すると、そのウィンドウが一番上に移動
します。ここでもKが上への移動で使われていることに気が付くでしょう。
縦分割している場合に、CTRL-W K を押すと現在のウィンドウを一番上に移動し、その
ウィンドウが横巾いっぱいまで占有するようにします。例えば、このようなレイアウ
トになっているとします。

	+-------------------------------------------+
	|/* two.c */  |/* three.c */  |/* one.c */  |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|two.c=========three.c=========one.c========|
	|					    |
	+-------------------------------------------+

ここでCTRL-W Kを中央のウィンドウ(three.c)で使うと、結果はこうなります。

	+-------------------------------------------+
	|/* three.c */				    |
	|~					    |
	|~					    |
	|three.c====================================|
	|/* two.c */	       |/* one.c */	    |
	|~		       |~		    |
	|two.c==================one.c===============|
	|					    |
	+-------------------------------------------+

他に同じようなコマンドが３つあります。(多分内容は推測できるでしょう)

	CTRL-W H	ウィンドウを左端に移動
	CTRL-W J	ウィンドウを下端に移動
	CTRL-W L	ウィンドウを右端に移動

==============================================================================
*08.6*	全ウィンドウを対象とするコマンド

いくつかウィンドウを開いていて、vimを終わりたい場合は、個々のウィンドウを
一つづつ閉じることで終了できます。でも手っ取り早いのは次のコマンドです。 >

	:qall

これは":quit all"の意味です。どれかのウィンドウに変更が加わっていれば、vimは
終了しません。カーソルは自動的に変更のあったウィンドウに移動します。":write"
を使ってそれぞれを保存することも、":quit!"でそれを破棄することもできます。

変更のあるウィンドウがあることがわかっていて、それを全部保存したいのなら、
このコマンドが使えます。 >

	:wall

これは":write all"の意味です。とはいっても、実際に保存するのは変更のあった
ファイルだけです。変更していないファイルを上書きしても意味がないことをvimは
わかってますから。
で、さらに上のコマンド":qall"と":wall"を組み合せた"write and quit all"コマ
ンドがあります。 >

	:wqall

これは変更のあったファイルを全部保存してからvimを終わります。
最後に、全変更を投げ捨ててvimを終わるコマンドもあります。 >

	:qall!

このコマンドはアンドゥできないので、使う時には慎重に！


OPENING A WINDOW FOR ALL ARGUMENTS [全引数のウィンドウを開く]

引数で指定した各ファイル用のウィンドウを開くには、起動パラメタに"-o"を指定
します。 >

	vim -o one.txt two.txt three.txt

結果はこうなります。

	+-------------------------------+
	|file one.txt			|
	|~				|
	|one.txt========================|
	|file two.txt			|
	|~				|
	|two.txt========================|
	|file three.txt			|
	|~				|
	|three.txt======================|
	|				|
	+-------------------------------+

起動パラメタ"-O"だと、ウィンドウが縦分割になります。
vimが既に起動しているのであれば、":all"コマンドを使うと引数リストの各ファイ
ル毎にウィンドウを開きます。":vertical all"だと縦分割になります。

==============================================================================
*08.7*	vimdiffでファイルの差分を見る

vimには２つのファイル差分を見るための特別な起動方法があります。"main.c"とい
うファイルを開き、１行に数文字を挿入します。次に'backup'オプションを有効に
してからファイルを保存します。するとバックアップファイル"main.c~"には直前の
バージョンが入っています。
シェルで(vim上ではありません)次のコマンドを入力します。 >

	vimdiff main.c~ main.c

vimは２つのウィンドウを左右に並べた状態で起動します。画面には先ほど追加した
行とその前後の数行だけを表示します。

	 VV		      VV
	+-----------------------------------------+
	|+ +--123 lines: /* a|+ +--123 lines: /* a|  <- fold
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	changed text	  |  <- changed line
	|  text		     |	text		  |
	|  text		     |	------------------|  <- deleted line
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|+ +--432 lines: text|+ +--432 lines: text|  <- fold
	|  ~		     |	~		  |
	|  ~		     |	~		  |
	|main.c~==============main.c==============|
	|					  |
	+-----------------------------------------+

(上の図ではハイライト部分がわからないので、ちゃんと見たければ、vimdiffコマ
ンドを実行してみてください)

変更していない行は１行に圧縮しています。これをclosed foldと呼びます。
上の図では "<- fold"とある行がそうです。最初のフォールド行は123行分のテキス
トを示し、この数字は両方のファイルで一致しています。
"<- changed line"とある行はハイライト表示となり、挿入した文字列は別の色での
表示になります。こうすることで２つのファイル間で違っている場所を表示します。
削除された行はmain.cのウィンドウにあるように"---"で表示します。上の図の、
"<- deleted line"とある所を見てください。実際にはここには何も文字はありませ
ん。main.cに空行を埋めこんで、他のウィンドウと同じ行番号となるように表示し
ます。


THE FOLD COLUMN [桁のフォールド]

各ウィンドウの左側にちょっとバックグラウンドの変わった桁があります。上の図で
は、"VV"と書いてあります。フォールドしている行の前には、ここに"+"記号が表示
されます。マウスポインタをその"+"記号に動かし、左ボタンを押します。フォール
ドが開き、その中にあったテキストを見ることができます。
フォールドの桁には"-"記号が入ります。"-"をクリックするとフォールドは元のよ
うに閉じます。
当り前ですが、これはマウスがある場合だけできます。キーボードを使って"zo"と
"zc"で開いたり、閉じたりできます。


DIFFING IN VIM [vimの中で差分を取る]

diffモードを始めるもう一つの方法はvimの中から実行できます。"main.c"を編集し
て、次に画面を分割し、差分を表示しましょう。 >

	:edit main.c
	:vertical diffsplit main.c~

":vertical"コマンドはウィンドウを縦分割する時に使用します。これを省略すると、
横分割になります。

パッチかdiffファイルがあれば、差分モードを第３の方法で始められます。最初に
パッチを適用するファイルを開き、次にvimにそのパッチファイルの名前を教えてや
ります。 >

	:edit main.c
	:vertical diffpatch main.c.diff

警告：パッチファイルには編集中のファイル用のパッチだけしか含んではなりません。
でないと大量のエラーメッセージが表示されたり、思いもよらないパッチを他のファ
イルに当ててしまうかもしれません。
パッチ処理はvimの中でファイルのコピーに対して行います。ハードディスク上のファ
イルは(vim上でそれを上書きしない限り)変更されないままです。


SCROLL BINDING [同期スクロール]

ファイル間の差分がたくさんある時も、あなたは普通の方法でスクロールできます。
vimは２つのウィンドウが同じ行番号から始まるようにもう片方を自動的にスクロー
ルしてくれます。ですから、左右に並べておくと違いがよく解るでしょう。
同期スクロールを止めたくなったら、次のコマンドを使います。 >

	:set noscrollbind


JUMPING TO CHANGES [差分の箇所にジャンプする]

何らかの方法でフォールドをdisableにした時、差分の箇所を見つけるのが難しく
なります。このコマンドを使うと、次の差分を探してジャンプしてくれます。 >

	]c

逆方向に探すのはこれです。 >

	[c

回数指定を使えば、さらに遠くまでジャンプします。


REMOVING CHANGES [変更を取り止めにする]

ウィンドウ間でのテキスト移動ができます。これによって、差分が増えたり、減った
りします。どんな場合であれ、vimはハイライト表示を更新しません。更新する場合
は次のコマンドを入力します。 >

	:diffupdate

差分を取り除くために、片方のウィンドウのハイライト領域をもう片方にコピーでき
ます。上で使った"main.c"と"macin.c~"を例にしてみましょう。カーソルを左側の
ウィンドウに動かし、もう片方のウィンドウでは削除された行に移動します。ここで
次のコマンドを入力します。 >

	dp

現在のウィンドウのテキストをもう片方のウィンドウにプットして、差分をなしに
します。"dp"というのは"diff put"の意味です。
同じことを違う方法でもできます。右側のウィンドウにカーソルを動かし、"changed"
が挿入された行にカーソルを動かし、次のコマンドを入力します。 >

	do

もう片方のウィンドウから文字列を持ってくることで、変更はチャラになります。
ファイルに違いがなくなってしまったので、vimは全行をclosed foldに押し込みま
す。"do"は"diff obtain"の意味です。意味的には"dg"の方が良いのですが、他で使
われてしまっているためです。("dgg"で、カーソル位置から最初の行まで削除しま
す)

diffモードの詳細は |vimdiff| をご覧ください。

==============================================================================
*08.8*	その他

'laststatus'オプションは、最後のウィンドウにステータスラインを表示するかどうか
を制御します。

	0	決してしない。
	1	分割ウィンドウがある時だけ(デフォルト)
	2	常に表示

他のファイルを編集する多くのコマンドでは、ウィンドウを分割するバージョン
があります。コマンドラインモードのコマンドでは先頭に"s"を付けます。例えば、
":tag"はタグジャンプですが、":stag"だとウィンドウ分割をした上で、タグジャ
ンプします。
通常モードのコマンドでは、CTRL-Wをコマンドの前に置きます。CTRL-^はオルタ
ネートファイルにジャンプしますが、CTRL-W CTRL-^ はウィンドウを分割した上
で、そのウィンドウに移動します。

'splitbelow'オプションでは新しいウィンドウを現在のウィンドウの下に出すよう
にできます。'splitright'オプションでは、縦分割でウィンドウ分割した時に現在
のウィンドウの右側に出るようにできます。

ウィンドウ分割をする時は、以下に示すオプション(正確にはmodifier)をコマンド
の前に指定することでウィンドウの表示位置を指定できます。

	:leftabove {cmd}	現在ウィンドウの左か上に出る
	:aboveleft {cmd}	同上
	:rightbelow {cmd}	現在ウィンドウの右か下に出る
	:belowright {cmd}	同上
	:topleft {cmd}		vimウィンドウの左か上に出る
	:botright {cmd}		vimウィンドウの右か下に出る

==============================================================================

Next chapter: |usr_09.txt|  GUIを使う

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
