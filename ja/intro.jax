COMMENT: Vimの紹介
STATUS: finished 5.7a
TRANSLATOR: 北条耀
MAINTEINER: 村岡太郎 <koron@tka.att.ne.jp>

*intro.txt*     For Vim version 5.7a.  Last change: 2000 Jan 10


		  VIM REFERENCE MANUAL    by Bram Moolenaar


Vimへのイントロダクション				*ref* *reference*

1. イントロダクション		|intro|
2. インターネット上でのVim	|internet|
3. クレジット			|credits|
4. 表記法			|notation|
5. モードの入門			|vim-modes-intro|
6. モードの切り替え		|mode-switching|
7. ウィンドウの表示内容		|window-contents|

==============================================================================
1. イントロダクション					*intro*

Vim の名はVi IMprovedから来ています。それはかつてはVi IMitationであったもので
すが、とてもたくさんの改良点があることを考えれば、名称の変更は適切でしょう。
VimはUNIXのプログラム"Vi"のほとんどのコマンドを含み、さらに多くのコマンドをサ
ポートするテキストエディタです。Vimはプログラムの編集やその他の8ビットアスキー
コードによるテキストの編集にたいへん役立ちます。全てのコマンドはキーボードから
与えることができます。このことによって、あなたは指をキーボードから、視点をスク
リーンから離さずにいることができます。ただ、もし望むのなら、マウスをサポートし
ますし、スクロールバーとメニューを持つGUIをサポートするバージョンもあります。
(|gui.txt|を参照)

このマニュアルの要約は"help.txt"にあります。|help.txt| Vimからは、<Help>か<F1>
キー、あるいは|:help|コマンドからアクセスできます(バーも引用符もなしで、単に
:helpと打つだけです)。ヘルプがデフォルトの位置に無い場合には、ヘルプファイルの
名前には、'helpfile'オプションが設定できます。タグによって項目にジャンプするこ
ともできます。項目にジャンプするためにはカーソルを合わせてCTRL-]、戻るためには
CTRL-Tを打ちます。

このマニュアルを通して、ViとVimの相違点は次のように中カッコの中で述べられます。
{Viにはオンラインヘルプはありません}。VimとViの相違点についての要約は
|vi_diff.txt|を参照。

このマニュアルは様々なマシン上のVimについて触れています。違うコンピュータ、端
末の間では、Vimにちょっとした違いがあります。さらなる注意はこの文書の中で与え
られています。それぞれのシステムのために個別の文書があります。 |sys-file-list|
を参照。

このマニュアルは全てのVimのコマンドとオプションのリファレンスです。ViやVimの使
い方に関するイントロダクションではありません(それを入れるとあちこちで説明が込
み入ってしまうので)。初心者のためには、実習|tutor|があります。好みに合わせて設
定したり、Vimスクリプトを書くときには|vimrc-intro|を参照して下さい。

初心者のための内容を含んだViの本はたくさん出ています。"Learning the Vi editer"
(Linda Lamb、Arnold Robbins著、オライリー刊)がお薦めです。第6判にはVimに関する
章があります。ISBN:1-56592-426-6。他にドイツ語版があります。

==============================================================================
2. インターネット上でのVim				*internet*

			*www* *faq* *FAQ* *ftp* *distribution* *download*
VimのページにはVimについての最新情報が載っています。最新バージョンのVimへのリ
ンクもあります。FAQはよく尋ねられる質問に対する回答集です。問題があったらまず
これを読むとよいでしょう。

	VIMホームページ	:	http://www.vim.org/
	最新ニュース	:	http://www.vim.org/news.html
	VIM FAQ		:	http://www.vim.org/faq/
	ダウンロード	:	ftp://ftp.vim.org/pub/vim/MIRRORS


Usenet のVimに関する討論は:			*news* *usenet*
	comp.editors
http://www.vim.org/usenet.html を参照。このグループは、他のエディタのための物
でもあります。Vim について書く場合は、その旨明記するのを忘れないでください。

						*mail-list* *maillist*
Vimには5つのメーリングリストがあります。
<vim@vim.org>
	現行バージョンのVimの使い方に関する議論: 使いやすいマッピング、質問、
	回答、特定のバージョンはどこで手に入るかなど。
<vim-dev@vim.org>				*vim-dev* *vimdev*
	Vimを変えていくための議論: 新しい機能、移植、パッチ、ベータテストバー
	ジョンなど。
<vim-announce@vim.org>				*vim-announce*
	Vimの新バージョンに関するアナウンス: ベータテストバージョンや異なるシ
	ステムへの移植の話題もここ。
<vim-multibyte@vim.org>				*vim-multibyte*
	Vimの多バイト機能の使用、改良に関する議論。
<vim-mac@vim.org>				*vim-mac*
	Vimのマッキントッシュバージョンの使用、改良に関する議論。

http://www.vim.org/mail.html を参照。

注意:
- メーリングリストに投稿するにはそのリストに記名する必要があります！
- 投稿するときは記名したときと同じ場所からでなければなりません(スパムメールを
  避けるため)。
- 最大メッセージサイズは40000文字までです。

						*subscribe-maillist*
もし加わりたいと思ったら、次の場所へメールを送って下さい。
	<vim-help@vim.org>
あなたの"From:"のアドレスが正しいことを確認しましょう。次にリストサーバーが記
名の仕方についてヘルプを送ります。

メールリストのソフトウェアから過去のメッセージとそれらの索引を得ることができま
す。そのやり方はvim-helpに指示があります。

アーカイブの場所:				*maillist-archive*
http://www.egroups.com/group/vim
http://www.egroups.com/group/vimdev
http://www.egroups.com/group/vimannounce
http://www.egroups.com/group/vim-multibyte
http://www.egroups.com/group/vim-mac

別のアーカイブが http://www.somelist.com の "Editeurs" セクションにあります(フ
ランス語のサイトです。メッセージは英語です)。

メーリングリストの追加:

<vim-fr@club.voila.fr>				*french-maillist*
	Vimのフランス語のメーリングリスト。記名は、
		<vim-fr-subscribe@club.voila.fr>
	にメールを送ってください。
	または http://www.egroups.com/group/vim-fr を参照して下さい。


バグレポート:				*bugs* *bug-reports* *bugreport.vim*
	Bram Moolenaar <Bram@vim.org>
簡潔にお願いします; メールに回答する時間は、その分Vimを改良する時間を減らしま
す! 再現可能な例をつけて、どこの設定が(あるいは機能が)バグの発生に影響している
かを見つけてみてください。できることなら違うマシンでも試してみて下さい。そして、
もし可能ならパッチを私に送って下さい。 (本家へのリポートは英語でお願いします。)

バグの疑いがあるときは、次のコマンドを使って下さい:
>  :so $VIMRUNTIME/bugreport.vim
このコマンドはカレントディレクトリにあなたの環境に関する多くの情報を持った
"bugreport.txt"というファイルを作ります。このファイルを送る前に、そこにいかな
る秘密の情報も含まれていないことを確認してください!

							*debug*
Vimがテストファイルの内のひとつでクラッシュしたとき、もしあなたがコンパイルに
gccを用いているなら、Vimがどこでクラッシュしたかを完全に調べることができます:

1. Vimを"-g"オプションでコンパイル(Makefileにこのための行があるので、コメント
   アウトしてください)。

2. 次のコマンドを実行 ("11"を失敗したテストファイルを置き換えて):
>	cd testdir
>	gdb ../vim
>	run -u vimrc.unix -U NONE -s dotest.in test11.in

3. Vimがどこでクラッシュしたか確認。gdbがメッセージを出すでしょう。

4. 次のコマンド実行して、gdbでスタックトレースを得る:
>	where
   違う場所のスタックとレースは次のようにしてチェックできる:
>	frame 3
   "3"はスタックトレースの内の番号と置き換えて下さい。

							*year-2000* *Y2K*
Vimは内部的に編集に日付を使っていませんので、2000年問題はありません。Vimは
1970年1月1日(正午)からの秒形式での時間を使っています。この時間は、編集されたファ
イルとスワップファイルのタイムスタンプのチェックに使われますが、それは致命的な
問題を起こさず、ただ警告のメッセージを発するのみです。

しかし、32bit整数で秒があふれてしまう2038年問題はあるかもしれません。この問題
は、コンパイラ、ライブラリ、オペレーティングシステムに依存します。time_t、
ctime()関数が使われているときは特にそうです。time_tはスワップファイル内に4バイ
トで格納されます。しかし、これはファイルの回復時にファイルの日付、時間を求める
ためにのみ使われるので、通常の編集作業には決して影響しません。

Vimのstrftime()関数はstrftime()システムコールを直接使います。localtime()は
time()システムコールを、getftime()はstat()システムコールで返される時間をそれぞ
れ使用します。あなたのシステムライブラリが2000年対応ならば、Vimもそうです。

ユーザは外部コマンドを使用するVimスクリプトを作るかもしれません。このことが
Y2K問題を招くかもしれませんが、Vimそれ自身の問題ではありません。

==============================================================================
3. クレジット						*credits* *author*

Vimの大部分はBram Moolenaar<Bram@vim.org>の手によるものです。

ドキュメントの一部は以下の方々によって書かれたViのマニュアルによります:
	W.N. Joy
	Alan P.W. Hewett
	Mark Horton

Vim エディタはStevieをベースにしており、以下に書かれた人々の手になるソフトウェ
ア(のアイディア)も参考にしています。他の人々は私に意見やパッチを送ってくれたり、
Vimの良い点、悪い点に関するフィードバックをしてくれました。

これらの人々の協力なくして、Vimは現在の姿にはならなかったことでしょう！

	Ron Aaron		Win32 GUIに関する変更
	Dany St-Amant		Macintosh 移植
	Tony Andrews		Stevie
	Gert van Antwerpen	MS-DOS上のDJGPPに関する変更
	Berkeley DB(3)		スワップファイルの実装に関するアイディア
	Keith Bostic		Nvi
	Ralf Brown		MS-DOS用のSPAWNOライブラリ
	Robert Colon		多くの役立つアドバイス
	Marcin Dalecki		GTK+ GUIへの移植、ツールバーのアイコン
	Kayhan Demirel		ウガンダのニュースを送ってくれた
	Chris & John Downey	xvi (マルチウィンドウバージョンのアイディア)
	Henk Elbers		最初のVMSへの移植
	Eric Fischer		Macへの移植、'cindent'、その他の改良
	Bill Foster		Athena GUIへの移植
	Loic Grenie		xvim (マルチウィンドウバージョンのアイディア)
	Sven Guckes		Vim WWWページの管理
	Darren Hiebert		Exuberant ctags
	Bruce Hunsaker		VMSへの移植版の改良
	Andy Kahn		Cscopeサポート、GTK+ GUIへの移植
	Steve Kirkendall	Elvis
	Roger Knobbe		オリジナルのWindows NTへの移植
	Sergey Laskavy		モスクワからのVimのヘルプ
	Felix von Leitner	Vimメーリングリストの管理
	David Leonard		UnixへのPython拡張の移植
	Avner Lottem		ウィンドウでの右から左への編集
	Flemming Madsen		さまざまな機能とパッチ
	MicroSoft		VimをコンパイルするDevStudioの提供
	Paul Moore		Pythonインターフェイス拡張
	Katsuhito Nagano	マルチバイトバージョンに関する作業
	Sung-Hyun Nam		マルチバイトバージョンに関する作業
	Vince Negri		Win32 GUIと一般的なコンソールの拡張
	George V. Reilly	Win32移植、Win32 GUIへの移植を始める
	Stephen Riehm		バグ収集家
	Stefan Roemer		さまざまなパッチとユーザへのヘルプ
	Olaf Seibert		DICEとBeBoxバージョン、regexpの改良
	Mortaza Shiran		Farsiのパッチ
	Peter da Silva		termlib
	Paul Slootman		OS/2への移植
	Henry Spencer		正規表現に関して
	Tim Thompson		Stevie
	G. R. (Fred) Walter	Stevie
	Sven Verdoolaege	Perlインターフェイス
	Robert Webb		コマンドライン補完、GUIバージョン、そして
				多くのパッチ
	Ingo Wilken		Tclインターフェイス
	Juergen Weigert		Latticeバージョン、AUXの改良、UNIXとMS-DOSへ
				の移植、autoconf
	Stefan 'Sec' Zehl	vim.orgの管理

バグレポートや提案を送ってくれた人々に感謝します。あまりにたくさんなので、ここ
で彼らの名前について触れることはできませんが。これらの人々のアイディアがなけれ
ば、Vimは今のVimにはならなかったことでしょう: 彼らがVimを生かしつづけたのです！


この文書には他のバ－ジョンのViに対するいくつかの参照があります。:
							*Vi*
Vi	"オリジナル"。特に注意しなければSun OS 4.xのバージョンのViを指す。
	":version"は"Version 3.7, 6/7/85"を返す。時として別のバージョンにも触
	れることがある。Unix上でのみ動く。ソースコードはライセンスによってのみ
	利用可能。Viについての更なる情報は、以下の場所から得られる:
		http://www.vim.org
							*Posix*
Posix	IEEE standard 1003.2, Part 2: Shell and utilitiesより。
	一般に"Posix"として知られる。これは、Viはどのように機能すべきかという
	文書である。バージョンは1996年初めの草稿からとられているため、すべての
	注意はこれに"従うことが期待される"。別にどこを変更しても構わないのだ
	が...
							*Nvi*
Nvi	"New" Vi。バージョンはBSD 4.4のものと、多くのフリーUnixのもの。使われ
	ているのはバージョン1.79。":version"は"Version 1.79 (10/23/96)"を返す。
	ソースコードはフリーで使用できる。
							*Elvis*
Elvis	別のViクローン、Steve Kirkendallの手による。使われているのはバージョン
	2.1で、これは最新の公式リリース。ソースコードはフリーに使用できる。

==============================================================================
4. 表記法						*notation*

この文章を読むとき、文法ハイライトが使用されていると、協調されるように打ち込ま
れたテキストは、特別なグループとしてハイライトされます。それらは[]、{}、<>、
CTRL-Xで囲まれた項目です。

[]		角括弧で囲まれた文字は省略可能。

							*count* *[count]*
[count]		コマンドの前に置いて、そのコマンドを繰り返させたり、反復させる
		ための省略可能な数字。与えられなかった場合、特に注意が無ければ
		1が与えられたものとする。このマニュアルでは、[count]はコマンド
		の記述に書かれておらず、解説においてのみ書かれていることを注意
		しておく。これはコマンドを調べやすくするためである。'showcmd'
		オプションが有効だと、(部分的に)入力されたカウントがウィンドウ
		の下の方に表示される。最後の数字を削除するために、<Del>を使う
		ことが出来る。(|N<Del>|)

							*[quotex]*
["x]		テキストを保管できる場所を指す任意のレジスタ。|registers|を参
		照。xは'a'から'z'、'A'から'Z'、または'"'、場合によっては(put
		コマンドで使うとき)、'0'から'9'、'%'、'#'、':'、または'.'の内
		の1文字。大文字と小文字は同じレジスタを指すが、小文字が以前の
		レジスタの内容を上書きするのに対し、大文字は以前のレジスタの内
		容に追加する。""x"なしの場合、あるいは""""とした場合には、テキ
		ストは名前なしのレジスタに入れられる。

							*{}*
{}		中括弧は入力されるべきコマンドの部分を示すが、違った値も取るこ
		とができるときに使われる。VimとViの違いも中括弧を用いて表され
		る(これは文脈から明らかにわかる)。

							*{char1-char2}*
{char1-char2}	char1からchar2の範囲の一文字。例えば: {a-z}は小文字一文字。
		複数範囲は結合可能。例えば、{a-zA-Z0-9}はアルファベット、数字
		文字の内のどれか。

							*{motion}*
{motion}	カーソル移動コマンド。これらは、|motion.txt| で説明されていま
		す。例:
			w		次の単語の最初に移動
			4j		4行下に移動
			/The<CR>	つぎの "The" が、ある場所に移動
		これは演算コマンド|operator|の後で、演算を受けるテキストを選択
		するため使われる。
		移動コマンドがカウントを含み、演算コマンドもカウントを含むとき
		は、2つのカウントが掛け合わされる。例えば: "2d3w"は6単語を削除
		する。移動はマウスのクリックでもできる。マウスは今のところMS-D
		OS、Win32、GPM付きLinuxコンソール、Unix上のxtermでのみサポート
		されている。":omap"コマンドは、演算子が未解決のときキャラクタ
		をマップするために使うことができる。

							*{Visual}*
{Visual}	選択されたテキストの範囲。"v"、"V"、またはCTRL-Vコマンドで始ま
		ります。それからカーソル移動コマンドをもちいて選択範囲の終わり
		を変更することができます。演算コマンド|operator|の前に使われ、
		演算を受けるテキストをハイライト強調する。|Visual-mode|を参照。

							*<character>*
<character>	後で示す表の、省略可能な修飾子を伴うスペシャルキャラクタ1文字、
		または省略可能な修飾子を伴うASCIIキャラクタ1文字。

							*'character'*
'c'		ASCIIキャラクタ1文字。

							*CTRL-{char}*
CTRL-{char}	コントロールキャラクタとして打ち込まれた{char}; すなわち、
		CTRLキーを押しながら{char}をタイプしたもの。{char}の大文字
		小文字の違いは区別されない; よってCTRL-AとCTRL-aは等価とな
		る。しかし、ある端末ではSHIFTキーが別のコードを生成すること
		があるため、シフトは使うべきでない。

							*'option'*
'option'	値に設定できるオプション、引数は引用符で囲まれる。|options|
		を参照。

							*quotecommandquote*
"command"	入力することのできるコマンドへの参照は2重引用符で囲まれる。

					*key-notation* *key-codes* *keycodes*
このドキュメントで使われているキーに対する名前。これらは":map"コマンドにおい
ても使われる。

表記		意味		      等価表現	10進値  値	~
-----------------------------------------------------------------------
<Nul>		ゼロ			CTRL-@	  0 (10として保存) *<Nul>*
<BS>		バックスペース		CTRL-H	  8	*backspace*
<Tab>		タブ			CTRL-I	  9	*tab* *Tab*
							*linefeed*
<NL>		復帰			CTRL-J	 10 (<Nul>に使用)
<FF>		フォームフィード	CTRL-L	 12	*formfeed*
<CR>		改行			CTRL-M	 13	*carriage-return*
<Enter>		<CR>と同じ				*<Enter>*
<Esc>		エスケープ		CTRL-[	 27	*escape* *<Esc>*
<Space>		スペース			 32	*space*
<lt>		小なり(less-than)			<	 60	*<lt>*
<Bslash>	バックスラッシュ	\	 92	*backslash* *<Bslash>*
<Bar>		垂直バー		|	124	*<Bar>*
<Del>		削除				127

<EOL>		行の終端 (<CR>、<LF>、または<CR><LF>であり得る。
		システムと'fileformat'による)	*<EOL>*

<Up>		上カーソル			*cursor-up* *cursor_up*
<Down>		下カーソル			*cursor-down* *cursor_down*
<Left>		左カーソル			*cursor-left* *cursor_left*
<Right>		右カーソル			*cursor-right* *cursor_right*
<S-Up>		シフト + 上カーソル
<S-Down>	シフト + 下カーソル
<S-Left>	シフト + 左カーソル
<S-Right>	シフト + 右カーソル
<C-Left>	コントロール + 上カーソル
<C-Right>	コントロール + 上カーソル
<F1> - <F12>	ファンクションキー1から12	*function_key* *function-key*
<S-F1> - <S-F12> シフト + ファンクションキー1から12	
						*<S-F1>*
<Help>		ヘルプキー
<Undo>		アンドゥキー
<Insert>	挿入キー
<Home>		ホーム				*home*
<End>		エンド				*end*
<PageUp>	ページアップ			*page_up* *page-up*
<PageDown>	ページダウン			*page_down* *page-down*
<kHome>		テンキーのホーム(左上)		*keypad-home*
<kEnd>		テンキーのエンド(左下)		*keypad-end*
<kPageUp>	テンキーのページアップ(右上)	*keypad-page-up*
<kPageDown>	テンキーのページダウン(右下)	*keypad-page-down*
<kPlus>		テンキーの+			*keypad-plus*
<kMinus>	テンキーの-			*keypad-minus*
<kMultiply>	テンキーの *			*keypad-multiply*
<kDivide>	テンキーの /			*keypad-divide*
<kEnter>	テンキーの Enter		*keypad-enter*
<S-...>		シフトキー			*shift*
<C-...>		コントロールキー		*control* *ctrl*
<M-...>		altまたはmetaキー		*meta* *alt*
<t_xx>		termcapで"xx"エントリを持つキー
-----------------------------------------------------------------------

注意: シフトされたカーソルキー、ヘルプキー、アンドゥキーは数少ない端末でのみ
使えます。Amiga上では、シフトされたファンクションキー10はキーシーケンスに使わ
れるコード(CSI)を生成します。これは他のキーをタイプした後でのみ認識されます。

注意: 削除キーには2つのコードがあります。127は削除キーの10進ASCII値で、これは
常に認識されます。削除キーによっては別の値を送りますが、これはtermcapエントリ
の"kD"から得られる値です。どちらも同じ効果をもちます。|:fixdel|も参照してくだ
さい。

注意: テンキーのキーは、"普通"のキーと同じものとして使われます。例えば、<kHome>
は<Home>と同じ効果を持ちます。もしテンキーのキーが、テンキーでないそれと等価な
キーと同じキーコードをそのままで送るなら、それはテンキーでないコードとして認識
されます。例えば、<kHome>が<Home>と同じキーコードを送るなら、<kHome>が押された
ときVimは<Home>が押されたと受け取ります。それゆえ、<kHome>へのマッピングは機能
しません。

								*<>*
例はしばしば<>の表記で与えられます。ときとしてこれは、あなたが何をタイプすべ
きかを明確にするだけということがありますが、たいていの場合、文字通り打つことが
できます。例、":map"コマンドと共に使われるときがそうです。その規則は:
 1.  出力可能な文字は、バックスラッシュと'<'を除いてそのまま打てる。
 2.  バックスラッシュはダブルバックスラッシュ"\\"、または"<Bslash>"で表される。
 3.  実際の'<'は"\<"、または"<lt>"で表される。混乱を招く恐れがなければ、'<'は
     そのまま使われる。
 4.  "<key>"はスペシャルキーを打つことを示す。これは上記の表で説明された表記で
     ある。少々の例をあげる:
	   <Esc>		エスケープキー
	   <C-G>		CTRL-G
	   <Up>			上カーソルキー
	   <C-LeftMouse>	コントロール + 左マウスクリック
	   <S-F11>		シフト + ファンクションキー11
	   <M-a>		Meta + a  ('a' with bit 8 set)
	   <M-A>		Meta + A  ('A' with bit 8 set)
	   <t_kd>		"kd" termcapエントリ(下カーソルキー)

もしVimで完全に<>の表記を使いたければ、'cpoptions'から'<'フラグを除く必要があ
ります('compatible'がセットされていない場合、デフォルトでそうなっています)。
>	:set cpo-=<
<>の表記には、キー名の特別な意味を避けるため<lt>を使います。バックスラッシュ
を使った方法も機能しますが、'cpoptions'が'B'フラグを含んでいないときだけです。

マッピングにおいて<Home>を文字通り使う場合の例です:
>	:imap <C-H> \<Home>
>	:imap <C-H> <lt>Home>
最初のものは'B'フラグが'cpoptions'に含まれていない場合のみ機能します。2番目の
ものは常に機能します。
マッピングにおいて"<lt>"を文字通り得るためには:
>	:map <C-L> <lt>lt>

マッピング、略語補完、メニューコマンドについては、例をコピー＆ペーストして、そ
のまま使うことができます。あるいは、'<'と'>'のキャラクタを含んでいたとしても、
それらを文字通りに打つことができます。これは他のコマンド、":set"、":autocmd"
などのようなものでは機能しません！

==============================================================================
5. モードの入門					*vim-modes-intro* *vim-modes*

Vimは6つの基本モードを持っています:

					*Normal* *Normal-mode* *command-mode*
ノーマルモード		ノーマルモードでは普通の編集コマンドを全て入力でき
			ます。エディタをスタートするとこのモードに入ります
			('insertmode'オプションを設定していない限り。以下を
			参照)。これはコマンドモードとも呼ばれます。

ビジュアルモード	これはノーマルモードのようですが、移動コマンドがハイ
			ライト領域を広げます。非移動コマンドを使うと、ハイラ
			イト領域に対して実行されます。|Visual-mode|を参照。
			'showmode'オプションがオンなら、"-- VISUAL --"がウィ
			ンドウの最下部に表示されます。

選択モード		これは、MS-Windowsの選択モードによく似ています。出力
			可能な文字が打ち込まれると、選択範囲を削除し、挿入モ
			ードに入ります。|Select-mode|を参照。'showmode'オプ
			ションがオンなら、"-- SELECT --"がウィンドウの最下部
			に表示されます。

挿入モード		挿入モードでは、タイプされたテキストはバッファに挿入
			されます。|Insert-mode|を参照。'showmode'オプションが
			オンなら、"-- INSERT --"がウィンドウの最下部に表示さ
			れます。

コマンド行モード	コマンド行モード(Cmdline modeともいう)では、ウィンド
Cmdline mode		ウの下部に1行のテキストを入力できる。これはExコマンド、
			":"、パターン検索コマンド、"?"、"/"、そしてフィルタコ
			マンド、"!"で使用する。|Cmdline-mode|を参照。

Exモード		コマンド行モードに似ているが、コマンド入力後もExモー
			ドに留まる。コマンドラインでの、非常に制限された編集
			作業となる。|Ex-mode|を参照。

さらに追加として5つのモードがある:

				*Operator-pending* *Operator-pending-mode*
演算子未解決モード	ノーマルモードに似ているが、演算子コマンドが開始され、
			Vimは{motion}により演算子適用範囲が決定するのを待って
			いる状態にある。

置換モード		置換モードは挿入モードの特殊な場合を指す。挿入モード
			と同様のことができるが、1文字入力するごとに、現存して
			いるテキストの文字が１つ削除される。|Replace-mode|を
			参照。
			'showmode'オプションがONになら、"-- REPLACE --"が
			ウィンドウの最下部に表示される。

挿入ノーマルモード	挿入モードでCTRL-Oが与えられたとき、このモードに入る。
			ノーマルモードに似ているが、コマンドが実行された後、
			挿入モードに戻る。
			'showmode'オプションがONになら、"-- (insert) --"が
			ウィンドウの最下部に表示される。

挿入ビジュアルモード	挿入モードでビジュアル選択を開始したとき、このモード
			に入る。ビジュアル選択が終了したとき、Vimは挿入モード
			に戻る。
			'showmode'オプションがONになら、"-- (insert) VISUAL --"
			がウィンドウの最下部に表示される。

挿入選択モード		挿入モードで選択モードを開始したとき、このモードに入る。
			選択モードが終了すると、Vimは挿入モードに戻る。
			'showmode'オプションがONになら、"-- (insert) SELECT --"
			がウィンドウの最下部に表示される。
==============================================================================
6. モードの切り替え					*mode-switching*

何らかの理由で自分が何のモードにいるのかわからなくなったとき、<Esc>を2度押す
ことで常にノーマルモードに戻ることができます。ノーマルモードに戻ったことを、
<Esc>を押したときのスクリーンフラッシュ、またはベルの音で知ることができます。
ただしExモードでは機能しませんので、":visual"を使ってください。

							*i_esc*
		TO mode						    ~
		Normal	Visual	Select	Insert	  Replace   Cmd-line  Ex ~
FROM mode								 ~
ノーマル		v V ^V	  *4	 *1	    R	    : / ? !   Q
ビジュアル	 *2		  ^G	 c C	    --	      :       --
選択		 *5	^O ^G		 *6	    --	      :       --
挿入		 <Esc>	  --	  --		  <Insert>    --      --
置換		 <Esc>	  --	  --	<Insert>	      --      --
コマンド行	 *3	  --	  --	 :start	    --		      --
Ex		 :vi	  --	  --	 --	    --	      --

-  無効
-- 不可

*1 ノーマルモードから挿入モードへは、コマンド"i"、"I"、"a"、"A"、"o"、"O"、
   "c"、"C"、"s"、または"S"で入る。
*2 ビジュアルモードからノーマルモードへは非移動コマンドで入るが、このときコマ
   ンドは実行される。<Esc>、"v"、"V"、または"CTRL-V"(|v_v|を参照)の入力ならば、
   副作用なしにビジュアルモードから出られる。
*3 コマンド行モードからノーマルモードへ移行するには:
   - <CR>か<NL>を打つ、このとき入力されているコマンドは実行される。
   - 行の全てを削除し(例、CTRL-Uを使う)、最後に<BS>を入れる。
   - CTRL-Cまたは<Esc>を打つ、このとき入力されているコマンドは実行されずに終了
     する。
   最後の場合では、<Esc>は'wildchar'オプションで定義された文字でもよい、このと
   きコマンド行補完が始まる。それを無視し、<Esc>を再び打つ。{Vi: <Esc>を入力す
   ると、コマンド行は実行される。これは多くの人にとって予期しない動作である; 
   そのためVimでは変更された。しかし、<Esc>がマッピングの一部であるような場合
   には、コマンド行は実行される。<Esc>を入力したときも、Viのように振舞ってほし
   いときは、":cmap ^V<Esc> ^V^M"を使うとよい}
*4 ノーマルモードから選択モードに移行するときは:
   - 'selectmode'が"mouse"を含んでいるならば、マウスでテキストを選択する。
   - シフトキーを押しながら非表示コマンドでカーソルを移動させる、このとき
     'selectmode'は"key"を含んでいる必要がある。
   - 'selectmode'が"cmd"を含んでいるなら、"v"、"V"または"CTRL-V"を使う。
*5 選択モードからノーマルモードに移行するには、シフトキーを押さずに非表示コマ
    ンドでカーソルを動かせばよい。
*6 選択モードから挿入モードへ移行するには、表示される文字を打てばよい。選択範
   囲は削除され、文字が挿入される。

'insertmode'オプションがオンのときは、編集作業は挿入モードで始まる。

	*CTRL-\_CTRL-N* *i_CTRL-\_CTRL-N* *c_CTRL-\_CTRL-N* *v_CTRL-\_CTRL-N*
付け加えて、コマンドCTRL-\ CTRL-N、あるいは<C-\><C-N>は、他のあらゆるモードか
らノーマルモードへ移行する。これでVimがノーマルモードであることを、<Esc>のとき
のようにビープ音を出さずに確認することができる。


					*Q* *mode-Ex* *Ex-mode* *Ex* *EX*
Q			"Ex"モードに切り替える。これは":"コマンドを一つ一つ打
			ち込むようなものである。ただし:
			- ":"を押したままでいる必要がない。
			- 画面は各コマンドごとに更新されない。
			- 普通のコマンド行編集はない
			- マッピングと略語補完を使うことはできない。
			実際には、それらの行は"標準の"行入力編集コマンド(削除
			に<Del>または<BS>、行削除にCTRL-Uを使用する)で編集され
			る。
			Vimはコマンド行で"ex"が実行された場合、標準でこのモー
			ドに入る。
			"Ex"モードを出るには、":vi"コマンド|:visual|を使う。
			注意: 古い Version の Vim では "Q" がテキストを整形す
			るコマンドでしたが、いまは |gq| になっています。

==============================================================================
7. ウィンドウ表示の内容					*window-contents*

ノーマルモードと挿入/置換モードでは、画面のウィンドウが現在のバッファの内容を
示しています: つまり、見ているものが得られるもの(WYSIWYG)です。しかし、２つの
例外があります:
- 'cpoption'オプションが'$'を含んでいて、変更が一行以内であるとき、テキストは
  直接削除されず、'$'が最後に削除された文字の位置に置かれます。
- 一方のウィンドウでテキストを挿入しているとき、もう一方のウィンドウの同じテキ
  ストは、挿入が終了するまで更新されません。
{Vi: 遅い端末では画面が常に更新されるとは限りません}

ウィンドウの幅より長い行は、'wrap'オプション(下記参照)がオフでない限り、折り返
されます。'linebreak'オプションを設定すると、空白文字で折り返すことができます。

ウィンドウ内でバッファの最終行より後ろに余白がある場合、Vimはウィンドウ内の余白
行の始めに、以下のように'~'を表示します:

>	some line
>	last line
>	~ 
>	~ 

このように、'~'はバッファの最後に到達したことを示します。

ウィンドウの最終行が入りきらない場合、Vimはそのウィンドウの最終行に、次のように
'@'を表示してそれを示します:

>	first line
>	second line
>	@
>	@

このように、'@'はウィンドウに収まりきらない行があることを知らせます。

'display'オプションに"lastline"フラグが存在する場合、'@'はウィンドウの左側に
表示されません。最終行がウィンドウ内に完全に収まらない場合は、収まる部分のみが
表示され、最後の3文字が次のように"@@@"で置き換えられます:

>	first line
>	second line
>	a very long line that d
>	oesn't fit in the wi@@@

長すぎてウィンドウに収まりきらない単一の行があるときは、特別な場合として扱わ
れます。Vimはカーソルのある場所付近の部分のみを表示します。特殊文字は表示され
ませんので、この行の全ての部分を編集することができます。
{Vi: ウィンドウに収まらない行に対しては"内部エラー"を起こします}

'highlight'オプションの'@'設定は、'@'と'~'文字に対して特別なハイライトを
セットするために使われます。これは、それらの文字をバッファにある本当の文字
と区別するために使われます。

'showbreak'オプションには、折り返し行の先頭につける文字列を入れます。

							*wrap-off*
'wrap'オプションがオフの場合、長い行は折り返されません。スクリーンに収まる
分だけが表示されます。カーソルが表示されていない部分に移動すると、スクリーン
は水平方向にスクロールします。この方法の利点は、縦の列がありのままに表示され
ること、スクリーンに収まらない行も編集できることです。欠点としては、一行の
全ての文字を一度に見ることができないことが挙げられます。'sidescroll'オプショ
ンにはスクロールできる縦列(コラム)の最小列を設定します。
{Vi: 'wrap'オプションがありません}

全ての普通のASCII文字はスクリーンに直接表示されます。<Tab>は、それが表現する
数のスペースに置き換えられます。他の非表示文字は、"^{char}"に置き換えられます、
このとき{char}には、その非表示文字に64が足された文字が入ります。それゆえ、
キャラクタ7(ベル文字)は"^G"で表されます。127から160までの文字は"~{char}"で置
き換えられます、このとき{char}には、その文字から64が引かれた文字が入ります。
これらの文字はスクリーンの1ポジション以上を占有します。カーソルはその最初の
１つにのみ置くことができます。

'number'オプションをセットしているとき、全ての行はその行番号を先頭に持ちます。
Tip: 行番号を混ぜた行の折り返しをしたくないときは、'showbreak'オプションに8つ
のスペースをセットします:
	":set showbreak=\ \ \ \ \ \ \ \ "

'list'オプションをセットしているとき、<Tab>文字はいくつかのスペースとしてでは
なく、"^I"として表されます。'$'が行の最後に置かれるので、行の最後についた空白
を見つけることができます。

コマンドラインモードでは、コマンドラインのみが正しく表示されます。バッファの
内容の表示は、コマンドラインモードから抜けると同時に更新されます。

ウィンドウの最後の行はステータスやその他のメッセージのために使われます。ステ
ータスメッセージが使われるのは、オプションがオンのときのみです:

status message			option	     default	Unix default	~
現在のモード			'showmode'	on	    on
コマンドの文字			'showcmd'	on	    off
カーソルの位置			'ruler'		off	    off

現在のモードとは、"-- INSERT --"または"-- REPLACE --"のことです、|'showmode'|
を参照。コマンドの文字とは、打ち込まれた、まだ適用されていないコマンドのこと
です。{Vi: 打ち込んだ文字やカーソルの位置を表しません}

遅い端末を使用しているのであれば、ステータスメッセージのをオフにすることで編
集のスピードをアップすることができます:
	:set nosc noru nosm

エラーが起こったとき、エラーメッセージは少なくとも一秒間は表示されます(逆再生
で)。{Vi: エラーメッセージは読む機会がないうちに他のメッセージに上書きされます}

いくつかのコマンドは何行に作用するかを表示します。何行以上でこれを行うかは、
'report'オプションでコントロールできます(デフォルト 2)。

Amiga上では、VimはCLIウィンドウで実行されます。Vimの名前と現在のファイル名の
完全パスはタイトルバーに表示されます。ウィンドウがリサイズされると、Vimは自動
的にウィンドウを再描画します。ウィンドウは好きなだけ小さくできますが、小さすぎ
ると1行のみで収まりきらなくなります。最終行に現れるたいていのメッセージが読め
るように、最低でも40文字の幅を取ってください。

ほとんどのUNIXシステム上で、ウィンドウのリサイズはVimによって正しく認識、把握さ
れます。{Vi: できません}

 vim:tw=78:ts=8:ft=help:norl:
