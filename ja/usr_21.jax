COMMENT: 外部コマンドの使用法、およびモードライン
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>

*usr_21.txt*	For Vim version 6.3.  Last change: 2004 Mar 29

		     VIM USER MANUAL - by Bram Moolenaar

				行ったり来たり


この章ではvimから他のプログラムを呼び出す方法について説明します。vimの中から
外部プログラムを呼び出す方法とvimを一旦離れて、後で戻ってくる方法の両方を説
明します。さらにvimの状態を覚えさせておき、後でそれを復元する方法についても
述べます。

|21.1|	退避(サスペンド)と復元(リジューム)
|21.2|	シェルコマンドの実行
|21.3|	viminfoによる情報の記憶
|21.4|	セッション
|21.5|	ビュー
|21.6|	モード行 

     Next chapter: |usr_22.txt|  編集したいファイルを見つける
 Previous chapter: |usr_20.txt|  コマンドラインコマンドを素早く入力する
Table of contents: |usr_toc.txt|

==============================================================================
*21.1*	退避(サスペンド)と復元(リジューム)

他のUnixのアプリケーションと同じくvimでもCTRL-Zを押してサスペンドできます。
CTRL-Zを押すと、vimを停止し、呼び元のシェルに制御を戻します。そこで嫌になる
まで他のコマンドを何でも実行できます。vimに戻ってくるにはシェルの"fg"コマン
ドを使います。 >

	CTRL-Z
	{任意のシェルコマンドを実行}
	fg

vimに戻って来たときには、何一つ変化はありません。
CTRL-Zがうまく動かない場合のために、":suspend"コマンドも用意しています。vim
をフォアグラウンドに戻すことを忘れないでください。でないと折角の変更内容を全
て失ってしまうことになります。

なお、この機能はUnixでのみサポートされます。他システムのvimでは新たに別シェ
ルを起動します。これでもシェルのコマンドを使えるという機能に違いはありません。
ただ、vimの呼び出し元のシェルではなく新たなシェルだという違いがあります。
GUI版の場合は、vimを起動したシェルに戻ることができません。その代わりCTRL-Zを
押すとvimのウィンドウを最小化(ウィンドウシステムやOSによって表現は違います)
します。

==============================================================================
*21.2*	シェルコマンドの実行

vimに単一のシェルコマンドを実行させるには":!{command}"を使います。例えばディ
レクトリの一覧を得るにはこのようにします。 >

	:!ls	(Unix環境)
	:!dir	(MS-DOS/MS-Windows環境)

vimは外部コマンドを実行します。 コマンドの実行が終わると<Enter>キー入力を促
すメッセージが出ます。こうすることで編集中の文章に戻る前にコマンドの実行結果
をちゃんと確認できるわけです。
"!"コマンドは他の場所でも外部コマンドを動かすのに使えます。次の概略をご覧く
ださい。

	:!{program}		{program}を起動する
	:r !{program}		{program}を起動し、その出力をバッファに取込む
	:w !{program}		現在の文章を標準入力として{program}を起動する
	:[range]!{program}	指定の範囲を{program}の標準入力とする

"!{program}"の前に範囲指定があるのとないのとで大違いである点には気を付けてく
ださい。範囲指定がなければ、単純にプログラムを実行するだけですが、範囲指定が
あると、その範囲の文字列はそのプログラムでフィルタ処理するのです。

プログラムの全行を実行するのもこの方法で可能です。しかし、シェルを使う方がよ
り良いでしょう。新たなシェルを起こすのはこのコマンドです。 >

	:shell

これはCTRL-Zによるサスペンドと似ていますが、":shell"では新たなシェルを起動さ
せる点が異なります。

GUI版を使っている時にはシェルは標準入出力用にvimのウィンドウを使います。vim
は端末ソフト(Terminal emulator)ではないので、うまく動かないかも知れません。
困った場合は'guipty'オプションを逆にしてみてください。それでもうまくいかない
場合は、新しい端末ウィンドウを開いてそこでシェルを動かしてください。例えば、
次のようにします。 
>
	:!xterm&

==============================================================================
*21.3*	viminfoで情報を記憶する

しばらく編集作業をしていると、いろいろなファイルにレジスタやマークを定義した
り、手間をかけて作ったコマンド行がコマンド履歴に入ったりします。でもvimを終
了すると、全てがなくなってしまいます。でも、実はこれを復元できるんです！

次のような情報を保持するために設計されたviminfoというファイルがあります。

	・コマンド行と検索パターンの履歴
	・レジスタに登録された文字列
	・各ファイルに定義されたマーク
	・バッファリスト
	・グローバル変数

vimを終了する都度、上の内容をviminfoというファイルに保存します。vimを再起動
する時にviminfoの内容を読み込んで上の項目を再設定します。

'viminfo'オプションはデフォルトでonになっていて、一定の項目数まで情報を保存
します。この項目数をもっと大きく設定することもできます。それにはこのような
コマンドを使います。 >

	:set viminfo=string

"string"の部分には何を保存したいかを指定します。これは１文字のオプション指定
と引数という文法です。オプションと引数のペアはカンマ(,)で区切ります。
独自のviminfo指定を行う方法を順を追って見ていきましょう。最初に ' オプション
はマークを覚えておくファイルの数を指定するのに使います。このオプションに丁度
良い数字を決めましょう(例えば1000)。この時点ではこのようなコマンド指定となり
ます。 >

	:set viminfo='1000
<
 f オプションはグローバルマーク(A～Zと0～9)を覚えておくかどうかを指定し
ます。ここに0を指定すると何も保存しません。何も指定しないか、1を指定した場合
はグローバルマークを保存します。これを保存するのであれば、コマンドはこのよう
になります。 >

	:set viminfo='1000,f1

次に < オプションは各ファイルのレジスタを合計でいくつ覚えておくかを指定しま
す。デフォルトでは全ての行を保存します。これが0であれば何も保存しません。何
千行もの(使うこともなく、vimの起動を遅くするだけの)データをviminfoファイルに
追加しても仕方がないので、ここでは最大500個とします。 >

	:set viminfo='1000,f1,<500
<
	Note:
	" 記号はコメントの開始記号ですので、必ず直前にバックスラッシュを付
	けてクオートしないといけません。

上記以外にも次のようなオプションがあります。
	:	コマンド行の履歴として保存する行数 
	@	入力行の履歴として保存する行数
	/	検索コマンドの履歴として保存する行数
	r	マーク情報を保存しないリムーバブルメディアの指定(このオプショ
		ンは何度でも指定できます)
	!	全てが大文字で、小文字を含まないグローバル変数
	h	起動直後は'hlsearch'によるハイライト表示をしない
	%	バッファリスト(これはvimをファイル引数なしで起動した時のみ復
		元します)
	c	文章を'encoding'の指定に従って変換する
	n	viminfoファイルの名前を指定(このオプションは最後にしか指定で
		きない)

さらに詳しい内容は'viminfo'オプションや|viminfo-file|をご覧ください。

vimを複数個立ち上げている場合は、最後に終了したVimの情報が記憶されます。ですか
ら、それ以前に終了したVimが保存した内容は失われてしまいます。どの項目も記憶さ
れるのは1度きりなのです。


前回の場所に戻る
----------------

ファイルの編集の途中で休暇で抜ける時間になってしまった場合、vimを終わって、
休暇を満喫している時は仕事のことなどすっかり忘れてしまいます。２週間経って仕
事に戻ったら、vimを立ち上げて、こう入力しましょう。
>
	'0

すると、最後にvimを終わった時の場所に戻ってくれます。これで仕事が続けられま
すよね。
vimを終了する時に毎回マークを生成します。直前の終了時のが '0 です。その前の
'0 は '1 となり、 '1 は '2 という具合です。最後の '9 は消えてしまいます。
":marks"コマンドは '0 ～ '9 がどこを示しているかを見るのに便利です。


MOVE INFO FROM ONE VIM TO ANOTHER
１つのvimから他のへ情報移動(?)
------------------------------

":wviminfo"と":rviminfo"コマンドはvimの動作中にviminfoを保存したり、復元した
りするのに使えます。これは、vimが２つ起動している時にレジスタの内容を交換す
る時に便利です。１つ目のvimで次のようにして保存します。 >

	:wviminfo! ~/tmp/viminfo

そして２つ目のvimではそれを読み込みます。 >

	:rviminfo! ~/tmp/viminfo

分かりきったことでしょうが、"wviminfo"の"w"は"write"のことで、"rviminfo"の
"r"は"read"のことです。
":wviminfo"に ! 記号を加えて、強制的に既存ファイルに上書きすることもできま
す。これを省略した場合はファイルが存在すれば、情報をマージしてファイルに保存
します。
また":rviminfo"に ! 記号を付けた場合は、ファイルの全情報を使うという意味にな
りますので、ファイルの内容を現在の設定状態に上書きします。! なしの場合はファ
イルの内容のうち現在使用していないものだけをセットします。
上のコマンドは情報を保存し、後で再利用するのにも使えます。例えば、viminfo専
用のディレクトリを作っておいて、目的ごとに使い分けるといったことも可能です。

==============================================================================
*21.4*	セッション

編集作業を一日中やっていて、まだ続きがあるような場合、中断個所を明日になって
思い出せるように、どこまでやったかを記録しておきたいことでしょう。これは編集
中のセッションを保存して、翌日にそれを復元すれば可能です。
vimのセッションにはあなたが編集していた全ての情報を含んでいます。ここには、
例えばファイルリスト、ウィンドウのレイアウト、グローバル変数、オプションetc
といった情報を含んでいます。(正確には、後述するように'sessionoptions'で指定
しているものが復元の対象となります)
このコマンドでセッションファイルを作れます。 >

	:mksession vimbook.vim

後でこのセッション情報を復元するには、こうします。 >

	:source vimbook.vim

vimを起動する時に指定のセッションを復元するには、起動時オプションをこのよう
に指定します。 >

	vim -S vimbook.vim

これはvimの起動時に特定のファイルを読み込むように指示するものです。'S'はセッ
ションの意味です。（って、実は"-S"を使うとどんなvimスクリプトでも(sourceコマ
ンド同様に)読み込みできます。ですからこれは"source"の意味とも言えます)

開いていたウィンドウは同じ大きさで同じ場所に開きます。マップやオプション値も
保存時と同じ値になります。
正確には、復元される情報は'sessionoptions'オプションの内容によります。デフォ
ルト値は"blank,buffers,curdir,folds,help,options,winsize"となります。

	blank		空のウィンドウ
	buffers		ウィンドウになっていないものも含めて全バッファ
	curdir		現ディレクトリ
	folds		手動で作成したものも含めてフォールド
	help		ヘルプウィンドウ
	options		全オプションとマップ
	winsize		ウィンドウの大きさ

好みに応じて変更してください。例えば、vim自身のウィンドウの大きさも復元した
いのであれば、このようにします。 >

	:set sessionoptions+=resize


こっちもセッション、あっちもセッション
--------------------------------------

セッションが便利に使えるわかりやすい例を挙げましょう。例えば複数のプロジェク
トに参加している時がそうです。セッションファイルを"~/.vim"ディレクトリ下に保
存するとしましょう。現在の作業が"secret"プロジェクトで、それを別の"boring"と
いうプロジェクトに切り換えてみましょう。 >

	:wall
	:mksession! ~/.vim/secret.vim
	:source ~/.vim/boring.vim

最初の":wall"は変更のあったファイルを全部保存します。次に現在のセッション情
報を":mksession!"で保存します。これは前回のセッションファイルに上書き保存さ
れます。次回にこの"secret"セッションをロードすれば、ここで保存した時の状態か
ら作業を始められます。最後の１行で新たに"boring"セッションをロードしています。

ヘルプウィンドウを開いたり、ウィンドウ分割、ウィンドウクローズなどを繰り返し
てウィンドウのレイアウトがぐちゃぐちゃになった時は、最後に保存したセッション
に戻るのにも使えます。 >

	:source ~/.vim/boring.vim

結局セッションファイルは、現在の状況を保存して次回に続きを行うという目的にも
ある種のスタート地点として使う目的にも、どちらでも好きなように使えるというこ
とです。
これ以外にも、好みのウィンドウのレイアウトを作っておいてそれを保存するという
目的にもセッションが使えます。これならいつでも好きな時にそのレイアウトに戻る
ことができあますからね。
例えば、こんなのは使いやすいレイアウトです。

	+----------------------------------------+
	|		   VIM - main help file  |
	|					 |
	|Move around:  Use the cursor keys, or "h|
	|help.txt================================|
	|explorer   |				 |
	|dir	    |~				 |
	|dir	    |~				 |
	|file	    |~				 |
	|file	    |~				 |
	|file	    |~				 |
	|file	    |~				 |
	|~/=========|[No File]===================|
	|					 |
	+----------------------------------------+

これはヘルプがウィンドウの上部にあり、いつでも参照できます。左端の縦長のウィ
ンドウはファイルエクスプローラです。ファイルエクスプローラはディレクトリ内容
を見たりできるvimプラグインです。ここで編集するファイルを選択できます。これ
については次章で詳しく説明します。
このウィンドウをvim起動直後に作るには次のようにします。 >

	:help
	CTRL-W w
	:vertical split ~/

ウィンドウの大きさはお好みでどうぞ。さてここでセッションを保存します。 
>
	:mksession ~/.vim/mine.vim

これで、次のようにすればいつでもこのレイアウトが使えるようになりました。 >

	vim -S ~/.vim/mine.vim

Hint: エクスプローラウィンドウに出ているリストで選択したファイルを右側の空
ウィンドウで開くには、カーソルをファイル名のところに動かして"O"を押します。
マウスでダブルクリックしても同じ結果となります。


UnixとMS-Windows 
----------------

ある日はMS-Windows上で作業を行い、また別の日はUnix上で作業を行うというのが必 
要な方もいるでしょう。あなたがそうなら、'sessionoptions'に"slash"と"unix"を
追加することを考えましょう。こうすれば、保存されるセッションファイルはどちら
のシステムでも使える形式になります。あなたのvimrcファイルに次の行を追加しま
しょう。 >

	:set sessionoptions+=unix,slash

これでvimはUnix形式を使うようになりますから、MS-Windows側のvimはUnixファイル
の読み書きができるようになります。ただしUnix側のvimはMS-Windows形式のセッショ
ンファイルを読み込めません。
同じように、MS-Windows側のvimはディレクトリの区切りの"/"を理解しますが、Unix
側のvimは"\"を理解できません。


セッションとviminfo
-------------------

セッションにはいろんなものが保存されますが、マークやレジスタ、コマンド行の履
歴などは含まれません。こういった情報を保存するにはviminfo機能を使うしかあり
ません。
たいていはセッションを使いたいシチュエーションはvininfoを使いたい時と違って
いるようです。例えば、他のセッションに切り換えたい場合でもコマンドの履歴はそ
のままにしておきたいでしょうし、あるセッションでレジスタにヤンクした文字列を
他のセッションにペーストしたい場合もそうでしょう。
セッションにviminfoの内容も保存したほうがよい場合もあるかも知れませんが、そ
れはその時に手動でやるしかありません。こんな感じです。 >

	:mksession! ~/.vim/secret.vim
	:wviminfo! ~/.vim/secret.viminfo

これを復元する時も同様です。 >

	:source ~/.vim/secret.vim
	:rviminfo! ~/.vim/secret.viminfo

==============================================================================
*21.5* ビュー

セッションではvim全体に関する保存を行います。１つのウィンドウについてのプロ
パティだけを保存したい場合には「ビュー」を使います。
ビューを使うのは、特定の方法でファイルを編集する時のためです。例えば、行番号
を表示するために'number'オプションを定義し、新たなフォールドを定義するとしま
す。セッションと同じようにこのファイル上のビューを憶えておき、後で復元して利
用できます。実際、セッションの保存というのは各ウィンドウのビューを保存してい
ることに他なりません。
ビューを使うには２つの基本的な方法があります。１つ目はvimにビューファイルの
名前を拾わせる方法です。後で同じファイルを編集する時にビューを復元することが
できます。カレントウィンドウのビューを保存するには、このようにします。 >

	:mkview

vimはビューをどこに置くか自分で判断します。同じファイルを後で編集する時には
このコマンドでビューを呼び戻せます。 >

	:loadview

ね、簡単でしょ？
さて、今度は'number'オプションをonにせず、全てのフォールドを開いた状態でファ
イルを見たいとします。まずオプションをそのように設定します。次にこのビューを
保存しましょう。 >

	:mkview 1

ご想像通り、これを呼び戻す時はこうなります。 >

	:loadview 1

さて、これで":loadview"の引数の有無で２つのビューを使い分けることができます。
１つのファイルにつき最大で10のビューを定義できます。そのうち１つは番号なしで
のこりの９つは1～9の番号で指定します。


名前付きのビュー
----------------

２つ目の基本的な方法はあなたが選んだ名前でファイルのビューを保存する方法です。
このビューは他のファイルを編集する時にもロードできます。vimはビューで指定さ
れたファイルに切り換えます。ですから、これを使うと以前保存した時のファイルに
素早く切り換えることができます。
例えば、現在のファイルをビューに保存するにはこのようにします。 >

	:mkview ~/.vim/main.vim

それを戻すのはこうです。 >

	:source ~/.vim/main.vim

==============================================================================
*21.6*	モード行

あるファイルを編集する時に、いつもそのファイル用のオプションを設定したいこと
もあるでしょう。毎回そのコマンドを手入力するのはバカバカしい話です。セッショ
ンやビューを使ってもいいのですが、そのファイルを他のメンバと共有している場合
は定義を共有できません。
こういった場合はファイルにモード行を追加すれば解決します。これはvimにオプショ
ンの値を指定のファイルに対してだけ適用するように通知する行データです。
Ｃプログラムでのインデント設定を４にするというのが典型的な使い方でしょう。
この場合なら、'shiftwidth'オプションを4に設定します。このモード行は次のよう
にします。

	/* vim:set shiftwidth=4: */ ~

上の行をファイルの先頭５行か末尾５行のどこかに置きます。このファイルを編集し
ようとすると、'shiftwidth'が４桁に設定されているのがわかるでしょう。他のファ
イルを編集すると、またデフォルトの８桁に戻ります。
一部のファイルではモード行をヘッダに置くのがフィットします。そういう場合は
ファイルの先頭に置きましょう。テキストファイルなど、通常の文章の中に入れる
場合ならファイルの末尾に置くのがよいでしょう。
'modelines'オプションを使うとファイルの先頭と末尾から、それぞれ何行分をモー
ド行を含みうるかを指定できます。これを10行とするにはこのようにします。 >

	:set modelines=10

'modeline'オプションはモード行の機能を禁止するのに使います。これはrootとして
作業を行う場合や編集しようとしているファイルが(セキュリティ的に)信用できない
場合に使います。 >

	:set nomodeline

モード行の内容は次の形式で記述します。

	any-text vim:set {option}={value} ... : any-text ~

vimが使う部分の前後にある"any-text"には、どんな文字列が来ても構いません。
これはモード行の内容をコメント化したりするのに使います。最初の例であれば、
/* と */ を使っています。
" vim:"の部分で、vimはこれがモード行であることを認識します。vimの直前に空白
文字があるか、vimが行頭で始まっていなければなりません。ですから"gvim:"といっ
た記述ではうまく動きません。
":"に挟まれた部分は":set"コマンドです。これはvimの中で":set"コマンドを入力す
るのと同じように働きます。ただし":"記号を使う時はバックスラッシュ(\)でクオー
トする必要があります。(これをしないとここがモード行の最後とみなされてしまい
ます)

もう一つの例です。

	// vim:set textwidth=72 dir=c\:\tmp:  use c:\tmp here ~

ここでは最初のコロンの前にバックスラッシュがあります。ですからこれは":set"コ
マンドの一部です。ですが、２つ目のコロン以降はコメントとみなされますので
無視されます。

もっと詳しいことは|modeline|をご覧ください。

==============================================================================

Next chapter: |usr_22.txt| 編集するファイルを見つける 

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
