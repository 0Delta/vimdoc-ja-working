COMMENT: ファイルの改行、ネットワーク、暗号、バイナリ、圧縮
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>

*usr_23.txt*	For Vim version 6.3.  Last change: 2001 Sep 03

		     VIM USER MANUAL - by Bram Moolenaar

			    他の種類のファイルを編集する


この章では通常ファイル以外のファイルの編集方法を述べます。vimでは圧縮された
ファイルや暗号化されたファイルの編集ができます。時にはインターネット経由でア
クセスする必要もあるでしょう。また、多少の制限はありますが、バイナリファイル
の編集もやってのけます。

|23.1|	DOS形式、Mac形式、Unix形式のファイル
|23.2|	インターネット上のファイル
|23.3|	暗号化
|23.4|	バイナリファイル
|23.5|	圧縮済ファイル

     Next chapter: |usr_24.txt|  素早く挿入する
 Previous chapter: |usr_22.txt|  編集するファイルを見つける
Table of contents: |usr_toc.txt|

==============================================================================
*23.1*	DOS形式、Mac形式、Unix形式のファイル

ずっとずっと以前、旧いテレタイプを使っていた頃は新しい行を始めるのに２つの文
字(コード)を使っていました。１つは最初の桁位置に戻すための文字<CR>(キャリッ
ジリターン、復帰ともいう)で、もう１つは用紙を１行送る文字<LF>(ラインフィード
改行ともいう)です。
コンピュータが登場した頃、記憶装置はとても高価なものでした。そこで行末を示す
だけのために２つもの記憶領域を使うことはない、と判断する人々が出てきたのです。
UNIXを設計した人々は行末を示す記号として<LF>だけとすることを決め、Macintosh
を設計した(Appleの)人々は<CR>を標準としました。またMS-DOS(MS Windowsも)の場
合は古来の<CR><LF>を使い続けました。
このような事情があるため、あるシステムのファイルを他のシステムに持っていこう
とすると、ラインブレイク問題が持ち上ります。vimは自動的にファイル形式を認識
して、うまく処理してくれます。
'fileformats'オプションには新しいファイルを編集する時にチェックすべきフォー
マットを指定できます。例えば、次のコマンドは最初にUnix形式、２番目にMS-DOS形
式のチェックをするという指示になります。 >

	:set fileformats=unix,dos

ファイルを編集する時に表示されるメッセージでファイル形式がわかります。そのシ
ステム用のファイル形式の時には何も表示されません。つまりUnix形式のファイルを
Unixシステムで編集するのは特別なことはないからです。しかしDOS形式のファイル
を編集する時には、次のようなメッセージを表示します。

	"/tmp/test" [dos] 3L, 71C ~

Macintosh形式なら"[mac]"と表示します。
検出したファイル形式は'fileformat'オプションに格納します。今のファイル形式を
確認するには次のコマンドを使います。 >

	:set fileformat?

vimが使うのは次の３つの名前です

	unix		<LF>
	dos		<CR><LF>
	mac		<CR>


Macintoshフォーマットを使う
---------------------------

Unixでは、<LF>が改行です。行の途中に<CR>文字がくることは普通はありません。余
談ですが、Unixでもvi(vimも)スクリプトでは<CR>が頻繁に現れます。
一方、Macintoshでは<CR>が改行記号ですから行の途中に<LF>文字が出てくることも
ありえます。
ということは、<CR>と<LF>の両方を含んでいるようなファイルがMac形式かUnix形式
かを100%確実には区別できないのです。ですから、Unix上ではMac形式のファイルを
編集することはないものとみなし、このタイプのファイルチェックを行いません。
それでも、Mac形式をチェックしたいのであれば、'fileformats'オプションに"mac"
を追加してください。 >

	:set fileformats+=mac

こうすれば、ファイル形式のチェックを行います。ただ、vimがミスをする可能性が
あることはお忘れなく。


フォーマットルールの上書き (OVERRULING THE FORMAT)
--------------------------

MS-DOS形式のファイルを古き良き時代のviで編集すると各行の行末に^M(＝<CR>)の文
字が表示されます。自動検出はこうならないようにしてくれます。でも、敢えて^Mを
表字したいのであれば、フォーマットルールを上書きする必要があります。 >

	:edit ++ff=unix file.txt

コマンドの中で"++"とオプションを指定して、オプションをデフォルト以外の値に設
定することができます。"++ff"の"ff"は'fileformat'のことです。"++ff=mac"だとか
"++ff=dos"といった指定もできます。
ただし、これはどのオプションでも使えるわけではありません。現在のところ"++ff"
と"++enc"だけを実装してあります。"++fileformat"と"++encoding" も使えます。


フォーマット変換
----------------

'fileformat'オプションを使ってあるフォーマットのファイルを別フォーマットに変
換することができます。例えば、MS-DOS形式のREADME.TXTというファイルがあり、そ
れをUNIX形式に変換したいとします。まずMS-DOS形式のファイルを編集します。 >

	vim README.TXT

vimはこれがDOS形式であることを認識します。次にこのファイル形式をUNIX形式に変
換します。 >

	:set fileformat=unix
	:write

ファイルはUnix形式で保存されます。

==============================================================================
*23.2*	インターネット上のファイル

誰かからファイルのある場所をURLで指定したＥメールを受けとったとします。それ
がこのようなメールだったとします。

	そのことならここに情報があったよ。 ~
		ftp://ftp.vim.org/pub/vim/README ~

何らかのアプリケーションを使ってこのファイルをダウンロードし、自分のマシンに
保存してからvimで編集する方法もあります。
もっと簡単な方法があります。カーソルをそのURLのどこかに動かしてこのコマンド
を入力するのです。 >

	gf

運が良ければ、vimはファイルをダウンロードするアプリを見つけ出して、ファイル
をダウンロードし、それを編集します。別のウィンドウでそのファイルを開くのであ
れば、"CTRL-W f"コマンドを使います。
エラーメッセージが出てうまくいかない場合は、次のどれかでしょう。
  ・URLが間違っている。
  ・そのファイルをダウンロードする権限がない。
  ・ネットワークがダウンしている。
  ・などなど
残念ながら、エラーの理由を正しく説明することはほとんど不可能です。ファイルの
ダウンロードを手作業で行いたい場合もあるかもしれません。

インターネット経由でのファイルアクセスは netrw プラグインで行います。今のと
ころ、次のような形式のURLを取り扱うことができます。

	ftp://		ftpを使う
	rcp://		rcpを使う
	scp://		scpを使う
	http://		wgetを使う (取り込みのみ)

vimは自分自身で通信を行うわけではありません。あなたのマシン上で使用可能なア
プリに依存しています。ほとんどのUnixシステムでは"ftp"と"rcp"は標準で用意され
ています。"scp"と"wget"はインストールされていないかもしれません。

vimのコマンドで、ファイルの編集を開始するコマンドは上で述べたURLを認識します。
例えば、":edit"とか":split"などがそういったコマンドです。保存コマンドでもURL
は使えます。但し、"http://"は保存には使えません。

パスワードの件も含めて、もっと詳しいことについては|netrw|をご覧ください。

==============================================================================
*23.3*	暗号化

情報によっては、自分自身で管理した方がよいものもあります。例えば、生徒も使う
マシン上でテスト問題を作成する場合を考えてください。テストが始まる前に問題を
読む方法を探し当ててしまうような賢い生徒は困りものです。vimではファイルを暗
号化できます。これで多少なりとも防御になるでしょう。

暗号化したファイルを編集するにはvimの起動時に"-x"パラメタを指定します。例え
ば次の通りです。 >

	vim -x exam.txt

vimは暗号を解く時に、暗号化に使った鍵の文字列の入力を促します。

	Enter encryption key: ~

気をつけて秘密鍵を入力します。入力した文字は表示されず、代わりにアスタリスク
(*)を表示します。入力を間違った時にはエラーを発生するのではなく、次のような
再入力メッセージを表示します。

	Enter same key again: ~

正しく入力すると、通常通りファイルを編集し、ないしょのことを全部書き込んでく
ださい。ファイルの編集を終え、vimを終了する時にはそのファイルは再度暗号化して
保存します。
vimでこのファイルを再編集する時には、同じ鍵文字列の再入力を求められます。この
時は"-x"パラメタは不要です。もちろん":edit"コマンドも使えます。vimはファイル
に「魔法の文字列(magic string)」を埋め込むので、それが暗号化されているかどう
かを識別できるのです。
他のプログラムからこのファイルを見ようとすると、全くのゴミファイルのように見
えます。またvimでファイルを編集する時に違った鍵文字列を与えた場合もゴミファ
イルに見えます。vimではその鍵文字列が正しいかどうかをチェックする方法があり
ません。(これを実現するのは暗号を破るよりもはるかに難しいのです)


暗号化のon/offの切り換え
------------------------

ファイルの暗号化を止めるには'key'オプションの内容を空文字列に設定します。
>
	:set key=

この指定の後にファイルを保存すると暗号化せずに保存します。暗号化のために、こ
の'key'オプションを設定すると、パスワードが平文で表示されてしまいます。
これだと誰でも肩越しにパスワードを盗むことができてしまいます。
これを避けるため":X"コマンドを提供しています。これだと"-x"パラメタを指定した
時と同じように暗号化の鍵文字列を聞いてきます。 >

	:X
	Enter encryption key: ******
	Enter same key again: ******


暗号化の限界
------------

vimで利用している暗号アルゴリズムは決して強固なものではありません。お手軽な
クラッカーから内容を保護するには十分ですが、暗号のエキスパートがじっくり時間
をかけて解析するのに耐えられる程ではありません。
またスワップファイルが暗号化されない点も忘れてはいけません。Unixのようなマル
チユーザシステムではスーパーユーザ権限があれば、あなたが編集している文章を
スワップファイルを使えば暗号化していない状態で読めてしまいます。
他の人がスワップファイルを見れないようにするため、敢えてスワップファイルを使
わないという方法もあります。vimを実行する時に"-n"パラメタを指定すれば、スワッ
プファイルは作らなくなります（その代わり何でもメモリに置こうとします）例えば
暗号化した"file.txt"をスワップファイルなしで編集するには、このようなパラメタ
で起動します。 >

	vim -x -n file.txt

既にファイルを編集中なら、こうすればスワップファイルを使わなくなります。 >

	:setlocal noswapfile

スワップファイルがないということは、リカバリが不可能だということです。編集結
果を失わないように普段よりもちょっと多い目に保存コマンドを実行する方がよいで
しょう。

メモリ上ではファイルの内容は暗号化されません。マシンのメモリ内容を見る権限が
あれば、誰でもファイルの内容を知ることは可能です。viminfoファイルを使ってい
るのであれば、テキストレジスタの内容も暗号化されずに書き込まれる点にご注意く
ださい。
もし本気でファイル内容をガードしたいのなら、ネットワークから切り離したマシン
で編集作業を行い、もっと強力な暗号化ツールで暗号化して、そのマシンを使わない
時は金庫に入れて保管してください。

==============================================================================
*23.4*	バイナリファイル

Vimではバイナリファイルを編集することもできます。それ専用に作られているわけで
はないので、若干の制限があります。それでもファイルを読み込み、バイトシーケンス
を変更し、結果を保存することはできます。ただしバイナリファイルの編集では1バイ
トを変更しただけでも、ファイルとしての意味が全く別のものになってしまう場合があ
ります。
Vimが変に気をきかさないようにするためには、vimを"-b"パラメタ付きで起動します。
>
	vim -b datafile

これは'binary'オプションをonにします。その結果、予期しないような副作用が起こ
らないようにしてくれます。例えば、'textwidth'を０に初期化します。これは行桁
数を自動的に揃えるのを避けるのに必要です。ファイルは常にUnix形式で読み込みま
れます。

バイナリモードはプログラム内のメッセージを変更する時などに使えます。文字数を
増やしたり減らしたりしないように気を付けてください。そうでないとプログラムが
動かなくなってしまうかもしれません。"R"の置換モードを使うのがよいでしょう。

ファイル内の文字の多くが非表示文字となっているでしょう。これを16進数で見るに
は、このようにします。 >

	:set display=uhex

この他に、調べたい文字にカーソルを移動し"ga"コマンドを使うことで、その値を知
る方法もあります。例えば、カーソルが<Esc>の上にあれば、次のような表示となり
ます。

	<^[>  27,  Hex 1b,  Octal 033 ~

ファイルに多くの改行コードを含んでいるかも知れません。概略を見たいのなら、
'wrap'オプションをoffにします。 >

	:set nowrap


バイト位置
----------

今現在、ファイルの何バイト目にいるかを知るには、このコマンドを使います。 >

	g CTRL-G

出力はやや長くなります。

    Col 9-16 of 9-16; Line 277 of 330; Word 1806 of 2058; Byte 10580 of 12206 ~

最後の２つの数字がファイル中のバイト位置と、全バイト数です。例えばです、
'fileformat'の設定で、どのように改行の数が変化してしまうかを数値で見ることが
できます。
ファイルの特定のバイト位置に移動するには"go"コマンドを使います。例えば、2345
バイト目にジャンプしたければ、このようにします。 >

	2345go


XXDを使う
---------

本物のバイナリエディタでは内容を２通りで表示してくれます。１つは文字そのもの
で、もう１つは16進数表記です。vimでも標準添付の"xxd"プログラムを使ってファイ
ルを変換すれば、同じことができます。
まず、ファイルをバイナリモードで開きます。 >

	vim -b datafile

次にxxdを使って16進数ダンプ形式のファイルにします。 >

	:%!xxd

ファイル内容は次のようになります。

	0000000: 1f8b 0808 39d7 173b 0203 7474 002b 4e49  ....9..;..tt.+NI ~
	0000010: 4b2c 8660 eb9c ecac c462 eb94 345e 2e30  K,.`.....b..4^.0 ~
	0000020: 373b 2731 0b22 0ca6 c1a2 d669 1035 39d9  7;'1.".....i.59. ~

これで、ファイルを好きなように編集することができます。vimはこれを普通のテキ
ストと同じように扱います。16進数部分を変更しても右側の文字表示は変りませんし
その逆も同様です。
>
	:%!xxd -r

xxdは16進数の部分だけに着目して処理を行います。右側の文字表示部分を変更して
も無視します。

See the manual page of xxd for more information.
さらに詳しいことについては"xxd"のマニュアル(man pages)をご覧ください。

==============================================================================
*23.5*	圧縮済ファイル

これは簡単です。圧縮してあるファイルであっても他のファイルと全く同じように編
集できます。ファイルを編集する時に、"gzip"プラグインが解凍の面倒を見てくれま
す。また保存する時はその逆をやってくれます。
現バージョンでサポートしている圧縮形式は次の通りです。

	.Z	compress
	.gz	gzip
	.bz2	bzip2

実際の圧縮／解凍作業には上に掲げたプログラムを使います。形式によっては最初に
プログラムをインストールする必要があるかもしれません。

==============================================================================

Next chapter: |usr_24.txt|  素早く挿入する

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
