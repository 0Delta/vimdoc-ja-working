COMMENT: 全オプション解説
STATUS: finished 6.1
TRANSLATOR: 野田 開 <g340299@mail.ecc.u-tokyo.ac.jp>

*options.txt*   For Vim version 6.1.  Last change: 2002 Apr 09


		  VIM REFERENCE MANUAL    by Bram Moolenaar


オプション						*options*

1. オプションの設定			|set-option|
2. オプションの自動設定			|auto-setting|
3. オプションの要約			|option-summary|

オプションの概要については、help.txt |option-list| を参照すること。

Vimには、特別な働きをさせるための多くの内部変数とスイッチがある。それらのオプ
ションには3種類ある。
	切替オプション boolean		オンかオフかのどちらかの値をとる
	数値オプション number		数値の値を取る
	文字列オプション string		文字列の値を取る

(訳注: このヘルプの中で多く出てくる語句で、分かりにくいものを説明する。

*ローカルな:
	あるバッファまたはウィンドウにのみ適用されるような、という意味。
*ローカルオプション:
	あるバッファまたはウィンドウ内の設定のみを変え、その他のバッファまたは
	ウィンドウの設定に影響しないようなオプション。
*ウィンドウについてローカルな:
	あるウィンドウにのみ適用されるような、という意味。バッファについてロー
	カルな、も同様な意味を持つ。
*グローバルな:
	Vim全体に適用されるような、または、Vim全体で共通の値を使うような、とい
	う意味。
上の4項目については |option-summary| も参照。
*バックスラッシュ:
	日本語Windozeで使われる文字のうち、いわゆる半角文字または英数字では、
	バックスラッシュ＼ (左は実は全角バックスラッシュ。これではだめ) の代わ
	りに円記号\が使われる。

訳語で、さらに相応しいものがあればご提案を下さい。)
==============================================================================
1. オプションの設定					*set-option*

							*:se* *:set*
:se[t]			既定値と違う設定のオプションを全て表示する。

:se[t] all		ターミナルのオプション以外の全てのオプションを表示する。

:se[t] termcap		ターミナルのオプションを全て表示する。Note GUIバージョ
			ンでは、キーコードは表示されないので注意すること。なぜ
			なら、キーコードは内部的に生成され、変更が不可能だから
			だ。それに、GUIバージョンでターミナルコードを変更する
			のは便利とは言えない...

:se[t] {option}?	{option} の値を表示する。

:se[t] {option}		切替オプション: セット、すなわちオンに切り替える。
			数値オプション: 値を表示する。
			文字列オプション: 値を表示する。

:se[t] no{option}	切替オプション: リセット、すなわちオフに切り替える。

:se[t] {option}!   または
:se[t] inv{option}	切替オプション: オンとオフを切り替える。 {Vi にはない}

				*:set-default* *:set-&* *:set-&vi* *:set-&vim*
:se[t] {option}&	オプションを既定の値に設定する。オプションによっては、
			オプション 'compatible' の値に影響を受けるかもしれない。
			{Vi にはない}
:se[t] {option}&vi	オプションをViでの既定値に設定する。
			{Vi にはない}
:se[t] {option}&vim	オプションをVimでの既定値に設定する。
			{Vi にはない}

:se[t] all&		ターミナルのオプション以外の全てのオプションを既定の値
			に設定する。オプション 'term', 'lines' と 'columns' の
			値は変更されない。 {Vi にはない}

:se[t] {option}={value}		または
:se[t] {option}:{value}
			数値および文字列オプションの値を {value} に設定する。
								*:set-args*
			数値オプションの値は、10進数、(0x を頭に付けて) 16進数、
			または ('0' を頭に付けて) 8進数で指定できる (16進数と8
			進数は、strtol() 関数を持つマシンでのみ利用可能)。
			オプション 'wildchar' に指定された文字 ('compatible' が
			オンになっているなら、既定では <Tab> か CTRL-E である)
			を打ち込むと、古い値を挿入できる。|cmdline-completion|
			を参照。
			{option} と '=' の間には空白を入れることができる。それ
			らは無視される。'=' と {value} の間に空白を入れてはい
			けない。{value} 内での空白やバックスラッシュの使用に関
			しては、 |option-backslash| を参照すること。

:se[t] {option}+={value}				*:set+=*
			数値オプションに対しては {value} だけその値を増す。文
			字列オプションに対しては後ろに {value} を追加する。オ
			プションがコンマ区切りのリストであるときは、値が空でな
			い限りコンマが前に付け加えられる。オプションがフラグの
			リストであるときは、冗長で無駄なフラグは取り除かれる。
			そうでないときは、重複した値に関してチェックはなされな
			い。それを防ぐためには、先に値を取り除いてからこのコマ
			ンドを使えばよい。
			例: >
				:set guioptions-=T guioptions+=T
<			上の |:set-args| も参照すること。
			{Vi にはない}

:se[t] {option}^={value}				*:set^=*
			数値オプションに対してはその値を {value} 倍する。文字
			列オプションに対しては前に {value} を追加する。オプショ
			ンがコンマ区切りのリストであるときは、値が空でない限り
			コンマが付け加えられる。
			上の |:set-args| も参照すること。
			{Vi にはない}

:se[t] {option}-={value}				*:set-=*
			数値オプションに対しては {value} だけその値を減らす。
			文字列オプションに対しては {value} の値を (それが含ま
			れていたら) 取り除く。そのとき {value} が含まれていな
			くても、警告やエラーは現れない。オプションがコンマ区切
			りのリストであり、取り除くオプションが唯一の値でない限
			り、コンマも削除される。オプションがフラグのリストであ
			るときは、{value} は正確に指定しなければならない。問題
			が起こるのを避けるために、フラグを取り除くときは1個ず
			つ指定すること。
			上の |:set-args| も参照すること。
			{Vi にはない}

1回のコマンド ":set" に対し、複数の {option} を引数に指定できる。例: >
	:set ai nosi sw=3 ts=3
引数の中にエラーがあると、エラーメッセージが現れ、エラーの元になったオプション
以降は無視される。

							*:set-verbose*
オプション 'verbose' が 0 でないなら、オプションの値を表示する際、同時に、その
値が最後に設定されたのはどこであったかも分かる。例: >
	:verbose set shiftwidth cindent?
	  shiftwidth=4
		  Last set from modeline
	  cindent
		  Last set from /usr/local/share/vim/vim60/ftplugin/c.vim
これは特定のオプション名が指定されたときのみ機能する。コマンド ":set all" や、
引数のないコマンド ":set" ではメッセージが現れない。
オプションが手動で設定されていると、"Last set" メッセージは現れない。ある名前
のローカルオプションが2通りの値を持つことはあり得ないので、メッセージはオプショ
ン名を表示しても、必ずしもその値までは表示しない。
オプションが関数やユーザコマンド、オートコマンドautocommandの実行中に設定され
たときは、それらが定義されているスクリプト名が報告される。
{Vi mが +eval 機能付きでコンパイルされたときのみ使用可能}

							*:set-termcap*
Termcapオプションを設定するには、{option} に "t_xx" の形式を使ってもよい。これ
は termcap によるオプションを上書きする。これはキーマッピングの中で利用するこ
ともできる。"xx" の部分が特別な文字を含むときは、<t_xx> の形式を使うこと: >
	:set <t_#4>=^[Ot
これは、特殊なコードを普通のキーに変換する際にも使われる。例えば、Alt-b で
<Esc>b を入力するには、次の設定を使うこと: >
	:set <M-b>=^[b
(ここで ^[ は本物の <Esc> である。それを入力するには、CTRL-V <Esc> を使うこと)
(the ^[ is a real <Esc> here, use CTRL-V <Esc> to enter it)
キーマッピングの利点は、どんなときにも機能することである。

コマンド ":set" によるリスト表示は、Viとは見かけが違う。長い文字列オプションは
リストの終わりに現れる。オプションの数も極めて多い。コマンド "set all" による表
示は、スクリーンに収まらないだろう。そうしたとき、Vimは「継続」プロンプト
|more-prompt| を出す。

							*option-backslash*
文字列オプションの値に空白を含めるには、バックスラッシュ (訳注: ファイルの頭を
参照) を空白の前に置く必要がある。値にバックスラッシュそのものを含めるには、バッ
クスラッシュを2個繰り返す。結果的には、オプションの値の中のバックスラッシュの
数は半分になる (端数は切り捨て)。
例をいくつか挙げる: >
   :set tags=tags\ /usr/tags	    の結果は "tags /usr/tags"
   :set tags=tags\\,file	    の結果は "tags\,file"
   :set tags=tags\\\ file	    の結果は "tags\ file"

コマンド "|" という文字により ":set" を、後に続くコマンドと分けることができる。
文字列オプションの値に "|" を含めるには、代わりに "\|" を用いること。次の例で
はオプション 'titlestring' の値を "hi|there" に設定している: >
   :set titlestring=hi\|there
しかし次の例では、それぞれオプション 'titlestring' を "hi" に、'iconstring' オ
プションを "there" に設定している: >
   :set titlestring=hi|set iconstring=there

MS-DOSとWIN32では、ファイル名の中のバックスラッシュはほとんど取り除かれない。
正確に言うと、ファイル名を取るオプション (環境変数が展開されるもの) では、通常
のファイル名に使われる文字の前のバックスラッシュは取り除かれない。しかし、特別
な文字 (空白、バックスラッシュそのもの、コンマなど) の前のバックスラッシュは、
上で説明した通りの働きをする。
オプションの値が "\\" で始まるときは、上とはまた違う特別な状態になる: >
   :set dir=\\machine\path	    の結果は "\\machine\path"
   :set dir=\\\\machine\\path	    の結果は "\\machine\path"
   :set dir=\\path\\file	    の結果は "\\path\file" (間違い!)
最初の例では、始まりの部分のバックスラッシュはそのまま保たれている。しかし2番
目の例では、バックスラッシュの数は半分になっている。つまり、バックスラッシュを
そのまま保ちたいときでも、半分にしたいときでも、どちらがよいか指定できることが
分かる。3番目の結果は、おそらく希望通りのものではないだろう。このやり方は避け
ること。

				*add-option-flags* *remove-option-flags*
値がフラグのリストからなるオプションもある。そういったオプションにフラグを追加
したいとき、既存の値を変更したくないならば、こうすること: >
   :set guioptions+=a
オプションからフラグを取り除くには、こうすること: >
   :set guioptions-=a
これはオプション 'guioptions' から 'a' フラグを取り除く。
Note フラグを追加したり取り除いたりする際には、1個ずつ指定するよう注意すること。
'guioptions' が "ab" という値であるとき、"set guioptions-=ba" は機能しない。な
ぜなら、"ba" という文字列は現れていないからである。

			   *:set_env* *expand-env* *expand-environment-var*
ほとんどの文字列オプションで、環境変数は展開される。'$' とそれに続く環境変数名
が、その値に置き換えられる (その環境変数が存在するとき)。環境変数が存在しない
とき、'$' とそれに続く変数名は変更を受けない。識別子に使えない文字 non-id
character (英字、数字、'_' 以外) なら、どれでも環境変数名の後に続けることがで
きる。識別子に使えない文字とそれに続く文字は、環境変数の値の後ろにそのまま追加
される。例: >
   :set term=$TERM.new
   :set path=/usr/$INCLUDE,$HOME/include,.
コマンド ":set opt-=" でオプションから文字列を取り除いたり、":set opt+=val" コ
マンドでオプションに文字列を追加したりするときには、環境変数の展開が行われてか
らそうした操作がなされる。


ローカル変数の扱い				*local-options*

いくつかのオプションは、1つのウィンドウや1つのバッファのみに適用される。それぞ
れのウィンドウやバッファは、そうしたオプションの独自のコピーを保持しているため、
その中に独自の値を持つことができる。これにより、あるウィンドウ内では 'list' オ
プションを設定するが、他のウィンドウでは設定しない、というようなことが可能にな
る。またオプション 'shiftwidth' を、あるバッファ内では 3 に設定し、他では 4 に
設定することもできる。

以降では、特定の状況下でそれらのローカル変数がどうなるかを説明する。実際には、
それらを全て知る必要はない。なぜなら、Vimはおそらくユーザが予想する通りにオプ
ションの値を使うからである。残念ながら、ユーザの予想通りに働くのは、いくらか複
雑なことである...

ウィンドウを分割すると、ローカルオプションは新しいウィンドウにコピーされて引き
継がれる。そのため、ウィンドウを分割した直後には、2つのウィンドウの内容は同じ
である。

新しいバッファを編集するとき、そのバッファのローカルオプションは初期化されなけ
ればならない。その以前のカレントバッファのローカルオプションは、そのバッファの
みに適用すべきものかもしれないので、新しいバッファには適用されない。その代わり、
バッファについてのローカルオプションはそれぞれグローバルな値を持っていて、それ
は新しいバッファに適用される。コマンド ":set" によって、ローカルな値とグローバ
ルな値の両方が変更される。コマンド "setlocal" はローカルな値のみを変更するので、
それで指定した値は新しいバッファには適用されない。

すでに編集されたバッファを編集するときは、最後に使われたウィンドウ内のローカル
オプションが再び使われる。このバッファがこのウィンドウ内ですでに編集されていた
なら、そのときの値が再び用いられる。そうでなければ、そのバッファが最後に編集さ
れたウィンドウ内の値が用いられる。

特定のバッファの種類についてウィンドウ内のローカルオプションを設定することも可
能である。同じウィンドウ内で別のバッファを編集するとき、ウィンドウ内のローカル
オプションを使い続けたくないときがある。そのためVimはウィンドウ内のローカルオ
プションのグローバルな値を記憶しており、別のバッファの編集時にはそれを用いる。
ウィンドウはそれぞれ、それらの値の独自のコピーを持っている。そのため、それらの
オプションはウィンドウについてはローカルであるが、そのウィンドウ内の全てのバッ
ファについてグローバルである。それらを用いて、次のようなことが可能である: >
	:e one
	:set list
	:e two
こうするとオプション 'list' はコマンド "two" にも適用される。":set list" によ
り、グローバルな値も変更されたからである。 >
	:set nolist
	:e one
	:setlocal list
	:e two
今度は "two" にはオプション 'list' は適用されない。なぜなら ":set nolist" コマ
ンドがグローバルな値をオフに切り替えたが、コマンド ":setlocal list" は "one" バッ
ファについてローカルな値をオンに切り替えただけで、":e two" によるバッファには
グローバルな値が適用されるからである。 Note 注意することは、次にこうすると: >
	:e one
最後に "one" バッファを編集したときの通りにオプション 'list' の値が戻るわけで
はない。ウィンドウについてローカルなオプションは、バッファそれぞれに対して復元
されるわけではないからである。

							*:setl* *:setlocal*
:setl[ocal] ...		コマンド ":set" と似ているが、カレントバッファやウィン
			ドウについてローカルな値のみを設定する。全てのオプショ
			ンがローカルな値を持つわけではない。オプションがローカ
			ルな値を持たないときは、グローバルな値が設定される。引
			数に "all" を伴うとき: 全てのローカルオプションのロー
			カルな値を表示する。引数がないとき: 全てのローカルオプ
			ションのローカルな値で、既定の値と異なるものを表示する。
			特定のローカルオプションを表示しているとき、ローカルな
			値も表示する。グローバルオプションに対しては、グローバ
			ルな値が表示される (しかし、これは将来変更されるかもし
			れない)。 {Vi にはない}

:setl[ocal] {option}<	{option} のローカルな値をグローバルな値に設定する。
			{Vi にはない}

							*:setg* *:setglobal*
:setg[lobal] ...	コマンド ":set" と似ているが、ローカルオプションのグロー
			バルな値のみを設定する。ローカルな値は変更しない。オプ
			ションを表示するときは、グローバルな値が表示される。引
			数に "all" を伴うとき: 全てのローカルオプションのグロー
			バルな値を表示する。引数がないとき: 全てのローカルオプ
			ションのグローバルな値で、既定の値と異なるものを表示す
			る。 {Vi にはない}

バッファやウィンドウについてローカルなオプションに対して:
	コマンド	    グローバルな値	ローカルな値 ~
      :set オプション=値    設定される		設定される
 :setlocal オプション=値    なし		設定される
:setglobal オプション=値    設定される		なし
      :set オプション	    なし		表示される
 :setlocal オプション	    なし		表示される
:setglobal オプション	    表示される		なし


ローカルな値を持つグローバルオプション			*global-local*

オプションがグローバルであるというのは、一つの値を全てのバッファに用いるような
場合である。いくつかのグローバルオプションでは、ローカルな別の値を持てると便利
である。ローカルな値は、":setlocal" で設定できる。すると ":setlocal" を実行し
たバッファではローカルな値が用いられるが、他のバッファでは引き続きグローバルな
値が用いられる。

例えば、あなたは2つのウィンドウを開き、両方でC言語のソースファイルを編集してい
るとする。グローバルなオプション 'makeprg' は両方に適用される。そこでウィンド
ウの片方で >
	:set makeprg=gmake
とすると、別のウィンドウでも同じ値が用いられる。別のウィンドウに移って
オプション 'makeprg' を設定する必要はない。
しかし、新しいウィンドウでPerlのソースファイルの編集を始めると、'makeprg' に別
の値を設定したくなる。しかしCソースに適用された値を変えたくはない。そんなとき
にはこうする: >
	:setlocal makeprg=perlmake
ローカルな値を空にすると、グローバルな値に戻る: >
	:setlocal makeprg=
ただし、この方法は文字列オプションにしか使えない。切替オプションには、次のよう
に "<" フラグを使う必要がある: >
	:setlocal autoread<
Note: 切替オプションの変更で "<" を使うと、グローバルな値がローカルな値にコピー
されるが、それは値をグローバルなものに戻すのとは少し違うことに注意すること (こ
れは後でグローバルな値を変更する際に問題になる)。
Note: 将来、値にグローバルとローカルの区別のあるオプションが増えたら、グローバ
ルオプションにコマンド ":setlocal" を使ったときの結果が変わるかもしれない。


ファイルタイプの設定

:setf[iletype] {filetype}			*:setf* *:setfiletype*
			{filetype} に対して 'filetype' を設定する。ただし
			autocommand の中 (入れ子になっているときは、外側も含め
			て) において初めて実行されたときのみ有効である。これは
			次のコマンドを略したものである: >
				:if !did_filetype()
				:  setlocal filetype={filetype}
				:endif
<			このコマンドは filetype.vim の中で使われ、'filetype'
			オプションが 2度設定されて別の設定や構文ファイルが読み
			込まれることがないようにしている。 {Vi にはない}

:bro[wse] se[t]			*:set-browse* *:browse-set* *:opt* *:options*
:opt[ions]		全てのオプションを表示したり設定するためのウィンドウを
			開く。オプションは機能ごとにまとめられている。
			ここではオプションの短い説明が読める。その上で <CR> を
			打ち込むと、そのオプションについてのヘルプウィンドウが
			開き、詳しい説明が読める。
			新しい値を設定するには、表示されている値を修正した後に
			"set" という行の上で <CR> を打ち込む。ウィンドウやバッ
			ファ固有のオプションについては、変更した値は最後に使用
			したウィンドウに適用される。そのウィンドウがヘルプウィ
			ンドウだったときは、変更した値はヘルプウィンドウの (オ
			プションウィンドウを抜かして) 1つ下のウィンドウに適用
			される。
			{Vi mが |+eval| または |+autocmd| 機能付きでコンパイル
			されたときのみ使用可能}

								*$HOME*
"~" は "$HOME" と同様に扱われるが、こちらは値の先頭にあり、空白かコンマの後に
あるときのみ認識される。

Unix系のシステムでは "~user" も使える。これは "user" というユーザのホームディ
レクトリに置き換えられる。例: >
    :set path=~mool/include,/usr/include,.

Unix系のシステムでは "${HOME}" という形式も使える。ここで {} の間には識別子に
使えない文字 (訳注: 上を参照) が入ってもよい。 Note これをコマンド "gf" のため
に使いたいなら、オプション '{' と '}' の文字を 'isfname' に追加する必要がある。


Note 展開されるオプションの値の長さ制限に注意すること。システムごとに異なるが、
大抵は (訳注: 半角文字で、全角では半分) 256 文字か 1024 文字などの長さである。

							*:fix* *:fixdel*
:fix[del]		't_kD' (訳注: デリートキー) の値を設定する:
			  't_kb' が	のとき	't_kD' は	~
			    CTRL-?		  CTRL-H
			    CTRL-?以外		  CTRL-?

			(CTRL-? は8進数で 0177、16進数で 0x7f) {Vi にはない}

			もしあなたのターミナルでデリートキーのキーコードが間違
			っていて、バックスペースのキーコードは正しかったら、こ
			のコマンドを .vimrc に加えればよい: >
				:fixdel
<			これはバックスペースのキーコードが実際に何であっても機
			能する。

			バックスペースのキーコードが間違っていたら、このように
			する: >
				:if &term == "termname"
				:  set t_kb=^V<BS>
				:  fixdel
				:endif
<			ここで "^V" は CTRL-V 、 "<BS>" はバックスペースを表す
			(実際に「^」「V」などのキーを押さないこと)。"termname"
			にはあなたの使うターミナルの種類を当てはめる。

			<Delete> キーが奇妙なキーコード列 (CTRL-? でも CTRL-H
			でもない) を送るときは、 ":fixdel" ではなくこれを使う: >
				:if &term == "termname"
				:  set t_kD=^V<Delete>
				:endif
<			ここで "^V" は CTRL-V 、 "<BS>" はデリートキーを表す
			(実際に「^」「V」などのキーを押さないこと)。"termname"
			にはあなたの使うターミナルの種類を当てはめる。

							*Linux-backspace*
			Note Linuxについての注意: そのままではバックスペースキ
			ーは CTRL-? を送るが、これは間違っている。これを修正す
			るには、 rc.local に次の行を加える: >
				echo "keycode 14 = BackSpace" | loadkeys
<
							*NetBSD-backspace*
			Note NetBSDについての注意: バックスペースキーが正しい
			キーコードを送らないとき、こうすると良いかもしれない: >
				xmodmap -e "keycode 22 = BackSpace"
<			これが有効だったら、 .Xmodmap ファイルに次の行を加える
			こと: >
				keysym 22 = BackSpace
<			これを有効にするには、再起動する必要がある。

==============================================================================
2. オプションの自動設定					*auto-setting*

コマンド ":set" によるオプションの設定のほか、3通りの方法を使って、1つまたは複
数のファイルに自動的にオプションを設定できる。

1. Vimを起動したとき、様々な場所から初期化設定を読み込ませることができる。
   |initialization| を参照すること。多くの設定はセッション全てに適用されるが、
   いくつかはVimを起動したディレクトリによって異なる。初期化設定ファイルは
   |:mkvimrc| や |:mkview| や |:mksession| コマンドで生成できる。
2. 新しいファイルの編集を始めたとき、自動的に実行されるコマンドがある。
   これを使うと、特定のパターンにマッチするファイルに対してオプションを設定し
   たり、様々なことが可能である。|autocommand| を参照すること。
3. 新しいファイルの編集を始めたときオプション 'modeline' がオンなら、ファイル
   の先頭と末尾の数行ずつがモードラインとして読み込まれる。それをここで説明す
   る。

						*modeline* *vim:* *vi:* *ex:*
モードラインには2つの形式がある。1つ目の形式は次の通りである:
	[text]{white}{vi:|vim:|ex:}[white]{options}

[text]		任意のテキスト、なくても良い
{white}		1個以上の空白 (<Space> または <Tab>)
{vi:|vim:|ex:}	"vi:" か "vim:" か "ex:" という文字列
[white]		空白、なくても良い
{options}	オプション設定が、空白か ':' で区切られて並んだもので、':' の
		間の部分はコマンド ":set" の引数である

例: >
   vi:noai:sw=3 ts=6

2つ目の形式は次の通りである (Vi にはこの形式と互換性のあるバージョンがある):

	[text]{white}{vi:|vim:|ex:}[white]set {options}:[text]

[text]		任意のテキスト、なくても良い
{white}		1個以上の空白 (<Space> または <Tab>)
{vi:|vim:|ex:}	"vi:" か "vim:" か "ex:" という文字列
[white]		空白、なくても良い
set		"set " という文字列 (note 終わりの空白に注意)
{options}	オプション設定が、空白で区切られて並んだもので、":set" コマン
		ドの引数である
:		コロン
[text]		任意のテキスト、なくても良い

例: >
   /* vim: set ai tw=75: */

{vi:|vim:|ex:} の前には空白が必要である。こうすることで "lex:" などの普通の言
葉を誤認する可能性を低めることができる。ただし例外があり、 "vi:" と "vim:" は
行頭に来てもよい (バージョン3.0との互換性のため)。"ex:" が行頭に来ると、モード
ラインとは見なされない ("example:" の略かもしれないから)。

							*modeline-local*
オプションは ":setlocal" などで設定できる。そうして設定した値は、そのときウィ
ンドウで開かれていたバッファにのみ適用される (訳注: 違うかもしれない。原文は
The new value only applies to the buffer that contains the window.) 。モードラ
インからグローバルオプションを設定することは不可能ではないが、普通そういうこ
とはしない。2つのウィンドウを開いていて、それぞれのファイルが同じグローバル
オプションを違う値に設定しようとしたときは、後に開かれたウィンドウが優先される。

							*modeline-version*
モードラインの内容が、Vimのバージョンによって使用可能だったり不可能だったりす
る場合には、"vim:" のところでバージョンを指定できる。
	vim{vers}:	バージョン {vers} 以降 (そのバージョンを含む)
	vim<{vers}:	バージョン {vers} より前
	vim={vers}:	バージョン {vers} のみ
	vim>{vers}:	バージョン {vers} より後 (そのバージョンを含まない)
{vers} に 600 を指定するとVim 6.0を表す (メジャー・バージョンナンバーの100倍足
すマイナー・バージョンナンバー)。
例えば、Vim 6.0またはそれより新しいバージョンでのみモードラインを使うには: >
	/* vim600: set foldmethod=marker: */
Vim 5.7より古いバージョンでのみモードラインを使うには: >
	/* vim<570: set sw=4: */
"vim" と ":" の間に空白があってはならない。


モードラインかどうか調べられる行数はオプション 'modelines' で設定できる。
オプション 'modeline' オプションがオフであるか 'modelines' が 0 であると、モー
ドラインは調べられない。

Note 1番目の形式では、行の終わりまでオプション指定に使われることに注意。そのた
め次のようにすると、行末の "*/" のためにエラーメッセージが現れる: >
   /* vi:ts=4: */
その代わり、こうすればよい: >
   /* vi:set ts=4: */

エラーが検出されると、その行の残りは無視される。

コマンド "set" の引数に ':' を含めたいときは、その前に '\' を置くこと。':' の前
のバックスラッシュ (訳注: 文書の頭を参照) は取り除かれる。例: >
   /* vi:set dir=c\:\tmp: */
これはオプション 'dir' を "c:\tmp" に変更する。':' の前にバックスラッシュが置
かれたとき、取り除かれるのは1個だけである。だからオプションの値に "\:" を含め
たいなら "\\:" を指定すること。

安全上の理由から、コマンド "set" 以外は使用できない (誰かがテキストファイルで
「トロイの木馬」を作るかもしれないから) 。

ヒント: ファイルを読み込みときにオプション設定以外を行いたいなら、ファイル内の
特定の文字列を調べる autocommand を定義すればよい。例: >
	au BufReadPost * if getline(1) =~ "VAR" | call SetVar() | endif
そして "VAR" を含む行に何かを行うための SetVar() 関数を定義すればよい。

==============================================================================
3. オプションの要約					*option-summary*

以下のリストでは、全てのオプションが、正確な名前と (あれば) 略名で示されている。
どちらの形を使ってもよい。

この文書内では、切替オプションを「オンに」するというのは ":set そのオプション"
を打ち込むことを表す。切り替えオプションを「オフに」するというのは
":set noそのオプション" を打ち込むことを表す。

いくつかのオプションには、既定値が2種類あるものがある: 1つ目は "Vim default"
つまりVimの既定値で、オプション 'compatible' がオフになっているときに使われる。
2つ目は "Vi default" つまりViの既定値で、オプション 'compatible' がオンになって
いるときに使われる。

ほとんどのオプションは全てのウィンドウやバッファで共通である。さてその中には、
テキストがウィンドウ内でどのように表示されるかを定めるものもある。そういったオ
プションは、ウィンドウごとに違う値に設定できる。例えばオプション 'list' は、あ
るウィンドウ内でオンにして、同じテキストを編集している別のウィンドウ内でオフに
することができる。すると同時に違った外観を得ることができる。また、ファイルごと
に特定の値に設定できるオプションもある。そういったオプションは、ファイルごとま
たはバッファごとに違う値に設定できる。例えばオプション 'textwidth' は、通常の
テキストファイルには78に設定し、Cプログラムのファイルには0に設定するようにでき
る。

	グローバル:
		1つのオプションが全てのバッファやウィンドウに対して適用される
	ウィンドウについてローカル:
		ウィンドウがそれぞれ、そのオプションのコピーを独自に持つ
	バッファについてローカル:
		バッファがそれぞれ、そのオプションのコピーを独自に持つ
(訳注: 上の項目については、ファイルの頭も参照)

新しいウィンドウを作るとき、ウィンドウ固有のオプションには、その前にアクティブ
だったウィンドウでの値がまず使われる。バッファ固有のオプションは、'cpoptions'
オプションの 's' フラグと 'S' フラグによって違ってくる。's' フラグが含まれてい
ると (既定ではこうなっている)、バッファのオプションの値には、その新しいバッファ
が最初にアクティブになったときに、その前にアクティブだったバッファでの値がコピー
される。'S' フラグが含まれていると、バッファがアクティブになる度に値がコピーさ
れる。これはほとんどグローバルオプションを持っているようなものである。's' フラ
グも 'S' フラグも含まれていないときは、バッファが作られるときに、その前にアク
ティブだったバッファでの値がコピーされる。

							*E355*
|Q_op| にはオプションの短い説明が載った表があり、そこからヘルプにジャンプでき
る。

					*'aleph'* *'al'* *aleph* *Aleph*
'aleph' 'al'		数値	(既定はMS-DOSでは128、それ以外では224)
			グローバル
			{Vi にはない}
			{Vi mが |+rightleft| 機能付きでコンパイルされたときの
			み使用可能}
	ヘブライ語アルファベットの最初の文字を表すASCIIコード。挿入モード
	('hkmap' がオンになっているとき) と コマンドラインモード (CTRL-_ を打
	ち込んだとき) の両方において、ヘブライモードのキーボード配列をマップす
	るルーチンは、[aleph..aleph+26] の範囲のヘブライ文字を出力する。
	aleph=128 はPCコード、 aleph=224 は ISO 8859-8 に使われる。
	|rileft.txt| を参照すること。

			*'allowrevins'* *'ari'* *'noallowrevins'* *'noari'*
'allowrevins' 'ari'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+rightleft| 機能付きでコンパイルされたときの
			み使用可能}
	挿入モードとコマンドラインモードで CTRL-_ を使用可能にする。これは既定
	ではオフになっている。ユーザが間違って SHIFT-_ ではなく CTRL-_ を打ち
	込み、右から左に書いていくモードに入って抜けられなくなる事態を防ぐため
	である。'revins' を参照すること。
	NOTE: このオプションはオプション 'compatible' がオンになったときはオフ
	になるので注意すること。

			 *'altkeymap'* *'akm'* *'noaltkeymap'* *'noakm'*
'altkeymap' 'akm'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+farsi| 機能付きでコンパイルされたときのみ使
			用可能}
	オンのとき、2番目の言語が Farsi. これってイラン語?
	オプション 'allowrevins' がオンになっていると、
	編集モードでは CTRL-_ で Farsi と英語のキーボードマップを切り替えられ
	る。オフのとき、キーボードマップはヘブライ語と英語で切り替えられる。こ
	れは普通の状態、すなわち英語モード (左から右に書く言語のモード) と既定
	の第2言語である Farsi またはヘブライ語モード (右から左に書く言語のモー
	ド)を切り替えた上でVimをスタートさせるのに便利である。|farsi.txt| を参
	照すること。

			*'autoindent'* *'ai'* *'noautoindent'* *'noai'*
'autoindent' 'ai'	切替	(既定ではオフ)
			バッファについてローカル
	新しい行を開始したとき (挿入モードで <CR> を打ち込むか、コマンド "o" ま
	たはコマンド "O" を使ったとき)、新しい行のインデントを現在行と同じ量に
	する。新しい行で <BS> か CTRL-D 以外を打ち込まずに <Esc> か <CR> を打
	ち込むと、その行のインデントは削除される。オプション 'autoindent' がオ
	ンのときは、 テキストの整形処理 (コマンド "gq" を使ったり、挿入モードで
	1行の文字数が 'textwidth' に届いたとき) には最初の行のインデントが使わ
	れる。
	オプション 'smartindent' オプションか 'cindent' がオンのときは、インデ
	ントの方法は違ってくる。
	オプション 'paste' オプションがオンになると 'autoindent' はオフになる。
	{Vi との微妙な違い: <Esc> または <CR> を打ち込んでインデントが削除され
	た後、上下に移動した後のカーソル位置は削除されたインデントの後ろになる。
	Viでは削除されたインデントの中のどこかになる}

				 *'autoread'* *'ar'* *'noautoread'* *'noar'*
'autoread' 'ar'		切替	(既定ではオフ)
			グローバルまたはバッファについてローカル |global-local|
			{Vi にはない}
	ファイルがVimの内部では変更されてないが、Vimの外部で変更されたことが判
	明したとき、自動的に読み直す。ファイルが削除されたときにはこのようには
	ならない。 |timestamp|
	このオプションがローカルな値を持つとき、再びグローバルな値を使うように
	するにはこのコマンドを使う: >
		:set autoread<
<
				 *'autowrite'* *'aw'* *'noautowrite'* *'noaw'*
'autowrite' 'aw'	切替	(既定ではオフ)
			グローバル
	:next, :rewind, :last, :first, :previous, :stop, :suspend, :tag, :!,
	:make, CTRL-], CTRL-^ のコマンドを実行するたび、ファイルが変更されて
	いるなら保存する。また CTRL-O, CTRL-I, '{A-Z0-9}, `{A-Z0-9} のコマンド
	の移動先が別のファイルのときも同様である。
	Noteオプション 'autowrite' が適用されないコマンドもあることに注意。そ
	れには 'autowriteall' を参照すること。

			 *'autowriteall'* *'awa'* *'noautowriteall'* *'noawa'*
'autowriteall' 'awa'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	'autowrite' と同様のオプションだが、さらに ":edit", ":quit", ":qall",
	コマンド ":exit", ":xit", ":recover" でも、ファイルが変更されているなら
	保存する。またVimのウィンドウを閉じる際にも保存する。このオプションを
	オンにすると、オプション 'autowrite' も同時にオンになったようになる
	(訳注: このオプションはオプション 'autowrite' の適用されるコマンド全て
	に適用されるので)。

							*'background'* *'bg'*
'background' 'bg'	文字列	(既定は "dark" または "light")
			グローバル
			{Vi にはない}
	"dark" に設定されていると、Vimは暗い背景によく合う色を使おうとする。
	"light" に設定されていると、Vimは明るい背景によく合う色を使おうとする。
	その他の値は無効である。
	Vimは使われているターミナルの種類に従って既定の値を定めるが、常に正し
	いとは限らない。
	このオプションを変更しても背景色は変わらない。これはただVimに背景色が
	どのよ うなものかを知らせるだけである。背景色の変更には |:hi-normal|
	を参照すること。

	オプション 'background' が変更されると、Vimは色設定をその値に合わせる。
	しかし構文強調表示に使われる色設定は変化しない。
	Color scheme が読み込まれているとき (つまり "colors_name" 変数が設定さ
	れているとき)オプション 'background' を変更すると color scheme が再び
	読み込まれる。Color scheme がオプション 'background' に対応していれば
	これは適用される。しかし color scheme が 'background' 自体を定めている
	ときは効果はない。必要ならば "colors_name" 変数の値を消去すること。

	オプション 'background' を次のようにして既定の値に戻したとき: >
		:set background&
<	Vimはその値を推測する。GUIがあればこれはうまくいくが、そうでなければ正
	しい値を推測できないだろう。

	GUIを開始したとき、オプション 'background' の既定値は "light" である。
	値が .gvimrc で定められておらず、Vimが背景色を暗いものと判断したときは、
	オプション 'background' は "dark" に設定される。しかしこれは .gvimrcファ
	イルが読み込まれた「後に」行われる (実際の背景色を知るためにウィンドウ
	が開かれる必要があるから)。これを避けるには、コマンド ":gui" を .gvimrc
	の中のオプション 'background' の値が使われる前に置いて (つまり
	":syntax on" の前) GUIウィンドウを強制的に開かせればよい。
	Win32のGUIでは、GUIの開始前にオプション 'background' を設定すると、背
	景色と文字色の組み合わせは black の上に lightgrey または white の上に
	black となる。その他のシステムではオプション 'background' を変更しても
	背景色や文字色は変化しない。
	このオプションは普通 .vimrc ファイル内で設定される。ターミナル名によっ
	て変わってくるかもしれない。例: >
		:if &term == "pcterm"
		:  set background=dark
		:endif
<	このオプションが設定されると、強調表示の既定の設定が変更される。他の設
	定を使いたいなら、コマンド ":highlight" をオプション 'background' を設
	定した「後に」置くこと。
	このオプションは "$VIMRUNTIME/syntax/syntax.vim" ファイル内でも使われ、
	構文強調表示のための色を選択するようになっている。このオプションを設定
	した後は syntax.vim を再読み込みしないと結果が分からない。これには
	":syntax on" を実行すればよい。

							*'backspace'* *'bs'*
'backspace' 'bs'	文字列	(既定では "")
			グローバル
			{Vi にはない}
	挿入モードでの <BS>, <Del>, CTRL-W や CTRL-U の働きに影響する。値には
	コンマ区切りのキーワードを並べたものが使われる。それぞれがバックスペー
	スの働く対象を定めている。
	値	効果  ~
	indent  autoindent を超えてバックスペースを働かせる
	eol	改行を超えてバックスペースを働かせる (行を連結する)
	start	挿入区間の始めでバックスペースを働かせるが CTRL-W と CTRL-U は
		挿入区間の始めでいったん止まる

	値が空のときは、Vi互換のバックスペーシングが使われる。

	バージョン 5.4 またはそれ以前との互換性にはこう設定する:
	値	効果  ~
	  0	"" と同じ (Vi互換)
	  1	"indent,eol" と同じ
	  2	"indent,eol,start" と同じ

	<BS> や <Del> が望み通りの動作をしないときには |:fixdel| を参照するこ
	と。
	NOTE: このオプションは、オプション 'compatible' をオンにすると "" に
	設定されるので注意すること。

				*'backup'* *'bk'* *'nobackup'* *'nobk'*
'backup' 'bk'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	ファイルを上書きする前にバックアップファイルを作る。書き込みが成功した
	らバックアップはそのまま置いておく。バックアップをずっと持っていたくは
	ないが、書き込みの最中にはバックアップが欲しいときには、このオプション
	をオフにしてオプション 'writebackup' をオンにすること (既定ではそうなっ
	ている)。全くバックアップが要らないなら両方をオフにすること (あなたの
	ファイルシステムがほとんど一杯ならこうするとよい)。詳しくは
	|backup-table| を参照すること。
	どちらにしてもオプション 'backupskip' のパターンがマッチすると、バック
	アップは作られない。オプション 'patchmode' がオンになっていると、バック
	アップはリネームされて最も古いバージョンのファイルになることがある。
	NOTE: このオプションは、オプション 'compatible' をオンにするとオフにな
	るので注意すること。

						*'backupcopy'* *'bkc'*
'backupcopy' 'bkc'	文字列	(UnixでのViの既定値: "yes" 、それ以外: "auto")
			グローバル
			{Vi にはない}
	ファイルに書き込みをしてバックアップが作られるとき、その方法をこのオプ
	ションで決定する:
	"yes"	先にファイルのコピーを作ってバックアップにして、更新した内容は
		元のファイルに上書きする
	"no"	先に元のファイルをリネームしてバックアップにして、更新した内容
		は新しいファイルに書き出す
	"auto"	上の2つのどちらかで、適切な方を選ぶ

	ファイルのコピーを作ってから元のファイルに上書きする方法は:
	X ファイルのコピーに余計な時間がかかる。
	O 編集したファイルが特別な属性を持っているとき (例えばファイルがハー
	  ドリンクまたはシンボリックリンクだったり、リソースフォークを持って
	  いるとき)、全て元のまま保たれる。
	X 編集したファイルがリンクのとき、バックアップファイルの名前がリンク
	  先の文書ファイルの名前でなく、リンクファイルの名前になってしまう。

	ファイルをリネームしてから新しいファイルに書き出す方法は:
	O 高速である。
	X 時々、元のファイルの持つ属性を新しいファイルにコピーしきれないこと
	  がある。
	X 編集したファイルがリンクのとき、新しいファイルはリンクにならない。

	"auto" の値にすると折衷策を採る。Vimが副作用なしにリネームの方法が使え
	ると判断したとき (属性がコピーでき、ファイルがリンクでないとき) は、そ
	ちらが使われる。それでは問題がありそうなときはコピーの方法が使われる。

	"no" と "auto" では問題が起きる場合がある。プログラムによっては、ファ
	イルを開き、Vimを呼び出してそのファイルを編集させ、(ファイル区別プログ
	ラムを使って) そのファイルが変更されたかどうかを調べるものがある。そう
	したプログラムは新しく書き出されたファイルではなく、バックアップファイ
	ルの方を調べてしまう。例としては "crontab -e" が挙げられる。

	コピーの方法のときは、元のファイルの中身はいったん削除され、そこに新し
	いテキストが書き込まれる。つまり、元のファイルの保護ビット、ファイル所
	有者やシンボリックリンクは変更されない。しかし、新しく作られることにな
	るバックアップファイルは、ファイルを編集したユーザの所有となる。またバ
	ックアップファイルの属するグループは、元のファイルと同じグループに設定
	される。これが失敗すると、他の属性と同様に、そのグループでの保護ビット
	が設定される。

	リネームの方法のときは別のやり方が使われる。バックアップファイルは元の
	ファイルと同じ属性を持ち、新しく書き出されたファイルは、ファイルを編集
	したユーザの所有となる。開いたファイルがハードリンクまたはシンボリック
	リンクだった場合でも、新しく書き出されたファイルはリンクにならない！だ
	から値が "auto" のとき、ファイルがリンクならリネームを行わないのである。
	新しく書き出されたファイルの所有者と属するグループは、元のファイルと同
	じとして設定される。しかしシステムがこうすることを許さないかもしれない。
	その場合、値が "auto" ならもうファイルのリネームをしようとはしない。

						*'backupdir'* *'bdir'*
'backupdir' 'bdir'	文字列	(Amigaでの既定値: ".,t:",
				 MS-DOSとWin32での既定値: ".,c:/tmp,c:/temp"
				 Unixでの既定値: ".,~/tmp,~/")
			グローバル
			{Vi にはない}
	値は、バックアップファイルを作るディレクトリを、コンマ区切りのリストに
	したもの。
	- バックアップファイルは、リスト内の、使用可能な最初のディレクトリの中
	  に作られる。
	- 値が空だと、バックアップファイルは作られない ('patchmode' は使えなく
	  なる!)。
	- ディレクトリに "." を指定するのは、バックアップファイルを、編集され
	  たファイルと同じディレクトリに作るということである。
	- ディレクトリが "./" で (MS-DOSなどでは ".\") 始まるのは、バックアッ
	  プファイルを作るディレクトリを、編集されたファイルとの相対的な位置で
	  決めるということである。最初の "." は編集されたファイルのパス名で置
	  き換えられる ("." がディレクトリ名の内部にあるなら、特別な意味はな
	  い)。
	- コンマの後の空白は無視されるが、他の場所の空白はディレクトリ名の一部
	  として見なされる。ディレクトリ名の先頭に空白を使いたいなら、その空白
	  の前にバックスラッシュを置くこと。
	- ディレクトリ名にコンマを使いたいなら、そのコンマの前にバックスラッシュ
	  (訳注: ファイル先頭を参照) を置くこと。
	- ディレクトリ名は '/' で終わってもよい。
	- 環境変数は展開される |:set_env| 。
	- '\' には注意すること。空白の前には1個置き、オプションの値に '\' 自身
	  を含めたいなら2個置く (|option-backslash| を参照)。例: >
	    :set bdir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
<	- 古い Vim version 3.0 との互換性のため、値の先頭の '>' は取り除かれる。
	オプション 'backup' オプションおよび 'writebackup' も参照すること。
	Unixであなたのバックアップファイルを隠したいなら、こうするとよい: >
		:set backupdir=./.backup,~/.backup,.,/tmp
<	この方法を使うには、それぞれのディレクトリとあなたのホームディレクト
	リに ".backup" というディレクトリを作らなければならない。
	リストにディレクトリを加えたり、リストから取り除いたりするときには、
	|:set+=| と |:set-=| を使うのがよい。こうすると将来のバージョンでの既
	定値が変更されたときの問題を避けられる。
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'backupext'* *'bex'*
'backupext' 'bex'	文字列	(既定では "~", VMSでは: "_")
			グローバル
			{Vi にはない}
	バックアップファイルの名前を作る際、元のファイル名の後ろに付け加える文
	字列。既定では普段使いそうもないものに定めてあるが、これは既存のファイ
	ルをバックアップファイルで上書きするのを避けるためである。".bak" を使
	いたいかもしれないが、".bak" で終わるファイルに重要なものがないか確か
	めること。

						*'backupskip'* *'bsk'*
'backupskip' 'bsk'	文字列  (既定では: "/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*")
			グローバル
			{Vi にはない}
			{Vi mが |+wildignore| 機能付きでコンパイルされたときの
			み使用可能}
	ファイル名に対するパターンのリスト。この中に、書き込まれたファイルの名
	前にマッチするパターンがあれば、そのファイルのバックアップは作られない。
	ファイル名を指定してもよいし、ファイルのフルパスを指定してもよい (訳注:
	C:/temp/* という方法。既定値ではこの方法で、一時ファイル用のディレクト
	リを指定している) 。
	パターンの指定方法は |:autocmd| と同じである。|autocmd-patterns| を参
	照すること。また、特殊文字に注意するために |option-backslash| を参照す
	ること。
	環境変数の $TMPDIR, $TMP や $TEMP が定義されていないと、既定値には使わ
	れない。"/tmp/*" はUnixでのみ使われる。

						*'balloondelay'* *'bdlay'*
'balloondelay' 'bdlay'	数値	(既定では 600)
			グローバル
			{Vi にはない}
			{Vi mが |+balloon_eval| 機能付きでコンパイルされたとき
			の
			み使用可能}
	バルーン表示が出るまでの時間 (ミリ秒単位) 。|balloon-eval| を参照する
	こと。

		       *'ballooneval'* *'beval'* *'noballooneval'* *'nobeval'*
'ballooneval' 'beval'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+sun_workshop| 機能付きでコンパイルされたとき
			のみ使用可能}
	|balloon-eval| 機能を働かせる。

				     *'binary'* *'bin'* *'nobinary'* *'nobin'*
'binary' 'bin'		切替	(既定ではオフ)
			バッファについてローカル
			{Vi にはない}
	バイナリファイルを編集する前には、このオプションをオンにする。Vimの引
	数に |-b| を付けてもよい。このオプションがオンのときは、いくつかのオプ
	ションの設定が変わる:
		'textwidth'  は 0
		'wrapmargin' は 0
		'modeline'   は オフ
		'expandtab'  は オフ
	またオプション 'fileformat' オプションと 'fileformats' の値は無視され、
	読み込みと書き込みは 'fileformat' が "unix" のときのようになる (1個の
	<NL> が改行になる)。
	さらにオプション 'fileencoding' オプションと 'fileencodings' の値も無
	視され、ファイルは変換なしに読み込まれるようになる。
	NOTE:オプション 'bin' がオンのときにファイルを読み込むと、autocommand
	によって設定が再び変えられ (例えば 'textwidth')、編集時に問題を起こす
	ことがあるので注意すること。ファイルを読み込んだ後に再び 'bin' オプショ
	ンをオンにするとよい。
	変更されるオプションの値は記憶されているので、オプション 'bin' がオフに
	戻るとそれらの値も復元される。それらの値はバッファごと独自に記憶される。
	オプション 'bin' がオンならば、元のファイルにすでに <EOL> があるときだ
	け、ファイルを書き込むときに最終行に <EOL> が付け加えられる (普通は、
	最終行に <EOL> がないならVimはそれを付け加える。こうするとその分ファイ
	ルが長くなる)。オプション 'endofline' を参照すること。

			*'bioskey'* *'biosk'* *'nobioskey'* *'nobiosk'*
'bioskey' 'biosk'	切替	(既定ではオン)
			グローバル
			{Vi にはなく、MS-DOS版のみ}
	オンのときは、キーボードの文字を得るためにバイオスが呼び出される。これ
	はCTRL-C を認識するためにはよいが、コンソールでしか機能しない。ターミ
	ナルをシリアルポートから利用する場合は、オフにすること。
	|'conskey'| も参照すること。

							*'bomb'* *'nobomb'*
'bomb'			切替	(既定ではオフ)
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+multi_byte| 機能付きでコンパイルされたときの
			み使用可能}
	ファイルを書き込むときに以下の条件が満たされれば、BOM (Byte Order
	Mark, バイト順マーク) がファイル先頭に付けられる:
	- このオプションがオンであること
	-オプション 'binary' がオフであること
	-オプション 'fileencoding' が "utf-8", "ucs-2", "ucs-4" であるか、それ
	  らとリトルエンディアンとビッグエンディアンの違いを除いて同一のエンコー
	  ドであること
	アプリケーションの中には、ファイルのエンコーディングを認識するために
	BOM を使うものがある。MS-Windows で UCS-2 ファイルのためによく使われる。
	しかし、アプリケーションによってはこれが問題になることもある。例:
	"cat file1 file2" とすると、file2の BOM がファイル途中に現れてしまう。
	ファイルを読み込むときにオプション 'fileencodings' の値が "ucs-bom" で
	始まるならば、 BOM が存在するかどうかが調べられ、その結果に従って
	'bomb' が設定される。'binary' がオンでなければ BOM は編集時には取り除
	かれ、ユーザの目には触れない。その後オプションを変更しなければ、ファイ
	ルを書き込むときに再び BOM が復元される。

						*'breakat'* *'brk'*
'breakat' 'brk'		文字列	(既定では " ^I!@*-+;:,./?")
			グローバル
			{Vi にはない}
			{Vi mが |+linebreak| 機能付きでコンパイルされたときの
			み使用可能}
	オプション 'linebreak' がオンのとき、どの文字で自動改行が起きるかを、こ
	のオプションで指定する。

						*'browsedir'* *'bsdir'*
'browsedir' 'bsdir'	文字列	(既定では "last")
			グローバル
			{Vi にはなく、MotifとWin32のGUI版のみ}
	ファイルブラウザにどのディレクトリを使うかを指定する:
	   last		前回にファイルブラウザを使ったディレクトリ
	   buffer	バッファで開いているファイルのディレクトリ
	   current	カレントディレクトリ
	   {path}	{path} で指定されたディレクトリ

						*'bufhidden'* *'bh'*
'bufhidden' 'bh'	文字列 (既定では "")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+quickfix| 機能付きでコンパイルされたときの
			み使用可能}
	このオプションは、バッファがウィンドウ内に表示されなくなったときの動作
	を指定する。
	  <empty>	グローバルなオプションの 'hidden' の値に従う
	  hide		バッファを隠す (解放しない)。オプション 'hidden' がオン
			でなくともそうする。
	  unload	バッファを解放する。オプション 'hidden' がオンであった
			り、|:hide| コマンドを使ったときでもそうする。
	  delete	バッファをバッファリストから削除する。'hidden' オプショ
			ンがオンだったり、|:hide| コマンドを使ったときでも、
			|:bdelete| コマンドを使ったときのように、リストからの
			削除を行う。

	このオプションはオプション 'buftype' オプションや 'swapfile' と共に使
	われ、特殊な用途のバッファを指定する。|special-buffers| を参照すること。

						*'buflisted'* *'bl'* *E85*
'buflisted' 'bl'	切替 (既定ではオン)
			バッファについてローカル
			{Vi にはない}
	このオプションがオンならば、バッファはバッファリストに表示される。オフ
	ならば、そのバッファはコマンド ":bnext" コマンドや ":ls" 、バッファメ
	ニューなどの対象にならない。
	ファイル名やマークを思い出したりするためだけのバッファでは、このオプショ
	ンはVimによってオフにされる。ファイルの編集のためにバッファを作ったと
	きは、このオプションはVimによってオンにされる。しかし ":buffer" コマン
	ドでバッファに移動したときはそうではない。

						*'buftype'* *'bt'* *E382*
'buftype' 'bt'		文字列 (既定では "")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+quickfix| 機能付きでコンパイルされたときの
			み使用可能}
	このオプションはバッファの種類を指定する。
	  <empty>	普通のバッファ
	  nofile	ファイルと関連がなく、書き込まれる予定のないバッファ
	  nowrite	書き込まれる予定のないバッファ
	  quickfix	エラーリスト用の、quickfix バッファ |:cwindow|
	  help		ヘルプバッファ (あなたが手動でこれに設定することはない
			はずである)

	このオプションはオプション 'bufhidden' オプションや 'swapfile' と共に
	使われ、特殊な用途のバッファを指定する。|special-buffers| を参照すること。

	このオプションの変更には十分注意すること。多くの副作用が起こるかもしれ
	ない!

	"quickfix" バッファはエラーリストにのみ使われる。この値は |:cwindow|
	コマンドで設定され、あなたが変更することはないはずである。

	"nofile" バッファと "nowrite" バッファは似ている。
	両方とも:	バッファの内容はファイルに書き込まれない。":w" コマン
			ドが使えない (コマンド ":w filename" は使える)。
	両方とも:	バッファの内容が変更された |'modified'| と認識されるこ
			とがない。Vimを終了するときなど、変更点が失われるとき
			でも、警告が現れない。
	両方とも:	スワップファイルはメモリを大量に消費したときのみ作られ
			る (オプション 'swapfile' がオフだと、スワップファイル
			は作られない)。
	nofile のみ:	バッファ名は固定され、ファイル名のようには扱われない。
			|:cd| コマンドの結果としてバッファ名が変わることはない。

						*'cdpath'* *'cd'* *E344* *E346*
'cdpath' 'cd'		文字列	(既定では環境変数 $CDPATH または ",,")
			グローバル
			{Vi にはない}
			{Vi mが |+file_in_path| 機能付きでコンパイルされたとき
			のみ使用可能}
	このオプションの値は、|:cd| コマンドや |:lcd| コマンドを使ったときに検
	索されるディレクトリのリストである。ただし検索されるディレクトリは相対
	パスで指定することはできない ("/", "./" や "../" で始まってはいけない)。
	オプション 'cdpath' の値には、|'path'| オプションと同様の指定方法を使う。
	|file-searching| も参照すること。
	既定では、値は環境変数 $CDPATH から取り込まれるが、カレントディレクト
	リを最初に探すために "," が先頭に挿入される。$CDPATH から取り込まれた
	ものが望ましくないときは、値を上書きするために、次のコマンドを適当に修
	正し、あなたの vimrc ファイルに加えること: >
	  :let &cdpath = ',' . substitute(substitute($CDPATH, '[, ]', '\\\0', 'g'), ':', ',', 'g')
<	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない (オプション 'cdpath' の値の一部は、ファイル名を展開する
	ためにシェルに渡すことができる)。

						*'cedit'*
'cedit'			文字列	(Viの既定値: "", Vimの既定値: CTRL-F)
			グローバル
			{Vi にはない}
			{Vi mが |+vertsplit| 機能付きでコンパイルされたときの
			み使用可能}
	コマンドラインモード Command-line Mode で、コマンドラインウィンドウを
	開くために使われるキー。オプション 'compatible' がオフならば、既定では
	CTRL-F である。
	印刷されない特殊なキー non-printable keys しか指定できない。キーは単一
	の文字として設定することもできるが、それでは入力しにくい。<> を使った
	表記が好まれる。例: >
		:set cedit=<C-Y>
		:set cedit=<Esc>
<	|Nvi| もこのオプションを持っているが、最初の1文字だけが使用される。
	|cmdwin| を参照すること。

					*'charconvert'* *'ccv'* *E202* *E214*
'charconvert' 'ccv'	文字列	(既定では "")
			グローバル
			{Vi にはない}
			{Vi mが |+multi_byte| 機能および |+eval| 機能付きでコ
			ンパイルされたときのみ使用可能}
	文字エンコーディングの変換に使われる expression を定める。これは読み込
	まれようとしているファイルや書き込みをしたファイルのエンコーディングが、
	望むものと違うときに評価される。
	オプション 'charconvert' の値は、内部関数 iconv() がサポートされ、それ
	による変換が可能ならば使われることはない。ずっと高速なため、iconv() の
	方が好まれる。
	'charconvert' は標準入力 (stdin |--|) から読み込みときには使われない。
	なぜなら変換元のファイルが存在しないからだ。まずテキストの内容をファイ
	ルに保存しなければいけない。
	使われる expression は、変換成功時には空文字列または0、失敗時には非0を
	返さなければならない。
	可能なエンコーディングの名前はオプション 'encoding' で設定されている
	(訳注:よく分からない。原文は The possible encoding names encountered
	are inオプション 'encoding'.)。それに加え、'fileencodings' と
	オプション 'fileencoding' に設定されているエンコーディング名も使われる。
	"latin1", "unicode", "ucs-2", "ucs-4" や "utf-8" の間の変換はVimの内部
	で行われ、オプション 'charconvert' は使われない。'viminfo' の中に 'c'
	フラグが含まれるならば、'charconvert' は viminfo ファイルの変換にも使
	われる。また Unicode の変換にも使われる。
	例: >
		set charconvert=CharConvert()
		fun CharConvert()
		  system("recode "
			\ . v:charconvert_from . ".." . v:charconvert_to
			\ . " <" . v:fname_in . " >" v:fname_out)
		  return v:shell_error
		endfun
<	関連する Vim 変数は:
		v:charconvert_from	現在のエンコーディング名
		v:charconvert_to	希望するエンコーディング名
		v:fname_in		入力ファイル名
		v:fname_out		出力ファイル名
	Note v:fname_in と v:fname_out とは、決して同じになってはいけないので
	注意すること。
	Note 変数 v:charconvert_from と変数 v:charconvert_to の値は 'encoding'
	オプションの値と異なるかもしれないので注意すること。Vim内部では UCS-2
	または UCS-4 の代わりには UTF-8 を使っている。
	Vim は 'charconvert' を用いたエンコーディング変換では暗号化をしない。
	変換後に暗号化をしたいなら、'charconvert' でそのことを注意する必要があ
	る。
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

				   *'cindent'* *'cin'* *'nocindent'* *'nocin'*
'cindent' 'cin'		切替	(既定ではオフ)
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+cindent| 機能付きでコンパイルされたときのみ
			使用可能}
	Cプログラムファイルの自動インデントを始める。挿入モード insert mode で
	再インデントを引き起こす文字列を指定するにはオプション 'cinkeys' を、
	好みのインデントスタイルを設定するにはオプション 'cinoptions' を参照す
	ること。
	オプション 'indentexpr' オプションの値が空でないなら、それは 'cindent' 
	に影響する。
	オプション 'lisp' オプションがオフで、'indentexpr' と 'equalprg' オプショ
	ンの両方の値が空なら、"=" によるインデントはこのアルゴリズムを使い、外
	部プログラムを使わない。
	|C-indenting| を参照すること。
	オプション 'cindent' の動作が気に入らないならば、'smartindent' か
	オプション 'indentexpr' の設定を試してみること。
	このオプションはオプション 'paste' がオンのときには使われない。
	NOTE: このオプションはオプション 'compatible' をオンにするとオフにされ
	るので注意すること。

							*'cinkeys'* *'cink'*
'cinkeys' 'cink'	文字列	(既定では "0{,0},0),:,0#,!^F,o,O,e")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+cindent| 機能付きでコンパイルされたときのみ
			使用可能}
	挿入モードで入力されたときに、現在行の再インデントを行わせる文字のリス
	ト。オプション 'cindent' オプションがオンで、かつ 'indentexpr' が空の時
	のみ使われる。
	このオプションの指定方法については |cinkeys-format| を参照すること。
	また |C-indenting| を参照すること。

						*'cinoptions'* *'cino'*
'cinoptions' 'cino'	文字列	(既定では "")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+cindent| 機能付きでコンパイルされたときのみ
			使用可能}
	このオプション 'cinoptions' は、C言語ソース内の行を 'cindent' で再イン
	デントするときの方法に影響を与える。このオプションの値については
	|cinoptions-values| を、一般的なC言語ソースのインデントの情報について
	は |C-indenting| をそれぞれ参照すること。


						*'cinwords'* *'cinw'*
'cinwords' 'cinw'	文字列	(既定では "if,else,while,do,for,switch")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+cindent| 機能と |+smartindent| 機能(両方)付
			きでコンパイルされたときのみ使用可能}
	オプション 'smartindent' オプションか 'cindent' がオンのとき、ここに指
	定したキーワードの次の行は、さらにインデントされる。'cindent' がオンの
	ときには、適切な場所 ({} の内側) でのみ機能する。
	Noteオプション 'ignorecase' オプションは 'cinwords' の値には適用されな
	いので注意すること。大文字か小文字かを区別したくないなら、値に両方を指
	定すること。例: "if,If,IF"

						*'clipboard'* *'cb'*
'clipboard' 'cb'	文字列	(既定値はX-windowsでは
				 "autoselect,exclude:cons\|linux"
				 それ以外では "")
			グローバル
			{Vi にはない}
			{Vi mのGUIバージョンか |+xterm_clipboard| 機能付きでコ
			ンパイルされたもののみ使用可能}
	このオプションには、コンマ区切りのキーワードのリストを指定する。
	認識されるのは、これらのキーワードである:

	unnamed		これが含まれると、コピー、削除、変更、ペーストなどの操
			作で、普通なら無名レジスタが使われるところで、全てクリ
			ップボードレジスタ "*" が使われるようになる。ただしレ
			ジスタ名を陽に指定すれば、オプション 'clipboard' に
			"unnamed" が含まれているかいないかに関わらず、指定され
			たレジスタが使われる。またクリップボードレジスタは、"*
			という記法を用いれば常にアクセスできる。
			|gui-clipboard| も参照すること。

	autoselect	オプション 'guioptions' の 'a' フラグのように働く: これ
			が含まれると、Visualモードが開始されるたび、または
			Visual選択範囲が変更されるたびに、Vimはウィンドウシス
			テムのグローバルなクリップボードのオーナーになろうとす
			るか、選択されたテキストをクリップボード用レジスタ "*
			を使ってクリップボードにコピーしようとする。詳細につい
			ては |guioptions_a| と |quotestar| を参照すること。GUI
			機能が有効のときはオプション 'guioptions' の 'a' フラ
			グが使用され、無効のときはこの "autoselect" フラグが使
			用される。
			また、モードレスなセレクションにも適用される。

	autoselectml	"autoselect" と似ているが、モードレスセレクションのみ
			に適用される。オプション 'guioptions' の 'A' フラグと
			比較してみること。

	exclude:{pattern}
			ターミナルの名前 'term' にマッチするパターンを定義する。
			パターンがマッチすると、Xサーバとの通信がなされなくなる。
			このオプションは次のようなときに便利である。
			- Vimをコンソールで使用しているとき。
			- アプリケーションを別のディスプレイで使うため、環境変
			  数 $DISPLAY が設定されているとき。
			- コンソールでVimを使用している最中にXサーバが終了させ
			  られ、Vimをキルせざるを得ないかもしれないとき。
			Xサーバと全く通信しないようにするには、次のようにする: >
				exclude:.*
<			これは引数 |-X| を使用したのと同じ効果を持つ。
			Note 副作用として、ウィンドウのタイトルは復元されない
			ので注意すること。
			オプション 'magic' の値は無視され、 {pattern} は
			オプション 'magic' がオンのように解釈される。
			残りのオプションの値は {pattern} に適用される。 this
			must be the last entry.

						*'cmdheight'* *'ch'*
'cmdheight' 'ch'	数値	(既定では 1)
			グローバル
			{Vi にはない}
	コマンドラインに使われるスクリーン上の行数。|hit-enter| プロンプトの出
	現を避けるのに役立つ。

						*'cmdwinheight'* *'cwh'*
'cmdwinheight' 'cwh'	数値	(既定では 7)
			グローバル
			{Vi にはない}
			{Vi mが |+vertsplit| 機能付きでコンパイルされたときの
			み使用可能}
	コマンドライン・ウィンドウに使われるスクリーン上の行数。|cmdwin| を参
	照すること。

						*'columns'* *'co'*
'columns' 'co'		数値	(既定では 80 またはターミナルの幅)
			グローバル
			{Vi にはない}
	スクリーン上の列幅。普通このオプションはターミナルの初期化の時点で設定
	され、手動で設定する必要はない。
	VimがGUI環境内やサイズ変更可能なウィンドウ内で実行されているときは、こ
	のオプションを変更するとウィンドウサイズも変更されるかもしれない。
	あなたがこのオプションの値を変更したのに、Vimがディスプレイの列幅の物
	理的な値を変更できなかったら、ディスプレイ表示がめちゃめちゃになるおそ
	れがある。

						*'comments'* *'com'*
'comments' 'com'	文字列	(既定では
				"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+comments| 機能付きでコンパイルされたときのみ
			使用可能}
	コメント行の始まりとなる文字列の、コンマ区切りのリスト。
	|format-comments| を参照すること。バックスラッシュ(訳注: 文書先頭も参
	照)を使って、値にスペースを含める方法については、|option-backslash| を
	参照すること。

						*'commentstring'* *'cms'*
'commentstring' 'cms'	文字列	(既定では "/*%s*/")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	コメント用のテンプレート(雛形)。値の中の "%s" はコメントの内容と置き換
	えられる。現在のところ、折り畳み用のマーカを追加するためにのみ使用され
	ている。|fold-marker| を参照すること。

			*'compatible'* *'cp'* *'nocompatible'* *'nocp'*
'compatible' 'cp'	切替	(既定では オン、 .vimrc ファイルが発見されたら
				オフ)
			グローバル
			{Vi にはない}
	このオプションは、VimをなるべくVi互換にするか、便利な機能を使えるよう
	にするかを決定する。
	これは、特別な種類のオプションである。このオプションの値が変更されると、
	それに伴って他のオプションの値も変更されるからだ。＊注意: このオプショ
	ンの値を変更すると、予期しない効果が数多く現れる。キーマップの解釈は変
	わり、アンドゥも違った方法で行われる、等々。このオプションを vimrc ファ
	イル内で設定するなら、一番先頭に置くこと。
	既定ではこのオプションはオンになっていて、その他のオプションにはViの既
	定値が使われる。この既定値は、VimをViと全く同じように使うことを望み、
	オプション 'compatible' について知りもしない、または知りたいとも思わな
	い人たちのためのものである。
	Vimが立ち上がる間に ".vimrc" ファイルが見つかると、このオプションはオ
	フにされ、その他のオプションで変更されていないものは、みなVimの既定値
	に設定される。要するに、Vimは ".vimrc" ファイルが存在するならVimの既定
	値を、存在しないならViの既定値を使うのだ (Note: システム全体用の vimrc
	ファイルは関係ないことに注意)。 |compatible-default| も参照すること。

	このオプションは引数 "-C" でオンに、引数 "-N" でオフにできる。 |-C| と
	|-N| を参照すること。
	このオプションをオフに設定すると、「Viの既定値」と「Vimの既定値」が異
	なっているオプションについて、Vimの既定値が用いられるようになる。下の
	表で '+' がついているものを参照すること。その他のオプションは影響を受
	けない。
	このオプションがオンに設定されると、他のオプションがいくつか変更され、
	Vimはできる限りVi互換になろうとする。下の表を参照すること。これはVi互
	換の編集方法に戻りたいと思うときに使うことができる。
	'cpoptions' も参照すること。

	オプション	+ Viの既定値	効果	~

	'allowrevins'	  オフ		CTRL-_ コマンドなし
	'backupcopy'	  Unix: "yes"	バックアップファイルがコピーになる
			  他: "auto"    バップアップはコピーまたはリネーム
	'backspace'	  ""		普通のバックスペース
	'backup'	  オフ		バックアップファイルなし
	'cindent'	  オフ		C言語ファイルにインデントなし
	'cedit'		+ ""		|cmdwin| を開くキーなし
	'cpoptions'	+ (全フラグ)	Vi互換のフラグ
	'cscopetag'	  オフ		":tag" に cscope を使わない
	'cscopetagorder'  0		|cscopetagorder| を参照
	'cscopeverbose'	  オフ		|cscopeverbose| を参照
	'digraph'	  オフ		ダイグラフなし
	'esckeys'	+ オフ		Insertモードで <Esc>－キー なし
	'expandtab'	  オフ		タブはスペースに展開されない
	'fileformats'	+ ""		自動ファイルタイプ決定なし
			  "dos,unix"	ただし DOS, Windows と OS/2 以外で
	'formatoptions'	+ "vt"		Vi互換の文書整形
	'gdefault'	  オフ		":s" でフラグの既定値に 'g' なし
	'history'	+ 0		コマンドラインの履歴なし
	'hkmap'		  オフ		ヘブライ語用キーボードマップなし
	'hkmapp'	  オフ		phoneticヘブライ語用キーボードマップなし
	'hlsearch'	  オフ		検索でマッチした文字列に強調なし
	'incsearch'	  オフ		インクリメンタル・サーチなし
	'indentexpr'	  ""		expression によるインデントなし
	'insertmode'	  オフ		Insertモードでの開始なし
	'iskeyword'	+ "@,48-57,_"	キーワードはアルファベットと数字と '_'
	'joinspaces'	  オン		ピリオドの後ろには空白を2個挿入
	'modeline'	+ オフ		モードラインなし
	'more'		+ オフ		リスト表示は止まらない
	'revins'	  オフ		逆向き挿入なし
	'ruler'		  オフ		ルーラなし
	'scrolljump'	  1		ジャンプスクロールなし
	'scrolloff'	  0		スクロールにオフセットなし
	'shiftround'	  オフ		インデントは shiftwidth の整数倍でない
	'shortmess'	+ ""		メッセージの短縮なし
	'showcmd'	+ オフ		コマンドの文字は表示されない
	'showmode'	+ オフ		現在のモードは表示されない
	'smartcase'	  オフ		大文字小文字の無視は自動的にならない
	'smartindent'	  オフ		「賢い」インデントなし
	'smarttab'	  オフ		「賢い」タブ挿入なし
	'softtabstop'	  0		タブは常に 'tabstop' を基準
	'startofline'	  オン		いくつかのコマンドでさらに行頭に移動する
	'tagrelative'	+ オフ		タグファイル名は相対的でない
	'textauto'	+ オフ		自動改行コード決定なし
	'textwidth'	  0		自動行分割なし
	'tildeop'	  オフ		ティルデはオペレータではない
	'ttimeout'	  オフ		ターミナルのタイムアウトなし
	'whichwrap'	+ ""		左から右への移動は行を超えない
	'wildchar'	+ CTRL-E	現在の値が <Tab> のときのみ、コマンド
					ライン補完に CTRL-E を使う
	'writebackup'	  オンかオフ	+writebackup 機能による

						*'complete'* *'cpt'*
'complete' 'cpt'	文字列	(既定では: ".,w,b,u,t,i")
			バッファについてローカル
			{Vi にはない}
	このオプションは、CTRL-P コマンドや CTRL-N コマンドによるキーワード補
	完 |ins-completion| の動作を指定する。このオプションは行全体の補完
	|i_CTRL-X_CTRL-L| にも適用される。このオプションは補完の方法と、キーワー
	ド検索の対象となる場所を示す、コンマ区切りのフラグのリストである。
	.	カレントバッファから検索 (オプション 'wrapscan' の値は無視)
	w	別のウィンドウ内のバッファから検索
	b	バッファリスト内の、現在読み込まれている別のバッファから検索
	u	バッファリスト内の、現在読み込まれていない別のバッファから検索
	U	バッファリストにないバッファから検索
	k	オプション 'dictionary' で指定されたファイルから検索
	k{dict}	{dict} で与えられたファイルから検索。 "k" フラグを複数指定して
		もよい。ファイル名はパターンでも指定できる。例: >
			:set cpt=k/usr/dict/*,k~/spanish
<	s	オプション 'thesaurus' で指定されたファイルから検索
	s{tsr}	{tsr} で与えられたファイルから検索。 "s" フラグを複数指定して
		もよい。ファイル名はパターンでも指定できる。
	i	カレントファイルとインクルードされるファイルから検索
	d	カレントファイルとインクルードされるファイルから、定義された名
		前またはマクロを検索 |i_CTRL-X_CTRL-D|
	]	タグ補完
	t	"]" と同じ

	読み込まれていないバッファでは、何しろ読み込まれていないのだから、
	|:autocmd| は実行されていない。そのため、ある種のファイルからは思いも
	しないキーワードを補完してしまうことがある (gzip圧縮されたファイルな
	ど)。読み込まれていないバッファは、行全体の補完には使われない。

	既定では ".,w,b,u,t,i" となっていて、これは検索対象を次のように指定し
	ている。
	   1. カレントバッファ
	   2. 別のウィンドウ内のバッファ
	   3. 他の読み込まれたバッファ
	   4. 読み込まれていないバッファ
	   5. タグ
	   6. インクルードされるファイル

	CTRL-N コマンドと CTRL-P コマンドはオプション 'iskeyword' を利用した全
	てのファイル名展開で使用できる (つまり辞書 |i_CTRL-X_CTRL-K| 、インク
	ルードされるパターン |i_CTRL-X_CTRL-I|、タグ |i_CTRL-X_CTRL-]| および
	通常の展開)。

				*'confirm'* *'cf'* *'noconfirm'* *'nocf'*
'confirm' 'cf'		切替 (既定ではオフ)
			グローバル
			{Vi にはない}
	オプション 'confirm' がオンならば、バッファへの変更を保存していないと実
	行に失敗する操作 (つまり ":q" と ":e") の際、ダイアログ |dialog| を開
	いてファイルを保存するかどうか尋ねる。これがオンになっていても、意図的
	に変更を廃棄したいなら ! を使える。
	オプション 'confirm' がオフでも、|:confirm| コマンドで個別に確認を求め
	ることができる (これはキーマッピングでとても便利である)。
	関数 |confirm()| とオプション 'guioptions' の 'v' フラグも参照すること。

			*'conskey'* *'consk'* *'noconskey'* *'noconsk'*
'conskey' 'consk'	切替 (既定ではオフ)
			グローバル
			{Vi にはない}  {Vi mのMS-DOS版のみ}
	このオプションがオンのとき、キーボードの文字を受け取るのに直接コンソー
	ル出入力が使われる。
	これはたいていの場合有効である。|'bioskey'| も参照すること。合わせて、
	3種類のコンソール入力が使える:
	'conskey'    'bioskey'	    action ~
	  オン	     オンかオフ	    直接コンソール入力
	  オフ		オン	    BIOS
	  オフ		オフ	    標準入力

						*'cpoptions'* *'cpo'*
'cpoptions' 'cpo'	文字列	(Vimの既定値: "aABceFs",
				 Viの既定値:  全てのフラグ)
			グローバル
			{Vi にはない}
	1文字のフラグの列で設定する。フラグが設定されると、対応する動作がVi互
	換になる。このオプションは、大部分、またはある程度のVi互換が求められる
	ときに使われる。
	'cpoptions' は "compatible-options (互換オプション)" の意味である。
	読みやすくするためにコンマを入れてもよい。
	将来追加されるフラグによる問題を避けるため、コマンド ":set" では "+="
	と "-=" を使うこと |add-option-flags| 。
	NOTE: このオプションは 'compatible' がオンのときはVi互換の方の値に設定
	され、オプション 'compatible' がオフのときはVim互換の方の値に設定される
	ので注意すること。

	      フラグ	動作 ~
		a	これが含まれると、コマンド ":read" にファイル名の引数を
			与えたとき、そのファイルをカレントウィンドウの代替ファ
			イルに設定する。
		A	これが含まれると、コマンド ":write" にファイル名の引数
			を与えたとき、そのファイルをカレントウィンドウの代替ファ
			イルに設定する。
		b	コマンド ":map" 内の "\|" がコマンドの終端と見なされる
			ようになる。'\' がキーマッピングに含まれていても、'|'
			の次のテキストは次のコマンドと見なされる。'|' をキーマッ
			ピングに含めるには、バックスラッシュ (訳注: 文書先頭を
			参照) でなく CTRL-V を使うこと。キーマッピング、略語、
			メニュー、autocmd コマンドの全てに適用される。
			|map_bar| も参照すること。
		B	バックスラッシュ (訳注: 文書先頭を参照) が、":menu" コ
			マンドのメニューから実行される部分、キーマッピング、略
			語において、特別な意味を持たなくなる。バックスラッシュ
			を CTRL-V のように使いたいのならこのフラグを除くこと。
			例えば、":map X \<Esc>" というコマンドで X がマップさ
			れるのは:
			   'B' が含まれたとき:  "\^["    (^[ は本当の <Esc>)
			   'B' が除かれたとき:  "<Esc>"  (5個の文字)
			       (どちらの場合も '<' フラグが除かれているとする)
		c	(訳注: 検索でマッチする文字列があった後) カーソル位置
			のマッチの終わりから次の検索を行う。このフラグが含まれ
			ないと、次の検索はカーソル位置の1文字後から始まる。'c'
			フラグが含まれると、"/abab" で検索したとき
			"abababababab" には3回しかマッチしないが、'c' フラグが
			含まれないと5回マッチする。
		C	コマンド ":source" で読み込まれたファイルのうち、バック
			スラッシュ(訳注: 文書先頭を参照) で始まる行を連結しな
			い。|line-continuation| を参照すること。
		d	オプション 'tags' 内で "./" という記法を使ったとき、タ
			グファイルはカレントファイルのディレクトリでなく、カレ
			ントディレクトリから探す。
		D	|r|, |f| や |t| コマンドのような、文字を引数に取る
			Normalモードコマンドの後で、CTRL-K コマンドによるダイ
			グラフの入力ができなくなる。
		e	":@r" でレジスタの内容を実行するとき、レジスタが行単位
			の効果を持たないときでも、常に最終行に <CR> を付け加え
			る。このフラグが含まれないときは、レジスタの内容が行単
			位の効果を持たず、かつ <CR> で終わらないならば、実行す
			ると最終行はコマンドラインに表示され、<CR> を打ち込む
			までは編集できる。
		E	空の範囲に "y", "d", "c", "g~", "gu", "gU" などのコマ
			ンドを使うとエラーになる。オペレータは作用する対象が最
			低でも1文字ないと使えない。例:
			これが含まれると、最初の桁で "y0" を行うとエラーになる。
		f	これが含まれると、カレントバッファにファイル名がまだ設
			定されていないなら、コマンド ":read" にファイル名の引数
			を与えたとき、そのファイル名をカレントバッファのファイ
			ル名に設定する。
		F	これが含まれると、カレントバッファにファイル名がまだ設
			定されていないなら、コマンド ":write" にファイル名の引
			数を与えたとき、そのファイル名をカレントバッファのファ
			イル名に設定する。
		g	コマンド ":edit" を引数なしで使うと1行目に移動する。
		i	これが含まれると、ファイルの読み込み中に中断が起きたと
			き、ファイルは変更されたままになる。
		j	行の連結時に、'.' の後にのみ空白を2個追加し、'!' や
			オプション '?' の後にはそうしない。'joinspaces' も参照
			すること。
		J	文 |sentence| は '.', '!' または '?' の後に2個の空白を
			伴わなければならない。<Tab> は空白とは見なされない。
		k	コマンド ":menu" のメニューから実行される部分、キーマッ
			ピング、略語において、直接入力されたキーコードを認識し
			ない。例えば、<Key> が ^[OA を送るなら (ここで ^[ は
			<Esc>)、":map X ^[OA" というコマンドで X がマップされ
			るのは:
			    'k' が含まれたとき:  "^[OA"   (3個の文字)
			    'k' が除かれたとき:  "<Key>"  (1個のキーコード)
			下の '<' フラグも参照すること。
		K	キーマッピングの途中で、キーコードが完全に入力されるの
			を待たない。
			Don't wait for a key code to complete when it is
			halfway a mapping.  This breaks mapping <F1><F1> when
			only part of the second <F1> has been read.  こうすると
			<F1><Esc> と打ち込めばマッピングをキャンセルできる。
		l	検索パターンの [] 範囲内で、バックスラッシュ (訳注: 文
			書先頭を参照) は文字通りに解釈され、"\]" だけが特別な
			意味を持つ。|/[]| を参照すること。
			   'l' が含まれたとき:
				"/[ \t]"  がマッチするのは <Space>, '\' と 't'
			   'l' が除かれたとき:
				"/[ \t]"  がマッチするのは <Space> と <Tab>
		L	オプション 'list' がオンのとき、 'wrapmargin' オプショ
			ン、オプション 'textwidth' とVirtual replaceモード
			(|gR| を参照) で、<Tab> の普通の数え方をせず、2文字に
			数える。
		m	これが含まれると、対応する括弧の表示を1/2秒待つ。含ま
			れていないと、対応する括弧の表示を1/2秒または次の文字
			が打ち込まれるまで待つ。|'showmatch'| を参照すること。
		n	これが含まれると、オプション 'number' による行番号表示
			に使われる桁も、折り返された行の表示に使われる。
		o	検索コマンドの行オフセットを、次回の検索のために保存し
			ない。
		O	ファイルが上書きされたとき、編集を始めたときにはそのファ
			イルが存在しなかった場合でも警告しない。これは別人に突
			然作り出されたファイルに対する防御である。Viはこれに警
			告を出さなかった。
		p	Vi互換のLisp用インデント。これが含まれないと、いくらか
			良いアルゴリズムが使われる。
		r	リドゥ (コマンド "." ) で検索を繰り返すとき、実際に以前
			使われた検索文字列でなくコマンド "/" を使う。
		s	バッファに初めて移動する時点でバッファのオプションが設
			定される。これは Vim version 3.0 と同じ動作である。そ
			して既定ではこの動作を行う。これが含まれないと、オプショ
			ンはバッファが作られた時点で設定される。
		S	バッファのオプションを常にバッファに移動する時点で設定
			する ('readonly', 'fileformat', 'filetype' と 'syntax'
			オプション以外)。これは (ほとんど) Vi互換の設定である。
			オプションはカレントバッファ内で設定される。ユーザがオ
			プションの値を変更し、その後で別のバッファに移ると、そ
			の値はコピーされる。事実上、バッファのオプションを全て
			のバッファに対しグローバルにしている。

			's'   'S'   バッファのオプションをコピーするタイミング
			オフ  オフ  バッファが作られた時点
			オン  オフ  バッファに初めて移動した時点 (既定)
			なし  オン  バッファに移動するたび (vi互換)

		t	タグコマンドの検索パターンがコマンド "n" にも使われる。
			これが含まれないと、検索パターンの履歴には加えられるが、
			最終検索パターンは変化しない。
		u	アンドゥがVi互換になる。|undo-two-ways| を参照すること。
		w	空白の上でコマンド "cw" を使ったとき、1文字だけ変更し
			て、次の単語の始まりまでの空白は変更しない。
		W	読み込み専用ファイルを上書きしない。これが含まれないと、
			可能であればコマンド ":w!" で読み込み専用ファイルも上
			書きできる。
		x	コマンドラインで <Esc> を打ち込むとコマンドを実行する。
			Vimでの既定ではコマンドライン入力を中止して元のモード
			に戻る。それは <Esc> は普通はコマンドの中止に使われる
			からである。|c_<Esc>| を参照すること。
		y	コピーコマンドをコマンド "." でリドゥできる。
		!	フィルタコマンドをリドゥするとき、何であってもとにかく
			最後に実行された外部コマンドを使う。これが含まれないと、
			最後に実行された「フィルタ」コマンドが使われる。
		$	1行に対して変更をするとき、行を再描画せず、代わりに変
			更されたテキストの最後に '$' を表示する。変更されたテ
			キストはユーザが新しいテキストを入力したときに上書きさ
			れる。その行はユーザがカーソルを挿入点から動かすコマン
			ドを入力したときに再描画される。
		%	コマンド "%" でVi互換の対応検索が行われる。
			"#if", "#endif" などを認識しない。
			"/*" と "*/" を認識しない。
			単引用符または二重引用符の内部の括弧も数えられる。する
			と括弧を含む文字列が対応を乱すことになる。例えば、
			"if (strcmp("foo(", s))" などでは最初の括弧と最後の括
			弧はマッチしない。これが含まれないと、単引用符または二
			重引用符の内部の括弧は特別な扱いを受ける。引用符の外部
			の括弧の対応を調べるときは、引用符の内部は一切無視され
			る。引用符の内部の括弧の対応を調べるときは、対応する括
			弧を探す (存在すれば)。これはC言語プログラムではとても
			良く機能する。
		*	コマンド ":*" コマンドを ":@" と同じように扱う。これが
			含まれないと、コマンド ":*" は ":'<,'>" へのエイリアス
			であり、Visualエリアを選択する。
		<	コマンド ":menu" のメニューから実行される部分、キーマッ
			ピング、略語において、|<>| 記法による特殊キーの認識を
			行わない。例えば、":map X <Tab>" というコマンドで X が
			マップされるのは:
			    '<' が含まれたとき:  "<Tab>"  (5個の文字)
			    '<' が除かれたとき:  "^I"     (^I は本当の <Tab>)
			上の 'k' フラグも参照すること。

						*'cscopepathcomp'* *'cspc'*
'cscopepathcomp' 'cspc'	数値	(既定では 0)
			グローバル
			{Vi にはない}
			{Vi mが |+cscope| 機能付きでコンパイルされたときのみ使
			用可能}
	タグのリストの中でいくつのパスのコンポーネントを表示するかを指定する。
	|cscopepathcomp| を参照すること。

						*'cscopeprg'* *'csprg'*
'cscopeprg' 'csprg'	文字列	(既定では "cscope")
			グローバル
			{Vi にはない}
			{Vi mが |+cscope| 機能付きでコンパイルされたときのみ使
			用可能}
	Cscope を実行するコマンド名を指定する。|cscopeprg| を参照すること。
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

				*'cscopetag'* *'cst'* *'nocscopetag'* *'nocst'*
'cscopetag' 'cst'	切替 (既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+cscope| 機能付きでコンパイルされたときのみ使
			用可能}
	タグコマンドに cscope を使う。|cscope-options| を参照すること。
	NOTE: このオプションはオプション 'compatible' がオンに設定されたときに
	オフに設定されるので注意すること。

						*'cscopetagorder'* *'csto'*
'cscopetagorder' 'csto'	数値	(既定では 0)
			グローバル
			{Vi にはない}
			{Vi mが |+cscope| 機能付きでコンパイルされたときのみ使
			用可能}
	コマンド ":cstag" が検索を行う順番を指定する。|cscopetagorder| を参照す
	ること。
	NOTE: このオプションはオプション 'compatible' がオンに設定されたときに
	0 に設定されるので注意すること。

					*'cscopeverbose'* *'csverb'*
					*'nocscopeverbose'* *'nocsverb'*
'cscopeverbose' 'csverb' 切替 (既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+cscope| 機能付きでコンパイルされたときのみ使
			用可能}
			{Vi にはない}
	Cscope のデータベースに情報を追加するときメッセージを表示する。
	|cscopeverbose| を参照すること。
	NOTE: このオプションはオプション 'compatible' がオンに設定されたときに
	オフに設定されるので注意すること。

						*'debug'*
'debug'			文字列	(既定では "")
			グローバル
			{Vi にはない}
	値が "msg" に設定されると、省かれるはずのエラーメッセージも表示される
	ようになる。これはオプション 'foldexpr' オプションや 'indentexpr' をデ
	バッグするのに便利である。

						*'define'* *'def'*
'define' 'def'		文字列	(既定では "^#\s*define")
			グローバル／バッファについてローカル |global-local|
			{Vi にはない}
	マクロ定義を発見するのに使われるパターンを指定する。値はコマンド "/" 
	で使うのと同様の検索パターンである。このオプションはコマンド "[i" や
	コマンド "[d" など |include-search| に使われる。オプション 'isident' は
	マッチした部分の後の定義された名前を認識するのに使われる:
		{match with 'define'}{non-ID chars}{defined name}{non-ID char}
	値に空白やバックスラッシュを含めるためにバックスラッシュを挿入すること
	に関しては、|option-backslash| を参照すること (訳注: 文書先頭も)。
	値は既定ではC言語プログラム用である。C++言語プログラムには、定数定義を
	加えて次のようにすると便利だろう: >
		^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
<	コマンド ":set" で設定するときは、バックスラッシュの数を2倍にする必要が
	ある!

						*'delcombine'* *'deco'*
'delcombine' 'deco'	切替 (既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+multi_byte| 機能付きでコンパイルされたときの
			み使用可能}
	ユニコードのファイルを編集する際にこのオプションがオンならば、バックス
	ペースとNormalモードのコマンド "x" はそれぞれの文字の上の combining
	character のみを削除する。オフのときは (これが既定値である) combining
	character と文字は同時に削除される。

	このオプションは、ヘブライ語その他の言語で、ベースとなる文字の上に
	combining character が付き、combining character のみを削除したいときに
	便利である。

						*'dictionary'* *'dict'*
'dictionary' 'dict'	文字列	(既定では "")
			グローバル／バッファについてローカル |global-local|
			{Vi にはない}
	コンマ区切りのファイル名のリスト。キーワード補完コマンド
	|i_CTRL-X_CTRL-K| 用の単語を探すために使われる。単語のリストからなるファ
	イルを指定する。その中では1行ごとに1語が並べられていてもよいし、1行に
	キーワードでない文字 (空白文字を推奨) で区切られた数語が並んでいてもよ
	い。1行の文字数の最大値は510バイト分である (訳注: 日本語のいわゆる全角
	文字では半分の255文字)。
	ファイル名にコンマを含めるには、コンマの前にバックスラッシュを置くこと。
	コンマの後ろの空白は無視されるが、それ以外の空白はファイル名の一部とし
	て扱われる。バックスラッシュの使い方については |option-backslash| を参
	照すること (訳注: 文書先頭も参照すること)。
	単語リストはどこで見つかるか?
	- FreeBSDでは、"/usr/share/dict/words" というファイルがある。
	- Simtelアーカイブでは、"msdos/linguist" ディレクトリを探すこと。
	- GNUコレクションでは、"miscfiles" の中にある。
	リストにディレクトリを追加するときには |:set+=| コマンド、リストからディ
	レクトリを除くときには |:set-=| コマンドを使うのがよい。こうすると将来
	のヴァージョンで異なった既定値が使われるようになったときに、問題が起き
	るのを防げる。
	安全上の理由から、バックティック (`) をこのオプションの値に使うことは
	できない。

							*'diff'* *'nodiff'*
'diff'			切替 (既定ではオフ)
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+diff| 機能付きでコンパイルされたときのみ使用
			可能}
	カレントウィンドウをファイル間の差異を示すウィンドウのグループに組み入
	れる。|vimdiff| を参照すること。

						*'dex'* *'diffexpr'*
'diffexpr' 'dex'	文字列 (既定では "")
			グローバル
			{Vi にはない}
			{Vi mが |+diff| 機能付きでコンパイルされたときのみ使用
			可能}
	2個のファイル間の差異を求める際に、ed形式のdiffファイルを求めるために
	評価されるexpressionを指定する。|diff-diffexpr| を参照すること。

						*'dip'* *'diffopt'*
'diffopt' 'dip'		文字列 (既定では "filler")
			グローバル
			{Vi にはない}
			{Vi mが |+diff| 機能付きでコンパイルされたときのみ使用
			可能}
	Diffモード用のオプションを設定する。このオプションの値には、以下の文字
	列をコンマで区切ったものが設定できる。

		filler		片方のウィンドウ内のテキストのある位置に行が挿
				入されていたときに、ウィンドウのスクロールを同
				調させるために、埋め立て用の行を表示する。ウィ
				ンドウが隣り合っていて、'scrollbind' オプショ
				ンがオンのときには大抵便利である。

		context:{n}	変更のあった行と、変更がなく折り畳まれている行
				の間に、{n} 行分の「コンテキスト」を表示する。
				これが設定されていないと、コンテキストは6行に
				なる。|fold-diff| を参照すること。

		icase		テキストの大文字と小文字の違いを無視する。"a"
				と "A" は同じものと見なされる。'diffexpr' オプ
				ションの値が空なら、コマンド "diff" に "-i" フ
				ラグを追加する。

		iwhite		空白の数の違いを無視する。'diffexpr' オプショ
				ンの値が空なら、コマンド "diff" に "-b" フラグ
				を追加する。これが正確には何を指定しているのか
				についてはコマンド "diff" のドキュメントを参照
				すること。これは後ろに追加された空白は無視する
				が、前に追加された空白は無視しないはずである。

	例: >

		:set diffopt=filler,context:4
		:set diffopt=
		:set diffopt=filler
<
				     *'digraph'* *'dg'* *'nodigraph'* *'nodg'*
'digraph' 'dg'		切替 (既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+digraphs| 機能付きでコンパイルされたときのみ
			使用可能}
	Insertモードで{char1} <BS> {char2} でダイグラフを入力できるようにする。
	|digraphs| を参照すること。
	NOTE: このオプションはオプション 'compatible' がオンに設定されたときに
	オフに設定されるので注意すること。

						*'directory'* *'dir'*
'directory' 'dir'	文字列	(Amigaでの既定値: ".,t:",
				 MS-DOSとWin32での既定値: ".,c:\tmp,c:\temp"
				 Unixでの既定値: ".,~/tmp,/var/tmp,/tmp")
			グローバル
	スワップファイル用のディレクトリ名を、コンマで区切って指定する。
	- スワップファイルは、リスト内の利用できるディレクトリのうち、先頭のディ
	  レクトリの中に作られる。
	- 値が空だとスワップファイルは作られない (回復は不可能になる!)。
	- ディレクトリに "." を指定すると、編集されているファイルと同じディレ
	  クトリにスワップファイルが作られる。Unixではファイル名の先頭にドット
	  が追加されるので、ディレクトリ内のファイル一覧には表示されない。
	- "./" で始まるディレクトリ (MS-DOSなどでは ".\") を指定すると、編集さ
	  れているファイルからの相対的な位置にスワップファイルが作られる。先頭
	  の "." は編集されているファイルのパス名に置換される。
	- UnixとWin32では、指定されたディレクトリ名の末尾がディレクトリの区切
	  り記号2個で終わっていたら、スワップファイルの名前はフルパスに従って
	  付けられる。スワップファイルのファイル名をフルパス形式で表し、ディレ
	  クトリの区切り文字をパーセント記号 '%' で置き換えたものが使われる。
	  こうするとスワップファイル格納用ディレクトリの中でも、ファイル名の一
	  意性が保証される。
	- コンマの後の空白は無視されるが、その他の場所の空白はディレクトリ名の
	  一部と見なされる。ディレクトリ名の先頭に空白を指定したいなら、バック
	  スラッシュを前に付けること。
	- コンマをディレクトリ名の一部に使いたいなら、バックスラッシュを前に付
	  けること。
	- ディレクトリ名は ':' や '/' で終わっていてもよい。
	- 環境変数は展開される |:set_env|。
	- '\' の扱いには注意すること。空白の前には1個置く。値の中に指定するに
	  は2個置く (|option-backslash| を参照すること)。例: >
	    :set dir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
<	- Vim version 3.0 との後方互換性のために、値の先頭に '>' を置いてもそ
	  れは無視される。
	リストの先頭には "." を指定することを推奨する。こうすると、同じファイ
	ルを2重に編集しようとすると警告が出る。Unixでディレクトリ "/tmp" を使
	うのはお勧めできない。システムがクラッシュすると、スワップファイルも失
	われてしまう。ディレクトリ "/var/tmp" の中はリブート時にも大抵クリアさ
	れないので、ディレクトリ "/tmp" よりもよい選択である。しかしその中には
	多くのファイルが入っているかもしれないので、ユーザのスワップファイルは
	他のファイルに紛れて分からなくなってしまうかもしれない。ユーザのホーム
	ディレクトリ内のディレクトリ "tmp" が最初に試されるのはそのためだ。
	リストにディレクトリを追加するときにはコマンド |:set+=|、リストからディ
	レクトリを除くときにはコマンド |:set-=| を使うのがよい。こうすると将来
	のヴァージョンで異なった既定値が使われるようになったときに、問題が起き
	るのを防げる。
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。
	{Vi: tempファイルを作るディレクトリを指定する。既定では "/tmp"}

					*'display'* *'dy'*
'display' 'dy'		文字列	(既定では "")
			グローバル
			{Vi にはない}
	テキスト表示の方法を変える。値はフラグのコンマ区切りのリストである:
	lastline	これが含まれると、ウィンドウの最後の行ができる限りまで
			表示される。含まれないと、最後の行が収まりきらないなら
			その行は "@" と表示される。
	uhex		印刷できない文字を (訳注: つまり、表示できる文字に対応
			していない文字コードを) <xx> という形式で16進数表示し、
			^C や ~C の形式を使わない。

						*'eadirection'* *'ead'*
'eadirection' 'ead'	文字列	(既定では "both")
			グローバル
			{Vi にはない}
			{Vi mが |+vertsplit| 機能付きでコンパイルされたときの
			み使用可能}
	オプション 'equalalways' が適用されるときに、
		ver	ウィンドウの高さにのみ影響がある
		hor	ウィンドウの幅にのみ影響がある
		both	ウィンドウの高さと幅、両方に影響がある

			   *'ed'* *'edcompatible'* *'noed'* *'noedcompatible'*
'edcompatible' 'ed'	切替	(既定ではオフ)
			グローバル
	コマンド ":substitute" のフラグ 'g' とフラグ 'c' を、次に別の方を指定
	するまでずっと効力を持つようにする。|complex-change| を参照すること。
	オプション 'gdefault' も参照すること。
	このオプションをオンに設定するのは推奨できない!

					*'encoding'* *'enc'*
'encoding' 'enc'	文字列 (既定では "latin1"
				または環境変数 $LANG によって決まる値)
			グローバル
			{Vi にはない}
			{Vi mが |+multi_byte| 機能付きでコンパイルされたときの
			み使用可能}
	Vim内部で使われる文字エンコーディングを設定する。そのエンコーディング
	はバッファやレジスタ内のテキスト、expression内の文字列、viminfo ファイ
	ル内のテキストなどに適用される。つまり、このオプションはVimの通常扱う
	文字の種類を設定する。指定できる値については |encoding-names| を参照す
	ること。

	NOTE: このオプションの値を変更しても、Vim内部の既存のテキストのエンコー
	ディングは変化しないので注意すること。マルチバイト文字がおかしくなる恐
	れもある。既定の値から変更しないか、Vimが立ち上がるときに限って設定す
	ること。|multibyte| を参照すること。

	編集するファイルの文字エンコーディングはオプション 'encoding' の値と異
	なってもよい。そちらはオプション 'fileencoding' で設定される。エンコー
	ディングの変換は組み込み関数 iconv() またはオプション 'charconvert' で
	指定される expression によってなされる。

	普通、オプション 'encoding' の値はユーザのカレントロケールと同じである。
	Vimがユーザの環境設定を認識したならば、それが既定値になる。オプション
	'encoding' の値がカレントロケールに設定されていなければ、入力されたテ
	キストと表示されるテキストを変換するために、オプション 'termencoding'
	が設定されていなければならない。|encoding-table| を参照すること。

	このオプションを設定すると、必要に応じてフォントを設定できるように、
	|autocommand| のイベント |EncodingChanged| が発生する。

	オプションが設定されると、値は小文字に変換される。そのため、値を大文字
	で設定してもよい。アンダースコア(下線) '_' はハイフン '-' に変換される。
	エンコーディングが認識されると、値は標準の名前に変換される。例えば
	"Latin-1" は "latin1" に、"ISO_88592" は "iso-8859-2" に、"utf8" は
	"utf-8" になる。

	Note: "latin1" という値は、エンコーディングを判別できなかったときにも
	使われるので注意すること。これが正しいのは、実際に latin1 エンコーディ
	ングのファイルを編集するときだけである！実際の文字セットが latin1 でな
	いときは、オプション 'fileencoding' とオプション 'fileencodings' の値
	が空であるのを確認すること。変換が必要なときは、utf-8 の使用に切り替え
	ること。

	値が "unicode", "ucs-2" または "ucs-4" であるとき、Vim内部では utf-8が
	使われている。これにはユーザが編集中に注意を払うことはないが、
	|viminfo-file| については問題になる。またVimはターミナルも utf-8 を使
	うことを想定する。そのため、オプション 'encoding' の値を utf-8 でなく
	上記のいずれかの値に設定しても、オプション 'fileencoding' の値が空のと
	きに編集するファイルのエンコーディングにしか影響がない。

	オプション 'encoding' の値が Unicode の一種に設定され、オプション
	'fileencodings' がまだ設定されていなければ、オプション 'fileencodings'
	の既定値は変更される。

			*'endofline'* *'eol'* *'noendofline'* *'noeol'*
'endofline' 'eol'	切替	(既定ではオン)
			バッファについてローカル
			{Vi にはない}
	ファイルを書き込むときに、このオプションがオフでオプション 'binary' が
	オンならば、ファイルの最終行に <EOL> が書き込まれない。このオプション
	はファイルの編集を始めるときには自動的にオンになる。ただし編集を始めた
	ファイルの最終行に <EOL> がないときにはオフになる。普通はユーザがこの
	オプションを設定する必要はない。オプション 'binary' がオフのときはこの
	オプションの値は使われない。オプション 'binary' がオンのときには、ファ
	イルの最終行に <EOL> があったかどうかを復元するためにこのオプションが
	使われる。そのため、ユーザがファイルを書き込むときに元のファイルの状態
	を保つことができる。しかし状態を変更することもできる。

			     *'equalalways'* *'ea'* *'noequalalways'* *'noea'*
'equalalways' 'ea'	切替	(既定ではオン)
			グローバル
			{Vi にはない}
	オンのとき、ウィンドウを分割したり閉じたりした後、全てのウィンドウが自
	動的に同じサイズになる。オフのときは、ウィンドウを分割するとカレントウィ
	ンドウのサイズだけが減り、他のウィンドウに変化はない。ウィンドウを閉じ
	ると、(オプション 'splitbelow' と 'splitright' の値に従って) 閉じたウィ
	ンドウの隣のウィンドウの行数が増す。
	水平に分割されたウィンドウと垂直に分割されたウィンドウが混ざっていると
	きは、サイズの最小値が計算され、いくつかのウィンドウは (余裕があれば)
	大きくなる。オプション 'eadirection' はサイズの変化する方向を指定する。

						*'equalprg'* *'ep'*
'equalprg' 'ep'		文字列	(既定では "")
			グローバル／バッファについてローカル |global-local|
			{Vi にはない}
	コマンド "=" に使う外部プログラムを指定する。値が空のときは内部関数が
	整形に使われる (オプション 'lisp', 'cindent' または 'indentexpr')。
	環境変数は展開される |:set_env|。値に空白やバックスラッシュ (訳注: 文
	書先頭を参照すること) を含めることについては |option-backslash| を参照
	すること。
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

			*'errorbells'* *'eb'* *'noerrorbells'* *'noeb'*
'errorbells' 'eb'	切替	(既定ではオフ)
			グローバル
	エラーメッセージに伴ってベル (ビープ音または画面フラッシュ) を発生させ
	る。このオプションはエラーメッセージにのみ適用され、メッセージのない多
	くのエラー (例えばNormalモードで <ESC> を打ち込んだとき) についてはベ
	ルは常に使用される。ベルをビープ音にしたり、画面フラッシュにしたり、無
	効にしたりするためにはオプション 'visualbell' を参照すること。

						*'errorfile'* *'ef'*
'errorfile' 'ef'	文字列	(Amigaでの既定値: "AztecC.Err",
					他の既定値: "errors.err")
			グローバル
			{Vi にはない}
			{Vi mが |+quickfix| 機能付きでコンパイルされたときのみ
			使用可能}
	QuickFixモードで使われるエラーファイルの名前 (|:cf| を参照すること)。
	コマンドライン引数 "-q" が指定されたときは、オプション 'errorfile' の
	値はそれに続く値に設定される。|-q| を参照すること。
	コマンド ":make" には「使われない」。それについてはオプション 'makeef'
	を参照すること。
	環境変数は展開される |:set_env|。値に空白やバックスラッシュ (訳注: 文
	書先頭を参照すること) を含めることについては |option-backslash| を参照
	すること。
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'errorformat'* *'efm'*
'errorformat' 'efm'	文字列	(既定値はとても長い)
			グローバル／バッファについてローカル |global-local|
			{Vi にはない}
			{Vi mが |+quickfix| 機能付きでコンパイルされたときのみ
			使用可能}
	エラーファイルの内容の書式を、関数 scanf 風に指定する (|errorformat|
	を参照すること)。

				     *'esckeys'* *'ek'* *'noesckeys'* *'noek'*
'esckeys' 'ek'		(Vimの既定値: オン, Viの既定値: オフ)
			グローバル
			{Vi にはない}
	このオプションをオンに設定すると、<Esc> で始まるファンクションキーも
	Insertモードで認識されるようになる。このオプションがオフのときは、カー
	ソルキーとファンクションキーは、<Esc> で始まるならInsertモードで使うこ
	とができない。こうすることの利点は、 <Esc> を一回打ち込むだけですぐに
	認識され、1秒ほど待つ必要がないことだ。このオプションをオフにしなくて
	も、オプション 'timeoutlen' とオプション 'ttimeoutlen' の値を変更して
	もいいかもしれない。  Note オプション 'esckeys' がオフのときでも、どの
	キーをマッピングすることもできるが、そのままではカーソルキーは使用でき
	ないことに注意すること。
	NOTE: このオプションはオプション 'compatible' がオンに設定されたときに
	はViの既定値に、オフに設定されたときにはVimの既定値に設定されるので注
	意すること。

						*'eventignore'* *'ei'*
'eventignore' 'ei'	文字列	(既定では "")
			グローバル
			{Vi にはない}
			{Vi mが |+autocmd| 機能付きでコンパイルされたときのみ
			使用可能}
	Autocommandのイベント名のうち、無視したいものをリストにして指定する。
	値が "all" に設定されると、全ての autocommand のイベントが無視され、
	autocommand は実行されなくなる。
	そうしないとき、値にはイベント名のコンマ区切りのリストを指定する。例: >
	    :set ei=WinEnter,WinLeave
<
				 *'expandtab'* *'et'* *'noexpandtab'* *'noet'*
'expandtab' 'et'	切替	(既定ではオフ)
			バッファについてローカル
			{Vi にはない}
	Insertモードで: <Tab> を挿入するのに、適切な数の空白を使う。また、コマ
	ンド '>' や '<' によるインデントや、オプション 'autoindent' がオンのと
	きのインデントでも空白を使う。オプション 'expandtab' がオンのときに本
	当のタブを挿入するには、CTRL-V<Tab> を使うこと。|:retab| と
	|ins-expandtab| も参照すること。
	NOTE: このオプションはオプション 'compatible' がオンに設定されたときオ
	フに設定されるので注意すること。

					*'exrc'* *'ex'* *'noexrc'* *'noex'*
'exrc' 'ex'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	カレントディレクトリ内のファイル .vimrc, .exrc や .gvimrc などの読み込
	みを行う。このオプションをオンにするなら、オプション 'secure' もオンに
	するよう検討すること (|initialization| を参照すること)。ファイル
	.exrc, .vimrc や .gvimrc でローカルなものを用いると潜在的な安全保護の
	漏れを招くので、注意して使うこと！
	|.vimrc| と |gui-init| も参照すること。
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

				*'fileencoding'* *'fenc'* *E213*
'fileencoding' 'fenc'	文字列 (既定では "")
			バッファについてローカル
			{Vi mが |+multi_byte| 機能付きでコンパイルされたときの
			み使用可能}
			{Vi にはない}
	カレントバッファ内のファイルの文字エンコーディングを設定する。
	オプション 'fileencoding' の値がオプション 'encoding' の値と異なるとき、
	ファイルの読み書きの際に文字エンコーディングの変換が行われる。
	オプション 'fileencoding' の値が空だと、オプション 'encoding' と同じ値
	が使われる (ファイルの読み書きの際に変換をしない)。
		警告: 文字エンコーディングを変換すると、情報が失われるおそれが
		ある！オプション 'encoding' の値が "utf-8" だと、変換は大抵成
		功するし、逆変換をしても同じテキストになる。オプション
		'encoding' の値が "utf-8" でないときは、失われる文字があるかも
		しれない！
	設定可能な値についてはオプション 'encoding' を参照すること。それらに加
	え、変換ツール (関数 iconv() またはオプション 'charconvert' に設定され
	たもの) で変換可能なエンコーディングの値も設定できる。
	ファイルを読み込むときには、オプション 'fileencoding' の値はオプション
	'fileencodings' の値の中から設定される。
	あるエンコーディングのファイルを読み込むにはオプション 'fileencoding'
	を設定してもだめで、引数 |++enc| を使う。
	"8bit-" や "2byte-" を頭に付けてもここでは意味がなく、無視される。
	オプションが設定されると、値は小文字に変換される。そのため、値を大文字
	で設定してもよい。アンダースコア(下線) '_' はハイフン '-' に変換される。
	値がオプション 'encoding' の値に含まれることが認識されると、値は標準の
	名前に変換される。例えば"ISO_88592" は "iso-8859-2" になる。
	ファイルの編集を始めた後にこのオプションを設定すると、オプション
	'modified' がオンになる。なぜならそのファイルの中身は、書き込まれると
	きには違ったものになっているからである。
	このオプションは、オプション 'modifiable' がオフのときには設定できない。

							*'fe'*
	NOTE: Vim version 6.0 以前では、このオプションはVim全体の文字エンコー
	ディングを指定していたことに注意すること。これは誤りだった。そのために
	は代わりにオプション 'encoding' を使うこと。古い省略形式の名前は 'fe'
	だが、これはもう使われていない。

					*'fileencodings'* *'fencs'*
'fileencodings' 'fencs'	文字列 (既定値: "ucs-bom", 
				オプション 'encoding' の値がユニコードに設定さ
				れたときは "ucs-bom,utf-8,latin1")
			グローバル
			{Vi mが |+multi_byte| 機能付きでコンパイルされたときの
			み使用可能}
			{Vi にはない}
	このオプションには、ファイルの編集時に考慮される文字エンコーディングの
	リストを指定する。
	ファイルが読み込まれたとき、Vimはこのオプションの値の先頭の文字エンコー
	ディングを使おうとする。そのときエラーが発見されると、値のリスト内で次
	に並んでいるエンコーディングが試される。
	有効なエンコーディングが見つかると、オプション 'fileencoding' の値がそ
	れに設定される。
	全て失敗した場合は、オプション 'fileencoding' の値は空に設定される。こ
	れはオプション 'encoding' の値が使われていることを表す。
		警告: 文字エンコーディングを変換すると、情報が失われるおそれが
		ある！オプション 'encoding' の値が "utf-8" だと、変換は大抵成
		功するし、逆変換をしても同じテキストになる。オプション
		'encoding' の値が "utf-8" でないときは、失われる文字があるかも
		しれない！
	ファイル先頭にユニコードの BOM (Byte Order Mark: バイト順マーク) があ
	るかどうか調べるには、"ucs-bom" という特別な値が使える。この値を
	"utf-8" 等のユニコード系の値よりも後に指定すると正しく機能しない。
	オプション 'fileencodings' の値が空のときにはオプション 'fileencoding'
	の値は変更されない。設定可能な値についてはオプション 'encoding' を参照
	すること。それらに加え、変換ツール (関数 iconv() またはオプション
	'charconvert' に設定されたもの) で変換可能なエンコーディングの値も設定
	できる。
	古いヴァージョンの GNU iconv() による変換は失敗することがある (Vimが与
	えがたいほど大きなバッファを要求するので)。別の実装の iconv() を手に入
	れてみること。
	オプション 'filecharcode' と違い、値を変更しても変換は行われない。

					*'fileformat'* *'ff'*
'fileformat' 'ff'	文字列 (MS-DOS, MS-Windows, OS/2 での既定値: "dos",
				Unix での既定値: "unix",
				Macintosh での既定値: "mac")
			バッファについてローカル
			{Vi にはない}
	バッファにファイルを読み込んだり、バッファからファイルに書き込んだりす
	るときに使われる <EOL> を、カレントバッファについて設定する。
	    dos	    <CR> <NL>
	    unix    <NL>
	    mac	    <CR>
	値に "dos" が使われたとき、ファイル末尾の CTRL-Z は無視される。
	|file-formats| と |file-read| を参照すること。
	ファイルの文字エンコーディングについてはオプション 'fileencoding' を参
	照すること。
	オプション 'binary' がオンのときは、オプション 'fileformat' の実際の値
	は無視され、ファイルの読み書きはこのオプションの値が "unix' に設定され
	たように行われる。
	ファイルの編集を始めたときにオプション 'fileformats' の値が空でなく、
	オプション 'binary' がオフならば、オプション 'fileformat' は自動的に設
	定される。
	ファイルの編集を始めた後にこのオプションを設定すると、オプション
	'modified' がオンになる。なぜならそのファイルの中身は、書き込まれると
	きには違ったものになっているからである。
	このオプションは、オプション 'modifiable' がオフのときには設定できない。
	後方互換性のために: このオプションの値が "dos" に設定されると、オプショ
	ン 'textmode' がオンになり、それ以外ではオプション 'textmode' はオフに
	なる。

					*'fileformats'* *'ffs'*
'fileformats' 'ffs'	文字列 (default:
				Vim+Vi	MS-DOS, MS-Windows OS/2: "dos,unix",
				Vim	Unix: "unix,dos",
				Vim	Mac: "mac,unix,dos",
				Vi	Cygwin: "unix,dos",
				Vi	others: "")
			グローバル
			{Vi にはない}
	This gives the end-of-line (<EOL>) formats that will be tried.  It is
	used when starting to edit a new buffer and when reading a file into
	an existing buffer:
	- When empty, the format defined with 'fileformat' will be used
	  always.  It is not set automatically.
	- When set to one name, that format will be used whenever a new buffer
	  is opened.  'fileformat' is set accordingly for that buffer.  The
	  'fileformats' name will be used when a file is read into an existing
	  buffer, no matter what 'fileformat' for that buffer is set to.
	- When more than one name is present, separated by commas, automatic
	  <EOL> detection will be done when reading a file.  When starting to
	  edit a file, a check is done for the <EOL>:
	  1. If all lines end in <CR><NL>, and 'fileformats' includes "dos",
	     'fileformat' is set to "dos".
	  2. If a <NL> is found and 'fileformats' includes "unix", 'fileformat'
	     is set to "unix".  Note that when a <NL> is found without a
	     preceding <CR>, "unix" is preferred over "dos".
	  3. If 'fileformats' includes "mac", 'fileformat' is set to "mac".
	     This means that "mac" is only chosen when "unix" is not present,
	     or when no <NL> is found in the file, and when "dos" is not
	     present, or no <CR><NL> is present in the file.
	     Also if "unix" was first chosen, but the first <CR> is before
	     the first <NL> and there appears to be more <CR>'s than <NL>'s in
	     the file, then 'fileformat' is set to "mac".
	  4. If 'fileformat' is still not set, the first name from
	     'fileformats' is used.
	  When reading a file into an existing buffer, the same is done, but
	  this happens like 'fileformat' has been set appropriately for that
	  file only, the option is not changed.
	When 'binary' is set, the value of 'fileformats' is not used.

	For systems with a Dos-like <EOL> (<CR><NL>), when reading files that
	are ":source"ed and for vimrc files, automatic <EOL> detection may be
	done:
	- When 'fileformats' is empty, there is no automatic detection.  Dos
	  format will be used.
	- When 'fileformats' is set to one or more names, automatic detection
	  is done.  This is based on the first <NL> in the file: If there is a
	  <CR> in front of it, Dos format is used, otherwise Unix format is
	  used.
	Also see |file-formats|.
	For backwards compatibility: When this option is set to an empty
	文字列 or one format (no comma is included), 'textauto' is reset,
	otherwise 'textauto' is set.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

					*'filetype'* *'ft'*
'filetype' 'ft'		文字列 (既定では "")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+autocmd| 機能付きでコンパイルされたときのみ
			使用可能}
	When this option is set, the FileType autocommand event is triggered.
	All autocommands that match with the value of this option will be
	executed.  Thus the value of 'filetype' is used in place of the file
	name.
	Otherwise this option does not always reflect the current file type.
	This option is normally set when the file type is detected.  To enable
	this use the ":filetype on" command. |:filetype|
	Setting this option to a different value is most useful in a modeline,
	for a file for which the file type is not automatically recognized.
	Example, for in an IDL file: >
		/* vim: set filetype=idl : */
<	|FileType| |filetypes|
	Do not confuse this option with 'osfiletype', which is for the file
	type that is actually stored with the file.
	This option is not copied to another buffer, independent of the 's' or
	'S' flag in 'cpoptions'.

						*'fillchars'* *'fcs'*
'fillchars' 'fcs'	文字列	(default "vert:|,fold:-")
			グローバル
			{Vi にはない}
			{not available when compiled without the |+windows|
			and |+folding| features}
	Characters to fill the statuslines and vertical separators.
	It is a comma separated list of items:

	  item		default		Used for ~
	  stl:c		' ' or '^'	statusline of the current window
	  stlnc:c	' ' or '-'	statusline of the non-current windows
	  vert:c	'|'		vertical separators |:vsplit|
	  fold:c	'-'		filling 'foldtext'
	  diff:c	'-'		deleted lines of the 'diff' option

	Any one that is omitted will fall back to the default.  For "stl" and
	"stlnc" the space will be used when there is highlighting, '^' or '-'
	otherwise.

	Example: >
	    :set fillchars=stl:^,stlnc:-,vert:\|,fold:-,diff:-
<	This is similar to the default, except that these characters will also
	be used when there is highlighting.

	The highlighting used for these items:
	  item		highlight group ~
	  stl:c		StatusLine		|hl-StatusLine|
	  stlnc:c	StatusLineNC		|hl-StatusLineNC|
	  vert:c	VertSplit		|hl-VertSplit|
	  fold:c	Folded			|hl-Folded|
	  diff:c	DiffDelete		|hl-DiffDelete|

					*'fkmap'* *'fk'* *'nofkmap'* *'nofk'*
'fkmap' 'fk'		切替	(既定ではオフ)			*E198*
			グローバル
			{Vi にはない}
			{Vi mが |+rightleft| 機能付きでコンパイルされたときの
			み使用可能}
	When on, the keyboard is mapped for the Farsi character set.
	Normally you would set 'allowrevins' and use CTRL-_ in insert mode to
	toggle this option |i_CTRL-_|.  See |farsi.txt|.

						*'foldclose'* *'fcl'*
'foldclose' 'fcl'	文字列 (既定では "")
			グローバル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	When set to "all", a fold is closed when the cursor isn't in it and
	its level is higher than 'foldlevel'.  Useful if you wants folds to
	automatically close when moving out of them.

						*'foldcolumn'* *'fdc'*
'foldcolumn' 'fdc'	数値 (default 0)
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	When non-zero, a column with the specified width is shown at the side
	of the window which indicates open and closed folds.  The maximum
	value is 12.
	See |folding|.

			*'foldenable'* *'fen'* *'nofoldenable'* *'nofen'*
'foldenable' 'fen'	切替 (既定ではオフ)
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	When off, all folds are open.  This option can be used to quickly
	switch between showing all text unfolded and viewing the text with
	folds (including manually opened or closed folds).  It can be toggled
	with the |zi| command.  The 'foldcolumn' will remain blank when
	'foldenable' is off.
	This option is set by commands that create a new fold or close a fold.
	See |folding|.

						*'foldexpr'* *'fde'*
'foldexpr' 'fde'	文字列 (既定では "0")
			ウィンドウについてローカル
			{Vi にはない}
			{not available when compiled without the |+folding|
			or |+eval| feature}
	The expression used for when 'foldmethod' is "expr".  It is evaluated
	for each line to obtain its fold level.  See |fold-expr|.  Also see
	|eval-sandbox|.

						*'foldignore'* *'fdi'*
'foldignore' 'fdi'	文字列 (既定では "#")
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	Used only when 'foldmethod' is "indent".  Lines starting with
	characters in 'foldignore' will get their fold level from surrounding
	lines.  White space is skipped before checking for this character.
	The default "#" works well for C programs.  See |fold-indent|.

						*'foldlevel'* *'fdl'*
'foldlevel' 'fdl'	数値 (既定では 0)
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	Sets the fold level: Folds with a higher level will be closed.
	Setting this option to zero will close all folds.  Higher numbers will
	close fewer folds.
	This option is set by commands like |zm|, |zM| and |zR|.
	See |fold-foldlevel|.

						*'foldlevelstart'* *'fdls'*
'foldlevelstart' 'fdls'	数値 (既定では -1)
			グローバル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	Sets 'foldlevel' when starting to edit another buffer in a window.
	Useful to always start editing with all folds closed (value zero),
	some folds closed (one) or no folds closed (99).
	This is done before reading any modeline, thus a setting in a modeline
	overrules this option.  Starting to edit a file for |diff-mode| also
	ignores this option and closes all folds.
	It is also done before BufReadPre autocommands, to allow an autocmd to
	overrule the 'foldlevel' value for specific files.
	When the value is negative, it is not used.

						*'foldmarker'* *'fmr'*
'foldmarker' 'fmr'	文字列 (既定では "{{{,}}}")
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	The start and end marker used when 'foldmethod' is "marker".  There
	must be one comma, which separates the start and end marker.  The
	marker is a literal string (a regular expression would be too slow).
	See |fold-marker|.

						*'foldmethod'* *'fdm'*
'foldmethod' 'fdm'	文字列 (既定では "manual")
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	The kind of folding used for the current window.  Possible values:
	|fold-manual|	manual	    Folds are created manually.
	|fold-indent|	indent	    Lines with equal indent form a fold.
	|fold-expr|	expr	    'foldexpr' gives the fold level of a line.
	|fold-marker|	marker	    Markers are used to specify folds.
	|fold-syntax|	syntax	    Syntax highlighting items specify folds.
	|fold-diff|	diff	    Fold text that is not changed.

						*'foldminlines'* *'fml'*
'foldminlines' 'fml'	数値 (既定では 1)
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	Sets the minimum number of screen lines for a fold to be displayed
	closed.  Also for manually closed folds.
	Note that this only has an effect of what is displayed.  After using
	"zc" to close a fold, which is displayed open because it's smaller
	than 'foldminlines', a following "zc" may close a containing fold.

						*'foldnestmax'* *'fdn'*
'foldnestmax' 'fdn'	数値 (既定では 20)
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	Sets the maximum nesting of folds for the "indent" and "syntax"
	methods.  This avoids that too many folds will be created.  Using more
	than 20 doesn't work, because the internal limit is 20.

						*'foldopen'* *'fdo'*
'foldopen' 'fdo'	文字列 (既定では "block,hor,mark,percent,quickfix,
							     search,tag,undo")
			グローバル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	Specifies for which type of commands folds will be opened, if the
	command moves the cursor into a closed fold.  It is a comma separated
	list of items.
		item		commands ~
		all		any
		block		"(", "{", "[[", "[{", etc.
		hor		horizontal movements: "l", "w", "fx", etc.
		insert		any command in Insert mode
		jump		far jumps: "G", "gg", etc.
		mark		jumping to a mark: "'m", CTRL-O, etc.
		percent		"%"
		quickfix	":cn", ":crew", ":make", etc.
		search		search for a pattern: "/", "n", "*", "gd", etc.
		tag		jumping to a tag: ":ta", CTRL-T, etc.
		undo		undo or redo: "u" and CTRL-R
	When the command is part of a mapping this option is not used.  Add
	the |zv| command to the mapping to get the same effect.
	When a movement command is used for an operator (e.g., "dl" or "y%")
	this option is not used.  This means the operator will include the
	whole closed fold.
	Note that vertical movements are not here, because it would make it
	very difficult to move onto a closed fold.
	In insert mode the folds containing the cursor will always be open
	when text is inserted.
	To close folds you can re-apply 'foldlevel' with the |zx| command or
	set the 'foldclose' option to "all".

						*'foldtext'* *'fdt'*
'foldtext' 'fdt'	文字列 (既定では "foldtext()")
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+folding| 機能付きでコンパイルされたときのみ
			使用可能}
	An expression which is used to specify the text displayed for a closed
	fold.  See |fold-foldtext|.

					*'formatoptions'* *'fo'*
'formatoptions' 'fo'	文字列 (Vim default: "tcq", Vi default: "vt")
			バッファについてローカル
			{Vi にはない}
	This is a sequence of letters which describes how automatic
	formatting is to be done.  See |fo-table|.  When the 'paste' option is
	on, no formatting is done (like 'formatoptions' is empty).  Commas can
	be inserted for readability.
	To avoid problems with flags that are added in the future, use the
	"+=" and "-=" feature of ":set" |add-option-flags|.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

						*'formatprg'* *'fp'*
'formatprg' 'fp'	文字列 (既定では "")
			グローバル
			{Vi にはない}
	The name of an external program that will be used to format the lines
	selected with the "gq" command.  The program must take the input on
	stdin and produce the output on stdout.  The Unix program "fmt" is
	such a program.  If this option is an empty string, the internal
	format function will be used |C-indenting|.  Environment variables are
	expanded |:set_env|.  See |option-backslash| about including spaces
	and backslashes.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

				   *'gdefault'* *'gd'* *'nogdefault'* *'nogd'*
'gdefault' 'gd'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	When on, the ":substitute" flag 'g' is default on.  This means that
	all matches in a line are substituted instead of one.  When a 'g' flag
	is given to a ":substitute" command, this will toggle the substitution
	of all or one match.  See |complex-change|.

		command		'gdefault' on	'gdefault' off	~
		:s///		  subst. all	  subst. one
		:s///g		  subst. one	  subst. all
		:s///gg		  subst. all	  subst. one

	NOTE: This option is reset when 'compatible' is set.

						*'grepformat'* *'gfm'*
'grepformat' 'gfm'	文字列	(default "%f:%l%m,%f  %l%m")
			グローバル
			{Vi にはない}
	Format to recognize for the ":grep" command output.
	This is a scanf-like string that uses the same format as the
	'errorformat' option: see |errorformat|.

						*'grepprg'* *'gp'*
'grepprg' 'gp'		文字列	(default "grep -n ",
					Unix: "grep -n $* /dev/null",
					Win32: "findstr /n" or "grep -n",
						      VMS: "SEARCH/NUMBERS ")
			グローバル／バッファについてローカル |global-local|
			{Vi にはない}
	Program to use for the ":grep" command. This option may contain '%'
	and '#' characters, which are expanded like when used in a command-
	line.  The placeholder "$*" is allowed to specify where the arguments
	will be included.  Environment variables are expanded |:set_env|.  See
	|option-backslash| about including spaces and backslashes.
	When your "grep" accepts the "-H" argument, use this to make ":grep"
	also work well with a single file: >
		:set grepprg=grep\ -nH
<	See also the section |:make_makeprg|, since most of the comments there
	apply equally to 'grepprg'.
	For Win32, the default is "findstr /n" if "findstr.exe" can be found,
	otherwise it's "grep -n".
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'guicursor'* *'gcr'*
'guicursor' 'gcr'	文字列	(default "n-v-c:block-Cursor/lCursor,
					ve:ver35-Cursor,
					o:hor50-Cursor,
					i-ci:ver25-Cursor/lCursor,
					r-cr:hor20-Cursor/lCursor,
					sm:block-Cursor
					-blinkwait175-blinkoff150-blinkon175")
			グローバル
			{Vi にはない}
			{only available when compiled with GUI enabled, and
			for MSDOS and Win32 console}
	This option tells Vim what the cursor should look like in different
	modes.  The option is a comma separated list of parts.  Each part
	consist of a mode-list and an argument-list:
		mode-list:argument-list,mode-list:argument-list,..
	The mode-list is a dash separated list of these modes:
		n	Normal mode
		v	Visual mode
		ve	Visual mode with 'selection' "exclusive" (same as 'v',
			if not specified)
		o	Operator-pending mode
		i	Insert mode
		r	Replace mode
		c	Command-line Normal (append) mode
		ci	Command-line Insert mode
		cr	Command-line Replace mode
		sm	showmatch in Insert mode
		a	all modes
	The argument-list is a dash separated list of these arguments:
		hor{N}	horizontal bar, {N} percent of the character height
		ver{N}	vertical bar, {N} percent of the character width
		block	block cursor, fills the whole character
			[only one of the above three should be present]
		blinkwait{N}				*cursor-blinking*
		blinkon{N}
		blinkoff{N}
			blink times for cursor: blinkwait is the delay before
			the cursor starts blinking, blinkon is the time that
			the cursor is shown and blinkoff is the time that the
			cursor is not shown.  The times are in msec.  When one
			of the numbers is zero, there is no blinking.  The
			default is: "blinkwait700-blinkon400-blinkoff250".
			These numbers are used for a missing entry.  This
			means that blinking is enabled by default.  To switch
			blinking off you can use "blinkon0".  The cursor only
			blinks when Vim is waiting for input, not while
			executing a command.
			To make the cursor blink in an xterm, see
			|xterm-blink|.
		{group-name}
			a highlight group name, that sets the color and font
			for the cursor
		{group-name}/{group-name}
			Two highlight group names, the first is used when
			no language mappings are used, the other when they
			are. |language-mapping|

	Examples of parts:
	   n-c-v:block-nCursor	in Normal, Command-line and Visual mode, use a
				block cursor with colors from the "nCursor"
				highlight group
	   i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150
				In Insert and Command-line Insert mode, use a
				30% vertical bar cursor with colors from the
				"iCursor" highlight group.  Blink a bit
				faster.

	The 'a' mode is different.  It will set the given argument-list for
	all modes.  It does not reset anything to defaults.  This can be used
	to do a common setting for all modes.  For example, to switch off
	blinking: "a:blinkon0"

	Examples of cursor highlighting: >
	    :highlight Cursor gui=reverse guifg=NONE guibg=NONE
	    :highlight Cursor gui=NONE guifg=bg guibg=fg
<
	In an MSDOS or Win32 console, only the height of the cursor can be
	changed.  This can be done by specifying a block cursor, or a
	percentage for a vertical or horizontal cursor.

						*'guifont'* *'gfn'* *E235*
'guifont' 'gfn'		文字列	(既定では "")
			グローバル
			{Vi にはない}
			{only available when compiled with GUI enabled}
	This is a list of fonts which will be used for the GUI version of Vim.
	In its simplest form the value is just one font name.  When
	the font cannot be found you will get an error message.  To try other
	font names a list can be specified, font names separated with commas.
	The first valid font is used.
	When 'guifontset' is not empty, 'guifont' is not used.
	Spaces after a comma are ignored.  To include a comma in a font name
	precede it with a backslash.  Setting an option requires an extra
	backslash before a space and a backslash.  See also
	|option-backslash|.  For example: >
	    :set guifont=Screen15,\ 7x13,font\\,with\\,commas
<	will make vim try to use the font "Screen15" first, and if it fails it
	will try to use "7x13" and then "font,with,commas" instead.
								*E236*
	Note that the fonts must be mono-spaced (all characters have the same
	width).
	To preview a font on X11, you might be able to use the "xfontsel"
	program.  The "xlsfonts" program gives a list of all available fonts.
	For Win32, GTK and Photon only: >
	    :set guifont=*
<	will bring up a font requester, where you can pick the font you want.
	If none of the fonts can be loaded, vim will keep the current setting.
	If an empty font list is given, vim will try using other resource
	settings (for X, it will use the Vim.font resource), and finally it
	will try some builtin default which should always be there ("7x13" in
	the case of X).  The font names given should be "normal" fonts.  Vim
	will try to find the related bold and italic fonts.
	For the Win32 GUI					*E244* *E245*
	- takes these options in the font name:
		hXX - height is XX (points)
		wXX - width is XX (points)
		b   - bold
		i   - italic
		u   - underline
		s   - strikeout
		cXX - character set XX. valid charsets are: ANSI, ARABIC,
		      BALTIC, CHINESEBIG5, DEFAULT, EASTEUROPE, GB2312, GREEK,
		      HANGEUL, HEBREW, JOHAB, MAC, OEM, RUSSIAN, SHIFTJIS,
		      SYMBOL, THAI, TURKISH, VIETNAMESE ANSI and BALTIC.

	  Use a ':' to separate the options.
	- A '_' can be used in the place of a space, so you don't need to use
	  backslashes to escape the spaces.
	- Example: >
	    :set guifont=courier_new:h12:w5:b:cRUSSIAN
<	Have a look at <http://nova.bsuvc.bsu.edu/prn/monofont/> for
	mono-spaced fonts and comments on them.
	See also |font-sizes|.

				*'guifontset'* *'gfs'* *E250* *E252* *E234*
'guifontset' 'gfs'	文字列	(既定では "")
			グローバル
			{Vi にはない}
			{only available when compiled with GUI enabled and
			with the |+xfontset| feature}
	When not empty, specifies two (or more) fonts to be used.  The first
	one for normal English, the second one for your special language.  See
	|xfontset|.
	Setting this option also means that all font names will be handled as
	a fontset name.  Also the ones used for the "font" argument of the
	|:highlight| command.
	The fonts must match with the current locale.  If fonts for the
	character sets that the current locale uses are not included, setting
	'guifontset' will fail.
	Note the difference between 'guifont' and 'guifontset': In 'guifont'
	the comma-separated names are alternative names, one of which will be
	used.  In 'guifontset' the whole string is one fontset name,
	including the commas.  It is not possible to specify alternative
	fontset names.
	This example works on many X11 systems: >
		:set guifontset=-*-*-medium-r-normal--16-*-*-*-c-*-*-*
<
						*'guifontwide'* *'gfw'* *E231*
'guifontwide' 'gfw'	文字列	(既定では "")
			グローバル
			{Vi にはない}
			{only available when compiled with GUI enabled}
	When not empty, specifies a comma-separated list of fonts to be used
	for double-width characters.  The first font that can be loaded is
	used.
	Note: The size of these fonts must be exactly twice as wide as the one
	specified with 'guifont' and the same height.
	Only used when 'encoding' is set to "utf-8" and 'guifontset' is empty
	or invalid.
	When 'guifont' is set and a valid font is found in it and
	'guifontwide' is empty Vim will attempt to find a matching
	double-width font and set 'guifontwide' to it.

						*'guiheadroom'* *'ghr'*
'guiheadroom' 'ghr'	数値	(既定では 50)
			グローバル
			{Vi にはない} {only for GTK and X11 GUI}
	The number of pixels subtracted from the screen height when fitting
	the GUI window on the screen.  Set this before the GUI is started,
	e.g., in your |gvimrc| file.  When zero, the whole screen height will
	be used by the window.  When positive, the specified number of pixel
	lines will be left for window decorations and other items on the
	screen.  Set it to a negative value to allow windows taller than the
	screen.

						*'guioptions'* *'go'*
'guioptions' 'go'	文字列	(default "gmrLtT"   (MS-Windows),
					 "agimrLtT" (GTK, Motif and Athena)
			グローバル
			{Vi にはない}
			{only available when compiled with GUI enabled}
	This option only has an effect in the GUI version of vim.  It is a
	sequence of letters which describes what components and options of the
	GUI should be used.
	To avoid problems with flags that are added in the future, use the
	"+=" and "-=" feature of ":set" |add-option-flags|.

	Valid letters are as follows:
							*guioptions_a*
	  'a'	Autoselect:  If present, then whenever VISUAL mode is started,
		or the Visual area extended, Vim tries to become the owner of
		the windowing system's global selection.  This means that the
		Visually highlighted text is available for pasting into other
		applications as well as into Vim itself.  When the Visual mode
		ends, possibly due to an operation on the text, or when an
		application wants to paste the selection, the highlighted text
		is automatically yanked into the "* selection register.
		Thus the selection is still available for pasting into other
		applications after the VISUAL mode has ended.
		    If not present, then Vim won't become the owner of the
		windowing system's global selection unless explicitly told to
		by a yank or delete operation for the "* register.
		The same applies to the modeless selection.

	  'A'	Autoselect for the modeless selection.  Like 'a', but only
		applies to the modeless selection.

		    'guioptions'   autoselect Visual  autoselect modeless ~
			 ""		 -			 -
			 "a"		yes			yes
			 "A"		 -			yes
			 "aA"		yes			yes

	  'c'	Use console dialogs instead of popup dialogs for simple
		choices.
	  'f'	Foreground: Don't use fork() to detach the GUI from the shell
		where it was started.  Use this for programs that wait for the
		editor to finish (e.g., an e-mail program).  Alternatively you
		can use "gvim -f" or ":gui -f" to start the GUI in the
		foreground.  |gui-fork|
		Note: Set this option in the vimrc file.  The forking may have
		happened already when the gvimrc file is read.

	  'i'	Use a Vim icon.  For GTK with KDE it is used in the left-upper
		corner of the window.  It's black&white on non-GTK, because of
		limitations of X11.  For a color icon, see |X11-icon|.

	  'm'	Menu bar is present.
	  'M'	The system menu "$VIMRUNTIME/menu.vim" is not sourced.  Note
		that this flag must be added in the .vimrc file, before
		switching on syntax or filetype recognition (when the .gvimrc
		file is sourced the system menu has already been loaded; the
		":syntax on" and ":filetype on" commands load the menu too).
	  'g'	Grey menu items: Make menu items that are not active grey.  If
		'g' is not included inactive menu items are not shown at all.
		Exception: Athena will always use grey menu items.

	  't'	Include tearoff menu items.  Currently only works for Win32,
		GTK+, and Motif 1.2 GUI.
	  'T'	Include Toolbar.  Currently only in Win32, GTK+, Motif, and
		Athena GUIs.

	  'r'	Right-hand scrollbar is always present.
	  'R'	Right-hand scrollbar is present when there is a vertically
		split window.
	  'l'	Left-hand scrollbar is always present.
	  'L'	Left-hand scrollbar is present when there is a vertically
		split window.
	  'b'	Bottom (horizontal) scrollbar is present.

	And yes, you may even have scrollbars on the left AND the right if
	you really want to :-).  See |gui-scrollbars| for more information.

	  'v'	Use a vertical button layout for dialogs.  When not included,
		a horizontal layout is preferred, but when it doesn't fit a
		vertical layout is used anyway.
	  'p'	Use Pointer callbacks for X11 GUI.  This is required for some
		window managers.  If the cursor is not blinking or hollow at
		the right moment, try adding this flag.  This must be done
		before starting the GUI.  Set it in your gvimrc.  Adding or
		removing it after the GUI has started has no effect.
	  'F'	Add a footer.  Only for Motif.  See |gui-footer|.

						*'guipty'* *'noguipty'*
'guipty'		切替	(既定ではオン)
			グローバル
			{Vi にはない}
			{only available when compiled with GUI enabled}
	Only in the GUI: If on, an attempt is made to open a pseudo-tty for
	I/O to/from shell commands.  See |gui-pty|.

					*'helpfile'* *'hf'*
'helpfile' 'hf'		文字列	(default (MSDOS)  "$VIMRUNTIME\doc\help.txt"
					 (others) "$VIMRUNTIME/doc/help.txt")
			グローバル
			{Vi にはない}
	Name of the help file.  All help files should be placed together in
	one directory.  Environment variables are expanded |:set_env|.  For
	example: "$VIMRUNTIME/doc/help.txt".  If $VIMRUNTIME is not set, $VIM
	is also tried.  Also see |$VIMRUNTIME| and |option-backslash|
	about including spaces and backslashes.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'helpheight'* *'hh'*
'helpheight' 'hh'	数値	(既定では 20)
			グローバル
			{Vi にはない}
			{Vi mが |+windows| 機能付きでコンパイルされたときのみ
			使用可能}
	Minimal initial height of the help window when it is opened with the
	":help" command.  The initial height of the help window is half of the
	current window, or (when the 'ea' option is on) the same as other
	windows.  When the height is less than 'helpheight', the height is
	set to 'helpheight'.  Set to zero to disable.

				     *'hidden'* *'hid'* *'nohidden'* *'nohid'*
'hidden' 'hid'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	When off a buffer is unloaded when it is |abandon|ed.  When on a
	buffer becomes hidden when it is |abandon|ed.  If the buffer is still
	displayed in another window, it does not become hidden, of course.
	The commands that move through the buffer list sometimes make a buffer
	hidden although the 'hidden' option is off: When the buffer is
	modified, 'autowrite' is off or writing is not possible, and the '!'
	flag was used.  See also |windows.txt|.
	This option is set for one command with ":hide {command}" |:hide|.
	WARNING: It's easy to forget that you have changes in hidden buffers.
	Think twice when using ":q!" or ":qa!".

						*'highlight'* *'hl'*
'highlight' 'hl'	文字列	(default (as a single string):
				     "8:SpecialKey,@:NonText,d:Directory,
				     e:ErrorMsg,i:IncSearch,l:Search,m:MoreMsg,
				     M:ModeMsg,n:LineNr,r:Question,
				     s:StatusLine,S:StatusLineNC,c:VertSplit
				     t:Title,v:Visual,w:WarningMsg,W:WildMenu,
				     f:Folded,F:FoldColumn")
			グローバル
			{Vi にはない}
	This option can be used to set highlighting mode for various
	occasions.  It is a comma separated list of character pairs.  The
	first character in a pair gives the occasion, the second the mode to
	use for that occasion.  The occasions are:
	|hl-SpecialKey|	 8  Meta and special keys listed with ":map"
	|hl-NonText|	 @  '~' and '@' at the end of the window and
			    characters from 'showbreak'
	|hl-Directory|	 d  directories in CTRL-D listing and other special
			    things in listings
	|hl-ErrorMsg|	 e  error messages
			 h  (obsolete, ignored)
	|hl-IncSearch|	 i  'incsearch' highlighting
	|hl-Search|	 l  last search pattern highlighting (see 'hlsearch')
	|hl-MoreMsg|	 m  |more-prompt|
	|hl-ModeMsg|	 M  Mode (e.g., "-- INSERT --")
	|hl-LineNr|	 n  line number for ":number" and ":#" commands
	|hl-Question|	 r  |hit-enter| prompt and yes/no questions
	|hl-StatusLine|	 s  status line of current window |status-line|
	|hl-StatusLineNC| S  status lines of not-current windows
	|hl-Title|	 t  Titles for output from ":set all", ":autocmd" etc.
	|hl-VertSplit|	 c  column used to separate vertically split windows
	|hl-Visual|	 v  Visual mode
	|hl-VisualNOS|	 V  Visual mode when Vim does is "Not Owning the
			    Selection" Only X11 Gui's |gui-x11| and
			    |xterm-clipboard|.
	|hl-WarningMsg|	 w  warning messages
	|hl-WildMenu|	 W  wildcard matches displayed for 'wildmenu'
	|hl-Folded|	 f  line used for closed folds
	|hl-FoldColumn|	 F  'foldcolumn'

	The display modes are:
		r	reverse		(termcap entry "mr" and "me")
		i	italic		(termcap entry "ZH" and "ZR")
		b	bold		(termcap entry "md" and "me")
		s	standout	(termcap entry "so" and "se")
		u	underline	(termcap entry "us" and "ue")
		n	no highlighting
		-	no highlighting
		:	use a highlight group
	The default is used for occasions that are not included.
	If you want to change what the display modes do, see |dos-colors|
	for an example.
	When using the ':' display mode, this must be followed by the name of
	a highlight group.  A highlight group can be used to define any type
	of highlighting, including using color.  See |:highlight| on how to
	define one.  The default uses a different group for each occasion.
	See |highlight-default| for the default highlight groups.

				 *'hlsearch'* *'hls'* *'nohlsearch'* *'nohls'*
'hlsearch' 'hls'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{not available when compiled without the
			|+extra_search| feature}
	When there is a previous search pattern, highlight all its matches.
	The type of highlighting used can be set with the 'l' occasion in the
	'highlight' option.  This uses the "Search" highlight group by
	default.  Note that only the matching text is highlighted, any offsets
	are not applied.
	See also: 'incsearch' and |:match|.
	When you get bored looking at the highlighted matches, you can turn it
	off with |:nohlsearch|.  As soon as you use a search command, the
	highlighting comes back.
	When the search pattern can match an end-of-line, Vim will try to
	highlight all of the matched text.  However, this depends on where the
	search starts.  This will be the first line in the window or the first
	line below a closed fold.  A match in a previous line which is not
	drawn may not continue in an newly drawn line.
	NOTE: This option is reset when 'compatible' is set.

						*'history'* *'hi'*
'history' 'hi'		数値	(Vim default: 20, Vi default: 0)
			グローバル
			{Vi にはない}
	A history of ":" commands, and a history of previous search patterns
	are remembered.  This option decides how many entries may be stored in
	each of these histories (see |cmdline-editing|).
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

					 *'hkmap'* *'hk'* *'nohkmap'* *'nohk'*
'hkmap' 'hk'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+rightleft| 機能付きでコンパイルされたときの
			み使用可能}
	When on, the keyboard is mapped for the Hebrew character set.
	Normally you would set 'allowrevins' and use CTRL-_ in insert mode to
	toggle this option.  See |rileft.txt|.
	NOTE: This option is reset when 'compatible' is set.

				 *'hkmapp'* *'hkp'* *'nohkmapp'* *'nohkp'*
'hkmapp' 'hkp'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+rightleft| 機能付きでコンパイルされたときの
			み使用可能}
	When on, phonetic keyboard mapping is used.  'hkmap' must also be on.
	This is useful if you have a non-Hebrew keyboard.
	See |rileft.txt|.
	NOTE: This option is reset when 'compatible' is set.

						*'icon'* *'noicon'*
'icon'			切替	(default off, on when title can be restored)
			グローバル
			{Vi にはない}
			{Vi mが |+title| 機能付きでコンパイルされたときのみ使
			用可能}
	When on, the icon text of the window will be set to the value of
	'iconstring' (if it is not empty), or to the name of the file
	currently being edited.  Only the last part of the name is used.
	Overridden by the 'iconstring' option.
	Only works if the terminal supports setting window icons (currently
	only X11 GUI and terminals with a non-empty 't_IS' option - these are
	Unix xterm and iris-ansi by default, where 't_IS' is taken from the
	builtin termcap).
	When Vim was compiled with HAVE_X11 defined, the original icon will be
	restored if possible |X11|. See |X11-icon| for changing the icon on
	X11.

						*'iconstring'*
'iconstring'		文字列	(既定では "")
			グローバル
			{Vi にはない}
			{Vi mが |+title| 機能付きでコンパイルされたときのみ使
			用可能}
	When this option is not empty, it will be used for the icon text of
	the window.  This happens only when the 'icon' option is on.
	Only works if the terminal supports setting window icon text
	(currently only X11 GUI and terminals with a non-empty 't_IS' option).
	Does not work for MS Windows.
	When Vim was compiled with HAVE_X11 defined, the original icon will be
	restored if possible |X11|.
	When this option contains printf-style '%' items, they will be
	expanded according to the rules used for 'statusline'.  See
	'titlestring' for example settings.
	{not available when compiled without the |+statusline| feature}

			*'ignorecase'* *'ic'* *'noignorecase'* *'noic'*
'ignorecase' 'ic'	切替	(既定ではオフ)
			グローバル
	Ignore case in search patterns.  Also used when searching in the tags
	file.
	Also see 'smartcase'.
	Can be overruled by using "\c" or "\C" in the pattern, see
	|/ignorecase|.

						*'imactivatekey'* *'imak'*
'imactivatekey' 'imak'	文字列 (既定では "")
			グローバル
			{Vi にはない}
			{only available when compiled with |+xim| and
			|+GUI_GTK|}
	Specifies the key that your Input Method in X-Windows uses for
	activation.  When this is specified correctly, vim can fully control
	IM with 'imcmdline', 'iminsert' and 'imsearch'.
	You can't use this option to change the activation key, the option
	tells Vim what the key is.
	Format:
		[MODIFIER_FLAG-]KEY_STRING

	These characters can be used for MODIFIER_FLAG (case is ignored):
		S	    Shift key
		L	    Lock key
		C	    Control key
		1	    Mod1 key
		2	    Mod2 key
		3	    Mod3 key
		4	    Mod4 key
		5	    Mod5 key
	Combinations are allowed, for example "S-C-space" or "SC-space" are
	both shift+ctrl+space.
	See <X11/keysymdef.h> and XStringToKeysym for KEY_STRING.

	Example: >
		:set imactivatekey=S-space
<	"S-space" means shift+space.  This is the activation key for kinput2 +
	canna (Japanese), and ami (Korean).

				*'imcmdline'* *'imc'* *'noimcmdline'* *'noimc'*
'imcmdline' 'imc'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{only available when compiled with the |+xim|
			|+multi_byte_ime| or |global-ime| feature}
	When set the Input Method is always on when starting to edit a command
	line, unless entering a search pattern (see 'imsearch' for that).
	Setting this option is useful when your input method allows entering
	English characters directly, e.g., when it's used to type accented
	characters with dead keys.

				*'imdisable'* *'imd'* *'nodisable'* *'noimd'*
'imdisable' 'imd'	切替	(既定ではオフ, on for some systems (SGI))
			グローバル
			{Vi にはない}
			{only available when compiled with the |+xim|
			|+multi_byte_ime| or |global-ime| feature}
	When set the Input Method is never used.  This is useful to disable
	the IM when it doesn't work properly.
	Currently this option is on by default for SGI/IRIX machines.  This
	may change in later releases.

						*'iminsert'* *'imi'*
'iminsert' 'imi'	数値 (default 0, 2 when an input method is supported)
			バッファについてローカル
			{Vi にはない}
	Specifies whether :lmap or an Input Method (IM) is to be used in
	Insert mode.  Valid values:
		0	:lmap is off and IM is off
		1	:lmap is ON and IM is off
		2	:lmap is off and IM is ON
	2 is available only when compiled with the |+multi_byte_ime|, |+xim|
	or |global-ime|.
	To always reset the option to zero when leaving Insert mode with <Esc>
	this can be used: >
		:inoremap <ESC> <ESC>:set iminsert=0<CR>
<	This makes :lmap and IM turn off automatically when leaving Insert
	mode.
	Note that this option changes when using CTRL-^ in Insert mode
	|i_CTRL-^|.
	The value is set to 1 when setting 'keymap' to a valid keymap name.
	It is also used for the argument of commands like "r" and "f".
	The value 0 may not work correctly with Athena and Motif with some XIM
	methods.  Use 'imdisable' to disable XIM then.

						*'imsearch'* *'ims'*
'imsearch' 'ims'	数値 (default 0, 2 when an input method is supported)
			バッファについてローカル
			{Vi にはない}
	Specifies whether :lmap or an Input Method (IM) is to be used when
	entering a search pattern.  Valid values:
		-1	the value of 'iminsert' is used, makes it look like
			'iminsert' is also used when typing a search pattern
		0	:lmap is off and IM is off
		1	:lmap is ON and IM is off
		2	:lmap is off and IM is ON
	Note that this option changes when using CTRL-^ in Insert mode
	|c_CTRL-^|.
	The value is set to 1 when it is not -1 and setting the 'keymap'
	option to a valid keymap name.
	The value 0 may not work correctly with Athena and Motif with some XIM
	methods.  Use 'imdisable' to disable XIM then.

						*'include'* *'inc'*
'include' 'inc'		文字列	(default "^#\s*include")
			グローバル／バッファについてローカル |global-local|
			{Vi にはない}
			{not available when compiled without the
			|+find_in_path| feature}
	Pattern to be used to find an include command.  It is a search
	pattern, just like for the "/" command (See |pattern|).  The default
	value is for C programs.  This option is used for the commands "[i",
	"]I", "[d", etc..  The 'isfname' option is used to recognize the file
	name that comes after the matched pattern.  See |option-backslash|
	about including spaces and backslashes.

						*'includeexpr'* *'inex'*
'includeexpr' 'inex'	文字列	(既定では "")
			バッファについてローカル
			{Vi にはない}
			{not available when compiled without the
			|+find_in_path| or |+eval| feature}
	Expression to be used to transform the string found with the 'include'
	option to a file name.  Mostly useful to change "." to "/" for Java: >
		:set includeexpr=substitute(v:fname,'\\.','/','g')
<	The "v:fname" variable will be set to the file name that was detected.
	Evaluated in the |sandbox|.
	Also used for the |gf| command if an unmodified file name can't be
	found.  Allows doing "gf" on the name after an 'include' statement.
	Also used for |<cfile>|.

				 *'incsearch'* *'is'* *'noincsearch'* *'nois'*
'incsearch' 'is'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{not available when compiled without the
			|+extra_search| feature}
	While typing a search pattern, show immediately where the so far
	typed pattern matches.  The matched string is highlighted.  If the
	pattern is invalid or not found, nothing is shown.  The screen will
	be updated often, this is only useful on fast terminals.  Note that
	the match will be shown, but the cursor is not actually positioned
	there.  You still need to finish the search command with <CR> to move
	the cursor.  The highlighting can be set with the 'i' flag in
	'highlight'.  See also: 'hlsearch'.
	NOTE: This option is reset when 'compatible' is set.

						*'indentexpr'* *'inde'*
'indentexpr' 'inde'	文字列	(既定では "")
			バッファについてローカル
			{Vi にはない}
			{not available when compiled without the |+cindent|
			or |+eval| features}
	Expression which is evaluated to obtain the proper indent for a line.
	It is used when a new line is created, for the |=| operator and
	in Insert mode as specified with the 'indentkeys' option.
	When this option is not empty, it overrules the 'cindent' and
	'smartindent' indenting.
	When 'paste' is set this option is not used for indenting.
	The expression is evaluated with |v:lnum| set to the line number for
	which the indent is to be computed.
	The expression must return the number of spaces worth of indent.  It
	can return "-1" to keep the current indent (this means 'autoindent' is
	used for the indent).
	Functions useful for computing the indent are |indent()|, |cindent()|
	and |lispindent()|.
	The evaluation of the expression must not have side effects!  It must
	not change the text, jump to another window, etc.  Afterwards the
	cursor position is always restored, thus the cursor may be moved.
	Normally this option would be set to call a function: >
		:set indentexpr=GetMyIndent()
<	Error messages will be suppressed, unless the 'debug' option contains
	"msg".
	See |indent-expression|.  Also see |eval-sandbox|.
	NOTE: This option is made empty when 'compatible' is set.

						*'indentkeys'* *'indk'*
'indentkeys' 'indk'	文字列	(default "0{,0},:,0#,!^F,o,O,e")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+cindent| 機能付きでコンパイルされたときのみ
			使用可能}
	A list of keys that, when typed in Insert mode, cause reindenting of
	the current line.  Only happens if 'indentexpr' isn't empty.
	The format is identical to 'cinkeys', see |indentkeys-format|.
	See |C-indenting| and |indent-expression|.

			*'infercase'* *'inf'* *'noinfercase'* *'noinf'*
'infercase' 'inf'	切替	(既定ではオフ)
			バッファについてローカル
			{Vi にはない}
	When doing keyword completion in insert mode |ins-completion|, and
	'ignorecase' is also on, the case of the match is adjusted.  If the
	typed text contains a lowercase letter where the match has an upper
	case letter, the completed part is made lowercase.  If the typed text
	has no lowercase letters and the match has a lowercase letter where
	the typed text has an uppercase letter, and there is a letter before
	it, the completed part is made uppercase.

			*'insertmode'* *'im'* *'noinsertmode'* *'noim'*
'insertmode' 'im'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	Makes Vim work in a way that Insert mode is the default mode.  Useful
	if you want to use Vim as a modeless editor.  Used for |evim|.
	These Insert mode commands will be useful:
	- Use the cursor keys to move around.
	- Use CTRL-O to execute one Normal mode command |i_CTRL-O|).  When
	  this is a mapping, it is executed as if 'insertmode' was off.
	  Normal mode remains active until the mapping is finished.
								*i_CTRL-L*
	- Use CTRL-L to execute a number of Normal mode commands, then use
	  <Esc> to get back to Insert mode.

	These items change when 'insertmode' is set:
	- when starting to edit of a file, Vim goes to Insert mode.
	- <Esc> in Insert mode is a no-op and beeps.
	- <Esc> in Normal mode makes Vim go to Insert mode.
	- CTRL-L in Insert mode is a command, it is not inserted.
	- CTRL-Z in Insert mode suspends Vim, see |CTRL-Z|.	*i_CTRL-Z*
	However, when <Esc> is used inside a mapping, it behaves like
	'insertmode' was not set.  This was done to be able to use the same
	mappings with 'insertmode' set or not set.
	When executing commands with |:normal| 'insertmode' is not used.

	NOTE: This option is reset when 'compatible' is set.

						*'isfname'* *'isf'*
'isfname' 'isf'		文字列	(default for MS-DOS, Win32 and OS/2:
			     "@,48-57,/,\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,="
			    for AMIGA: "@,48-57,/,.,-,_,+,,,$,:"
			    for VMS: "@,48-57,/,.,-,_,+,,,#,$,%,<,>,[,],:,;,~"
			    for OS/390: "@,240-249,/,.,-,_,+,,,#,$,%,~,="
			    otherwise: "@,48-57,/,.,-,_,+,,,#,$,%,~,=")
			グローバル
			{Vi にはない}
	The characters specified by this option are included in file names and
	path names.  Filenames are used for commands like "gf", "[i" and in
	the tags file.  It is also used for "\f" in a |pattern|.
	Multi-byte characters 256 and above are always included, only the
	characters up to 255 are specified with this option.
	For UTF-8 the characters 0xa0 to 0xff are included as well.

	Note that on systems using a backslash as path separator, Vim tries to
	do its best to make it work as you would expect.  That is a bit
	tricky, since Vi originally used the backslash to escape special
	characters.  Vim will not remove a backslash in front of a normal file
	name character on these systems, but it will on Unix and alikes.  The
	'&' and '^' are not included by default, because these are special for
	cmd.exe.

	The format of this option is a list of parts, separated with commas.
	Each part can be a single character number or a range.  A range is two
	character numbers with '-' in between.  A character number can be a
	decimal number between 0 and 255 or the ASCII character itself (does
	not work for digits).  Example:
		"_,-,128-140,#-43"	(include '_' and '-' and the range
					128 to 140 and '#' to 43)
	If a part starts with '^', the following character number or range
	will be excluded from the option.  The option is interpreted from left
	to right.  Put the excluded character after the range where it is
	included.  To include '^' itself use it as the last character of the
	option or the end of a range.  Example:
		"^a-z,#,^"	(exclude 'a' to 'z', include '#' and '^')
	If the character is '@', all characters where isalpha() returns TRUE
	are included.  Normally these are the characters a to z and A to Z,
	plus accented characters.  To include '@' itself use "@-@".  Examples:
		"@,^a-z"	All alphabetic characters, excluding lower
				case letters.
		"a-z,A-Z,@-@"	All letters plus the '@' character.
	A comma can be included by using it where a character number is
	expected.  Example:
		"48-57,,,_"	Digits, command and underscore.
	A comma can be excluded by prepending a '^'.  Example:
		" -~,^,,9"	All characters from space to '~', excluding
				comma, plus <Tab>.
	See |option-backslash| about including spaces and backslashes.

						*'isident'* *'isi'*
'isident' 'isi'		文字列	(default for MS-DOS, Win32 and OS/2:
					   "@,48-57,_,128-167,224-235"
				otherwise: "@,48-57,_,192-255")
			グローバル
			{Vi にはない}
	The characters given by this option are included in identifiers.
	Identifiers are used in recognizing environment variables and after a
	match of the 'define' option.  It is also used for "\i" in a
	|pattern|. See 'isfname' for a description of the format of this
	option.
	Careful: If you change this option, it might break expanding
	environment variables.  E.g., when '/' is included and Vim tries to
	expand "$HOME/.viminfo".  Maybe you should change 'iskeyword' instead.

						*'iskeyword'* *'isk'*
'iskeyword' 'isk'	文字列 (Vim default for MS-DOS and Win32:
					    "@,48-57,_,128-167,224-235"
				   otherwise:  "@,48-57,_,192-255"
				Vi default: "@,48-57,_")
			バッファについてローカル
			{Vi にはない}
	Keywords are used in searching and recognizing with many commands:
	"w", "*", "[i", etc.  It is also used for "\k" in a |pattern|.  See
	'isfname' for a description of the format of this option.  For C
	programs you could use "a-z,A-Z,48-57,_,.,-,>".
	For a help file it is set to all non-blank printable characters except
	'*', '"' and '|' (so that CTRL-] on a command finds the help for that
	command).
	When the 'lisp' option is on the '-' character is always included.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

						*'isprint'* *'isp'*
'isprint' 'isp'	文字列	(default for MS-DOS, Win32, OS/2 and Macintosh:
				"@,~-255"; otherwise: "@,161-255")
			グローバル
			{Vi にはない}
	The characters given by this option are displayed directly on the
	screen.  It is also used for "\p" in a |pattern|.  The characters from
	space (ascii 32) to '~' (ascii 126) are always displayed directly,
	even when they are not included in 'isprint' or excluded.  See
	'isfname' for a description of the format of this option.

	Non-printable characters are displayed with two characters:
		  0 -  31	"^@" - "^_"
		 32 - 126	always single characters
		   127		"^?"
		128 - 159	"~@" - "~_"
		160 - 254	"| " - "|~"
		   255		"~?"
	When 'encoding' is a Unicode one, illegal bytes from 128 to 255 are
	displayed as <xx>, with the hexadecimal value of the byte.
	When 'display' contains "uhex" all unprintable characters are
	displayed as <xx>.
	The NonText highlighting will be used for unprintable characters.
	|hl-NonText|

	Multi-byte characters 256 and above are always included, only the
	characters up to 255 are specified with this option.  When a character
	is printable but it is not available in the current font, a
	replacement character will be shown.
	Unprintable and zero-width Unicode characters are displayed as <xxxx>.
	There is no option to specify these characters.

			*'joinspaces'* *'js'* *'nojoinspaces'* *'nojs'*
'joinspaces' 'js'	切替	(既定ではオン)
			グローバル
			{Vi にはない}
	Insert two spaces after a '.', '?' and '!' with a join command.
	When 'cpoptions' includes the 'j' flag, only do this after a '.'.
	Otherwise only one space is inserted.
	NOTE: This option is set when 'compatible' is set.

							*'key'*
'key'			文字列	(既定では "")
			バッファについてローカル
			{Vi にはない}
	The key that is used for encrypting and decrypting the current buffer.
	See |encryption|.
	Careful: Do not set the key value by hand, someone might see the typed
	key.  Use the |:X| command.  But you can make 'key' empty: >
		:set key=
<	It is not possible to get the value of this option with ":set key" or
	"echo &key".  This is to avoid showing it to someone who shouldn't
	know.  It also means you cannot see it yourself once you have set it,
	be careful not to make a typing error!

					*'keymap'* *'kmp'*
'keymap' 'kmp'		文字列	(既定では "")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+keymap| 機能付きでコンパイルされたときのみ使
			用可能}
	Name of a keyboard mapping.  See |mbyte-keymap|.
	Setting this option to a valid keymap name has the side effect of
	setting 'iminsert' to one, so that the keymap becomes effective.
	'imsearch' is also set to one, unless it was -1

					*'keymodel'* *'km'*
'keymodel' 'km'		文字列	(既定では "")
			グローバル
			{Vi にはない}
	List of comma separated words, which enable special things that keys
	can do.  These values can be used:
	   startsel	Using a shifted special key starts selection (either
			Select mode or Visual mode, depending on "key" being
			present in 'selectmode').
	   stopsel	Using a not-shifted special key stops selection.
	Special keys in this context are the cursor keys, <End>, <Home>,
	<PageUp> and <PageDown>.
	The 'keymodel' option is set by the |:behave| command.

					*'keywordprg'* *'kp'*
'keywordprg' 'kp'	文字列	(default "man" or "man -s",  DOS: "",
						OS/2: "view /", VMS: "help")
			グローバル
			{Vi にはない}
	Program to use for the |K| command.  Environment variables are
	expanded |:set_env|.  When empty ":help" is used.
	When "man" is used, Vim will automatically translate a count for the
	"K" command to a section number.  Also for "man -s", in which case the
	"-s" is removed when there is no count.
	See |option-backslash| about including spaces and backslashes.
	Example: >
		:set keywordprg=man\ -s
<	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

					*'langmap'* *'lmap'* *E357* *E358*
'langmap' 'lmap'	文字列	(既定では "")
			グローバル
			{Vi にはない}
			{Vi mが |+langmap| 機能付きでコンパイルされたときのみ
			使用可能}
	This option allows switching your keyboard into a special language
	mode.   When you are typing text in Insert mode the characters are
	inserted directly.  When in command mode the 'langmap' option takes
	care of translating these special characters to the original meaning
	of the key.  This means you don't have to change the keyboard mode to
	be able to execute Normal mode commands.
	This is the opposite of the 'keymap' option, where characters are
	mapped in Insert mode.
	This only works for 8-bit characters.  The value of 'langmap' may be
	specified with multi-byte characters (e.g., UTF-8), but only the lower
	8 bits of each character will be used.

	Example (for Greek):					*greek*  >
	    :set langmap=ÁA,ÂB,ØC,ÄD,ÅE,ÖF,ÃG,ÇH,ÉI,ÎJ,ÊK,ËL,ÌM,ÍN,ÏO,ÐP,QQ,ÑR,ÓS,ÔT,ÈU,ÙV,WW,×X,ÕY,ÆZ,áa,âb,øc,äd,åe,öf,ãg,çh,éi,îj,êk,ël,ìm,ín,ïo,ðp,qq,ñr,ós,ôt,èu,ùv,òw,÷x,õy,æz
<	Example (exchanges meaning of z and y for commands): >
	    :set langmap=zy,yz,ZY,YZ
<
	The 'langmap' option is a list of parts, separated with commas.  Each
	part can be in one of two forms:
	1.  A list of pairs.  Each pair is a "from" character immediately
	    followed by the "to" character.  Examples: "aA", "aAbBcC".
	2.  A list of "from" characters, a semi-colon and a list of "to"
	    characters.  Example: "abc;ABC"
	Example: "aA,fgh;FGH,cCdDeE"
	Special characters need to be preceded with a backslash.  These are
	";", ',' and backslash itself.

	This will allow you to activate vim actions without having to switch
	back and forth between the languages.  Your language characters will
	be understood as normal vim English characters (according to the
	langmap mappings) in the following cases:
	 o Normal/Visual mode (commands, buffer/register names, user mappings)
	 o Insert/Replace Mode: Register names after CTRL-R
	 o Insert/Replace Mode: Mappings
	Characters entered in Command-line mode will NOT be affected by
	this option.   Note that this option can be changed at any time
	allowing to switch between mappings for different languages/encodings.
	Use a mapping to avoid having to type it each time!

					*'langmenu'* *'lm'*
'langmenu' 'lm'		文字列	(既定では "")
			グローバル
			{Vi にはない}
			{only available when compiled with the |+menu| and
			|+multi_lang| features}
	Language to use for menu translation.  Tells which file is loaded
	from the "lang" directory in 'runtimepath': >
		"lang/menu_" . &langmenu . ".vim"
<	(without the spaces).  For example, to always use the Dutch menus, no
	matter what $LANG is set to: >
		:set langmenu=nl_NL.ISO_8859-1
<	When 'langmenu' is empty, |v:lang| is used.
	If your $LANG is set to a non-English language but you do want to use
	the English menus: >
		:set langmenu=none
<	This option must be set before loading menus, switching on filetype
	detection or syntax highlighting.  Once the menus are defined setting
	this option has no effect.  But you could do this: >
		:source $VIMRUNTIME/delmenu.vim
		:set langmenu=de_DE.ISO_8859-1
		:source $VIMRUNTIME/menu.vim
<	Warning: This deletes all menus that you defined yourself!

					*'laststatus'* *'ls'*
'laststatus' 'ls'	数値	(既定では 1)
			グローバル
			{Vi にはない}
	The value of this option influences when the last window will have a
	status line:
		0: never
		1: only if there are at least two windows
		2: always
	The screen looks nicer with a status line if you have several
	windows, but it takes another screen line. |status-line|

			*'lazyredraw'* *'lz'* *'nolazyredraw'* *'nolz'*
'lazyredraw' 'lz'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	When this option is set, the screen will not be redrawn while
	executing macros, registers and other commands that have not been
	typed.  To force an update use |:redraw|.

			*'linebreak'* *'lbr'* *'nolinebreak'* *'nolbr'*
'linebreak' 'lbr'	切替	(既定ではオフ)
			ウィンドウについてローカル
			{Vi にはない}
			{not available when compiled without the  |+linebreak|
			feature}
	If on Vim will wrap long lines at a character in 'breakat' rather
	than at the last character that fits on the screen.  Unlike
	'wrapmargin' and 'textwidth', this does not insert <EOL>s in the file,
	it only affects the way the file is displayed, not its contents.  The
	value of 'showbreak' is used to put in front of wrapped lines.  This
	option is not used when the 'wrap' option is off or 'list' is on.
	Note that <Tab> characters after an <EOL> are mostly not displayed
	with the right amount of white space.

						*'lines'*
'lines'			数値	(default 24 or terminal height)
			グローバル
	数値 of lines in the display.  Normally you don't need to set this.
	That is done automatically by the terminal initialization code.
	When Vim is running in the GUI or in a resizable window, setting this
	option may cause the window size to be changed.
	When you set this option and Vim is unable to change the physical
	数値 of lines of the display, the display may be messed up.

						*'linespace'* *'lsp'*
'linespace' 'lsp'	数値	(default 0, 1 for Win32 GUI)
			グローバル
			{Vi にはない}
			{only in the GUI}
	数値 of pixel lines inserted between characters.  Useful if the font
	uses the full character cell height, making lines touch each other.
	When non-zero there is room for underlining.

						*'lisp'* *'nolisp'*
'lisp'			切替	(既定ではオフ)
			バッファについてローカル
			{Vi mが |+lispindent| 機能付きでコンパイルされたときの
			み使用可能}
	Lisp mode: When <Enter> is typed in insert mode set the indent for
	the next line to Lisp standards (well, sort of).  Also happens with
	"cc" or "S".  'autoindent' must also be on for this to work.  The 'p'
	flag in 'cpoptions' changes the method of indenting: Vi compatible or
	better.  Also see 'lispwords'.
	The '-' character is included in keyword characters.  Redefines the
	"=" operator to use this same indentation algorithm rather than
	calling an external program if 'equalprg' is empty.
	This option is not used when 'paste' is set.
	{Vi: Does it a little bit differently}

						*'lispwords'* *'lw'*
'lispwords' 'lw'	文字列	(default is very long)
			グローバル
			{Vi にはない}
			{Vi mが |+lispindent| 機能付きでコンパイルされたときの
			み使用可能}
	Comma separated list of words that influence the Lisp indenting.

						*'list'* *'nolist'*
'list'			切替	(既定ではオフ)
			ウィンドウについてローカル
	List mode: Show tabs as CTRL-I, show end of line with $.  Useful to
	see the difference between tabs and spaces and for trailing blanks.
	Note that this will also affect formatting (set with 'textwidth' or
	'wrapmargin') when 'cpoptions' includes 'L'.  See 'listchars' for
	changing the way tabs are displayed.

						*'listchars'* *'lcs'*
'listchars' 'lcs'	文字列	(default "eol:$")
			グローバル
			{Vi にはない}
	文字列s to use in 'list' mode.  It is a comma separated list of string
	settings.
	  eol:c		Character to show at the end of each line.  When
			omitted, there is no extra character at the end of the
			line.
	  tab:xy	Two characters to be used to show a Tab.  The first
			char is used once.  The second char is repeated to
			fill the space that the Tab normally occupies.
			"tab:>-" will show a Tab that takes four spaces as
			">---".  When omitted, a Tab is show as ^I.
	  trail:c	Character to show for trailing spaces.  When omitted,
			trailing spaces are blank.
	  extends:c	Character to show in the last column, when 'wrap' is
			off and the line continues beyond the right of the
			screen.
	  precedes:c	Character to show in the first column, when 'wrap'
			is off and there is text preceeding the character
			visible in the first column.

	The characters ':' and ',' cannot be used.
	Examples: >
	    :set lcs=tab:>-,trail:-
	    :set lcs=tab:>-,eol:<
	    :set lcs=extends:>,precedes:<
<	The "NonText" highlighting will be used for "eol", "extends" and
	"precedes".  "SpecialKey" for "tab" and "trail".

			*'lpl'* *'nolpl'* *'loadplugins'* *'noloadplugins'*
'loadplugins' 'lpl'	切替	(既定ではオン)
			グローバル
			{Vi にはない}
	When on the plugin scripts are loaded when starting up |load-plugins|.
	This option can be reset in your |vimrc| file to disable the loading
	of plugins.
	Note that using the "-u NONE" and "--noplugin" command line arguments
	reset this option. |-u| |--noplugin|

						*'magic'* *'nomagic'*
'magic'			切替	(既定ではオン)
			グローバル
	Changes the special characters that can be used in search patterns.
	See |pattern|.
	NOTE: To avoid portability problems with using patterns, always keep
	this option at the default "on".  Only switch it off when working with
	old Vi scripts.  In any other situation write patterns that work when
	'magic' is on.

						*'makeef'* *'mef'*
'makeef' 'mef'		文字列	(default: "")
			グローバル
			{Vi にはない}
			{Vi mが |+quickfix| 機能付きでコンパイルされたときのみ
			使用可能}
	Name of the errorfile for the |:make| command (see |:make_makeprg|)
	and the |:grep| command.
	When it is empty, an internally generated temp file will be used.
	When "##" is included, it is replaced by a number to make the name
	unique.  This makes sure that the ":make" command doesn't overwrite an
	existing file.
	NOT used for the ":cf" command.  See 'errorfile' for that.
	Environment variables are expanded |:set_env|.
	See |option-backslash| about including spaces and backslashes.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'makeprg'* *'mp'*
'makeprg' 'mp'		文字列	(default "make", VMS: "MMS")
			グローバル／バッファについてローカル |global-local|
			{Vi にはない}
	Program to use for the ":make" command.  See |:make_makeprg|.  This
	option may contain '%' and '#' characters, which are expanded like
	when used in a command-line.  Environment variables are expanded
	|:set_env|.  See |option-backslash| about including spaces and
	backslashes.  Note that a '|' must be escaped twice: once for ":set"
	and once for the interpretation of a command.  When you use a filter
	called "myfilter" do it like this: >
	    :set makeprg=gmake\ \\\|\ myfilter
<	The placeholder "$*" can be given (even multiple times) to specify
	where the arguments will be included, for example: >
	    :set makeprg=latex\ \\\\nonstopmode\ \\\\input\\{$*}
<	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'matchpairs'* *'mps'*
'matchpairs' 'mps'	文字列	(default "(:),{:},[:]")
			バッファについてローカル
			{Vi にはない}
	Characters that form pairs.  The |%| command jumps from one to the
	other.  Currently only single character pairs are allowed, and they
	must be different.  The characters must be separated by a colon.  The
	pairs must be separated by a comma.  Example for including '<' and '>'
	(HTML): >
		:set mps+=<:>

<	A more exotic example, to jump between the '=' and ';' in an
	assignment, useful for languages like C and Java: >
		:au FileType c,cpp,java set mps+==:;

<	For a more advanced way of using "%", see the matchit.vim plugin in
	the $VIMRUNTIME/macros directory. |add-local-help|

						*'matchtime'* *'mat'*
'matchtime' 'mat'	数値	(既定では 5)
			グローバル
			{Vi にはない}{in Nvi}
	Tenths of a second to show the matching paren, when 'showmatch' is
	set.  Note that this is not in milliseconds, like other options that
	set a time.  This is to be compatible with Nvi.

						*'maxfuncdepth'* *'mfd'*
'maxfuncdepth' 'mfd'	数値	(既定では 100)
			グローバル
			{Vi にはない}
	Maximum depth of function calls for user functions.  This normally
	catches endless recursion.  When using a recursive function with
	more depth, set 'maxfuncdepth' to a bigger number.  But this will use
	more memory, there is the danger of failing when memory is exhausted.
	See also |:function|.

						*'maxmapdepth'* *'mmd'* *E223*
'maxmapdepth' 'mmd'	数値	(既定では 1000)
			グローバル
			{Vi にはない}
	Maximum number of times a mapping is done without resulting in a
	character to be used.  This normally catches endless mappings, like
	":map x y" with ":map y x".  It still does not catch ":map g wg",
	because the 'w' is used before the next mapping is done.  See also
	|key-mapping|.

						*'maxmem'* *'mm'*
'maxmem' 'mm'		数値	(default between 256 to 5120 (system
				 dependent) or half the amount of memory
				 available)
			グローバル
			{Vi にはない}
	Maximum amount of memory (in Kbyte) to use for one buffer.  When this
	limit is reached allocating extra memory for a buffer will cause
	other memory to be freed.  Maximum value 2000000.  Use this to work
	without a limit.  Also see 'maxmemtot'.

						*'maxmemtot'* *'mmt'*
'maxmemtot' 'mmt'	数値	(default between 2048 and 10240 (system
				 dependent) or half the amount of memory
				 available)
			グローバル
			{Vi にはない}
	Maximum amount of memory (in Kbyte) to use for all buffers together.
	Maximum value 2000000.  Use this to work without a limit.  Also see
	'maxmem'.

						*'menuitems'* *'mis'*
'menuitems' 'mis'	数値	(既定では 25)
			グローバル
			{Vi にはない}
			{Vi mが |+menu| 機能付きでコンパイルされたときのみ使用
			可能}
	Maximum number of items to use in a menu.  Used for menus that are
	generated from a list of items, e.g., the Buffers menu.  Changing this
	option has no direct effect, the menu must be refreshed first.

				   *'modeline'* *'ml'* *'nomodeline'* *'noml'*
'modeline' 'ml'		切替	(Vim default: on, Vi default: off)
			バッファについてローカル
						*'modelines'* *'mls'*
'modelines' 'mls'	数値	(既定では 5)
			グローバル
			{Vi にはない}
	If 'modeline' is on 'modelines' gives the number of lines that is
	checked for set commands.  If 'modeline' is off or 'modelines' is zero
	no lines are checked.  See |modeline|.
	NOTE: 'modeline' is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

				*'modifiable'* *'ma'* *'nomodifiable'* *'noma'*
'modifiable' 'ma'	切替	(既定ではオン)
			バッファについてローカル
			{Vi にはない}		*E21*
	When off the buffer contents cannot be changed.  The 'fileformat' and
	'fileencoding' options also can't be changed.
	Can be reset with the |-M| command line argument.

				*'modified'* *'mod'* *'nomodified'* *'nomod'*
'modified' 'mod'	切替	(既定ではオフ)
			バッファについてローカル
			{Vi にはない}
	When on, the buffer is considered to be modified.  This option is set
	when:
	1. A change was made to the text since it was last written.  Using the
	   |undo| command to go back to the original text will reset the
	   option.  But undoing changes that were made before writing the
	   buffer will set the option again, since the text is different from
	   when it was written.
	2. 'fileformat' or 'fileencoding' is different from its original
	   value.  The original value is set when the buffer is read or
	   written.  A ":set nomodified" command also resets the original
	   values to the current values and the 'modified' option will be
	   reset.
	When 'buftype' is "nowrite" or "nofile" this option may be set, but
	will be ignored.

						*'more'* *'nomore'*
'more'			切替	(Vim default: on, Vi default: off)
			グローバル
			{Vi にはない}
	When on, listings pause when the whole screen is filled.  You will get
	the |more-prompt|.  When this option is off there are no pauses, the
	listing continues until finished.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

						*'mouse'*
'mouse'			文字列	(default "", "a" for GUI, MS-DOS and Win32)
			グローバル
			{Vi にはない}
	Enable the use of the mouse.  Only works for certain terminals
	(xterm, MS-DOS, Win32 |win32-mouse|, qnx pterm, and Linux console
	with gpm).  For using the mouse in the GUI, see |gui-mouse|.
	The mouse can be enabled for different modes:
		n	Normal mode
		v	Visual mode
		i	Insert mode
		c	Command-line mode
		h	all previous modes when editing a help file
		a	all previous modes
		r	for |hit-enter| and |more-prompt| prompt
	Normally you would enable the mouse in all four modes with: >
		:set mouse=a
<	When the mouse is not enabled, the GUI will still use the mouse for
	modeless selection.  This doesn't move the text cursor.

	See |mouse-using|.  Also see |'clipboard'|.

	Note: When enabling the mouse in a terminal, copy/paste will use the
	"* register if there is access to an X-server.  The xterm handling of
	the mouse buttons can still be used by keeping the shift key pressed.
	Also see the 'clipboard' option.

			*'mousefocus'* *'mousef'* *'nomousefocus'* *'nomousef'*
'mousefocus' 'mousef'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{only works in the GUI}
	The window that the mouse pointer is on is automatically activated.
	When changing the window layout or window focus in another way, the
	mouse pointer is moved to the window with keyboard focus.  Off is the
	default because it makes using the pull down menus a little goofy, as
	a pointer transit may activate a window unintentionally.

			*'mousehide'* *'mh'* *'nomousehide'* *'nomh'*
'mousehide' 'mh'	切替	(既定ではオン)
			グローバル
			{Vi にはない}
			{only works in the GUI}
	When on, the mouse pointer is hidden when characters are typed.
	The mouse pointer is restored when the mouse is moved.

						*'mousemodel'* *'mousem'*
'mousemodel' 'mousem'	文字列	(default "extend", "popup" for MS-DOS and Win32)
			グローバル
			{Vi にはない}
	Sets the model to use for the mouse.  The name mostly specifies what
	the right mouse button is used for:
	   extend	Right mouse button extends a selection.  This works
			like in an xterm.
	   popup	Right mouse button pops up a menu.  The shifted left
			mouse button extends a selection.  This works like
			with Microsoft Windows
	   popup_setpos Like "popup", but the cursor will be moved to the
			position where the mouse was clicked, and thus the
			selected operation will act upon the clicked object.
			If clicking inside a selection, that selection will
			be acted upon, ie. no cursor move.  This implies of
			course, that right clicking outside a selection will
			end Visual mode.
	Overview of what button does what for each model:
	mouse		    extend		popup(_setpos) ~
	left click	    place cursor	place cursor
	left drag	    start selection	start selection
	shift-left	    search word		extend selection
	right click	    extend selection	popup menu (place cursor)
	right drag	    extend selection	-
	middle click	    paste		paste

	In the "popup" model the right mouse button produces a pop-up menu.
	You need to define this first, see |popup-menu|.

	Note that you can further refine the meaning of buttons with mappings.
	See |gui-mouse-mapping|.  But mappings are NOT used for modeless
	selection (because that's handled in the GUI code directly).

	The 'mousemodel' option is set by the |:behave| command.

						*'mouseshape'* *'mouses'*
'mouseshape' 'mouses'	文字列	(default "i:beam,r:beam,s:updown,sd:cross,
					m:no,v:rightup-arrow"
			グローバル
			{Vi にはない}
			{Vi mが |+mouseshape| 機能付きでコンパイルされたときの
			み使用可能}
	This option tells Vim what the mouse pointer should look like in
	different modes.  The option is a comma separated list of parts, much
	like used for 'guicursor'.  Each part consist of a mode/location-list
	and an argument-list:
		mode-list:shape,mode-list:shape,..
	The mode-list is a dash separated list of these modes/locations:
			In a normal window: ~
		n	Normal mode
		v	Visual mode
		ve	Visual mode with 'selection' "exclusive" (same as 'v',
			if not specified)
		o	Operator-pending mode
		i	Insert mode
		r	Replace mode

			Others: ~
		c	appending to the command-line
		ci	inserting in the command-line
		cr	replacing in the command-line
		m	At the 'Hit ENTER' or 'More' prompts
		e	any mode, pointer below last window
		s	any mode, pointer on a status line
		sd	any mode, while dragging a status line
		vs	any mode, pointer on a vertical separator line
		vd	any mode, while dragging a vertical separator line
		a	everywhere

	The shape is one of the following:
	avail	name		looks like ~
	w x	arrow		Normal mouse pointer
	w x	blank		no pointer at all (use with care!)
	w x	beam		I-beam
	w x	updown		up-down sizing arrows
	w x	leftright	left-right sizing arrows
	w x	busy		The system's usual busy pointer
	w x	no		The system's usual 'no input' pointer
	  x	udsizing	indicates up-down resizing
	  x	lrsizing	indicates left-right resizing
	  x	crosshair	like a big thin +
	  x	hand1		white hand
	  x	hand2		black hand
	  x	pencil		what you write with
	  x	question	big ?
	  x	rightup-arrow	arrow pointing right-up
	w x	up-arrow	arrow pointing up
	  x	<number>	any X11 pointer number (see X11/cursorfont.h)

	The "avail" column contains a 'w' if the shape is available for Win32,
	x for X11.
	Any modes not specifed or shapes not available use the normal mouse
	pointer.

	Example: >
		:set mouseshape=s:size,m:no
<	will make the mouse turn to a sizing arrow over the status lines and
	indicate no input when the hit-enter prompt is displayed (since
	clicking the mouse has no effect in this state.)

						*'mousetime'* *'mouset'*
'mousetime' 'mouset'	数値	(既定では 500)
			グローバル
			{Vi にはない}
	Only for GUI, MS-DOS, Win32 and Unix with xterm.  Defines the maximum
	time in msec between two mouse clicks for the second click to be
	recognized as a multi click.

							*'nrformats'* *'nf'*
'nrformats' 'nf'	文字列	(default "octal,hex")
			バッファについてローカル
			{Vi にはない}
	This defines what bases Vim will consider for numbers when using the
	CTRL-A and CTRL-X commands for adding to and subtracting from a number
	respectively; see |CTRL-A| for more info on these commands.
	alpha	if included, single alphabetical characters will be
		incremented or decremented.  This is useful for a list with a
		letter index a), b), etc.
	octal	if included, numbers that start with a zero will be considered
		to be octal.  Example: Using CTRL-A on "007" results in "010".
	hex	if included, numbers starting with "0x" or "0X" will be
		considered to be hexadecimal.  Example: Using CTRL-X on
		"0x100" results in "0x0ff".
	数値s which simply begin with a digit in the range 1-9 are always
	considered decimal.  This also happens for numbers that are not
	recognized as octal or hex.

				*'number'* *'nu'* *'nonumber'* *'nonu'*
'number' 'nu'		切替	(既定ではオフ)
			ウィンドウについてローカル
	Print the line number in front of each line.  When the 'n' option is
	excluded from 'cpoptions' a wrapped line will not use the column of
	line numbers (this is the default when 'compatible' isn't set).
	When a long, wrapped line doesn't start with the first character, '-'
	characters are put before the number.
	See |hl-LineNr| for the highlighting used for the number.

					*'osfiletype'* *'oft'* *E366*
'osfiletype' 'oft'	文字列 (RISC-OS default: "Text",
				others default: "")
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+osfiletype| 機能付きでコンパイルされたときの
			み使用可能}
	Some operating systems store extra information about files besides
	name, datestamp and permissions.  This option contains the extra
	information, the nature of which will vary between systems.
	The value of this option is usually set when the file is loaded, and
	use to set the file type when file is written.
	It can affect the pattern matching of the automatic commands.
	|autocmd-osfiletypes|

						*'paragraphs'* *'para'*
'paragraphs' 'para'	文字列	(default "IPLPPPQPP LIpplpipbp")
			グローバル
	Specifies the nroff macros that separate paragraphs.  These are pairs
	of two letters (see |object-motions|).

						*'paste'* *'nopaste'*
'paste'			切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	Put Vim in Paste mode.  This is useful if you want to cut or copy
	some text from one window and paste it in Vim.  This will avoid
	unexpected effects.
	Setting this option is useful when using Vim in a terminal, where Vim
	cannot distinguish between typed text and pasted text.  In the GUI, Vim
	knows about pasting and will mostly do the right thing without 'paste'
	being set.  The same is true for a terminal where Vim handles the
	mouse clicks itself.
	When the 'paste' option is switched on (also when it was already on):
		- mapping in Insert mode and Command-line mode is disabled
		- abbreviations are disabled
		- 'textwidth' is set to 0
		- 'wrapmargin' is set to 0
		- 'autoindent' is reset
		- 'smartindent' is reset
		- 'softtabstop' is set to 0
		- 'revins' is reset
		- 'ruler' is reset
		- 'showmatch' is reset
		- 'formatoptions' is used like it is empty
	These options keep their value, but their effect is disabled:
		- 'lisp'
		- 'indentexpr'
		- 'cindent'
	NOTE: When you start editing another file while the 'paste' option is
	on, settings from the modelines or autocommands may change the
	settings again, causing trouble when pasting text.  You might want to
	set the 'paste' option again.
	When the 'paste' option is reset the mentioned options are restored to
	the value before the moment 'paste' was switched from off to on.
	Resetting 'paste' before ever setting it does not have any effect.
	Since mapping doesn't work while 'paste' is active, you need to use
	the 'pastetoggle' option to toggle the 'paste' option with some key.

						*'pastetoggle'* *'pt'*
'pastetoggle' 'pt'	文字列	(既定では "")
			グローバル
			{Vi にはない}
	When non-empty, specifies the key sequence that toggles the 'paste'
	option.  This is like specifying a mapping: >
	    :map {keys} :set invpaste<CR>
<	Where {keys} is the value of 'pastetoggle'.
	The difference is that it will work even when 'paste' is set.
	'pastetoggle' works in Insert mode and Normal mode, but not in
	Command-line mode.
	Mappings are checked first, thus overrule 'pastetoggle'.  However,
	when 'paste' is on mappings are ignored in Insert mode, thus you can do
	this: >
	    :map <F10> :set paste<CR>
	    :map <F11> :set nopaste<CR>
	    :imap <F10> <C-O>:set paste<CR>
	    :imap <F11> <nop>
	    :set pastetoggle=<F11>
<	This will make <F10> start paste mode and <F11> stop paste mode.
	Note that typing <F10> in paste mode inserts "<F10>", since in paste
	mode everything is inserted literally, except the 'pastetoggle' key
	sequence.

						*'pex'* *'patchexpr'*
'patchexpr' 'pex'	文字列	(既定では "")
			グローバル
			{Vi にはない}
			{Vi mが |+diff| 機能付きでコンパイルされたときのみ使用
			可能}
	Expression which is evaluated to apply a patch to a file and generate
	the resulting new version of the file.  See |diff-patchexpr|.

						*'patchmode'* *'pm'* *E206*
'patchmode' 'pm'	文字列	(既定では "")
			グローバル
			{Vi にはない}
	When non-empty the oldest version of a file is kept.  This can be used
	to keep the original version of a file if you are changing files in a
	source distribution.  Only the first time that a file is written a
	copy of the original file will be kept.  The name of the copy is the
	name of the original file with the string in the 'patchmode' option
	appended.  This option should start with a dot.  Use a string like
	".org".  'backupdir' must not be empty for this to work (Detail: The
	backup file is renamed to the patchmode file after the new file has
	been successfully written, that's why it must be possible to write a
	backup file).  If there was no file to be backed up, an empty file is
	created.
	When the 'backupskip' pattern matches, a patchmode file is not made.
	Using 'patchmode' for compressed files appends the extension at the
	end (e.g., "file.gz.orig"), thus the resulting name isn't always
	recognized as a compressed file.

					*'path'* *'pa'* *E343* *E345* *E347*
'path' 'pa'		文字列	(default on Unix: ".,/usr/include,,"
				   on OS/2:       ".,/emx/include,,"
				   other systems: ".,,")
			グローバル／バッファについてローカル |global-local|
			{Vi にはない}
	This is a list of directories which will be searched when using the
	|gf|, [f, ]f, ^Wf, |:find| and other commands, provided that the file
	being searched for has a relative path (not starting with '/').  The
	directories in the 'path' option may be relative or absolute.
	- Use commas to separate directory names: >
		:set path=.,/usr/local/include,/usr/include
<	- Spaces can also be used to separate directory names (for backwards
	  compatibility with version 3.0).  To have a space in a directory
	  name, precede it with an extra backslash, and escape the space: >
		:set path=.,/dir/with\\\ space
<	- To include a comma in a directory name precede it with an extra
	  backslash: >
		:set path=.,/dir/with\\,comma
<	- To search relative to the directory of the current file, use: >
		:set path=.
<	- To search in the current directory use an empty string between two
	  commas: >
		:set path=,,
<	- A directory name may end in a ':' or '/'.
	- Environment variables are expanded |:set_env|.
	- When using |netrw.vim| URLs can be used.  For example, adding
	  "http://www.vim.org" will make ":find index.html" work.
	- Search upwards and downwards in a directory tree:
	  1) "*" matches a sequence of characters, e.g.: >
		:set path=/usr/include/*
<	     means all subdirectories in /usr/include (but not /usr/include
	     itself). >
		:set path=/usr/*c
<	     matches /usr/doc and /usr/src.
	  2) "**" matches a subtree, up to 100 directories deep.  Example: >
		:set path=/home/user_x/src/**
<	     means search in the whole subtree under "/home/usr_x/src".
	  3) If the path ends with a ';', this path is the startpoint
	     for upward search.
	  See |file-searching| for more info and exact syntax.
	  {not available when compiled without the |+path_extra| feature}
	- Careful with '\' characters, type two to get one in the option: >
		:set path=.,c:\\include
<	  Or just use '/' instead: >
		:set path=.,c:/include
<	Don't forget "." or files won't even be found in the same directory as
	the file!
	The maximum length is limited.  How much depends on the system, mostly
	it is something like 256 or 1024 characters.
	You can check if all the include files are found, using the value of
	'path', see |:checkpath|.
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	directories from the list.  This avoids problems when a future version
	uses another default.  To remove the current directory use: >
		:set path-=
<	To add the current directory use: >
		:set path+=
<	To use an environment variable, you probably need to replace the
	separator.  Here is an example to append $INCL, in which directory
	names are separated with a semi-colon: >
		:let &path = &path . "," . substitute($INCL, ';', ',', 'g')
<	Replace the ';' with a ':' or whatever separator is used.  Note that
	this doesn't work when $INCL contains a comma or white space.

				    *'previewheight'* *'pvh'*
'previewheight' 'pvh'	数値 (default 12)
			グローバル
			{Vi にはない}
			{not available when compiled without the |+windows| or
			|+quickfix| feature}
	Default height for a preview window.  Used for |:ptag| and associated
	commands.  Used for |CTRL-W_}| when no count is given.

			*'previewwindow'* *'nopreviewwindow'* *'pvw'* *'nopvw'*
'previewwindow' 'pvw'	切替	(既定ではオフ)
			ウィンドウについてローカル
			{Vi にはない}
			{not available when compiled without the |+windows| or
			|+quickfix| feature}
	Identifies the preview window.  Only one window can have this option
	set.  It's normally not set directly, but by using one of the commands
	|:ptag|, |:pedit|, etc.

						*'printdevice'* *'pdev'*
'printdevice' 'pdev'	文字列	(default empty)
			グローバル
			{Vi にはない}
			{Vi mが |+printer| 機能付きでコンパイルされたときのみ
			使用可能}
	This defines the name of the printer to be used when the |:hardcopy|
	command is issued with a bang (!) to skip the printer selection
	dialog.  On Win32, it should be the printer name exactly as it appears
	in the standard printer dialog.
	If the option is empty, then vim will use the system default printer
	for ":hardcopy!"

						*'printexpr'* *'pexpr'*
'printexpr' 'pexpr'	文字列	(default: see below)
			グローバル
			{Vi にはない}
			{only available when compiled with the |+printer|
			and |+postscript| features}
	Expression that is evaluated to print the PostScript produced with
	":hardcopy".
	The file name to be printed is in |v:fname_in|.
	The arguments to the ":hardcopy" command are in |v:cmdarg|.
	The expression must take care of deleting the file after printing it.
	When there is an error, the expression must return a non-zero number.
	If there is no error, return zero or an empty string.
	The default for non MS-Windows or VMS systems is to simply use "lpr"
	to print the file: >

	    system('lpr' . (&printdevice == '' ? '' : ' -P' . &printdevice)
		. ' ' . v:fname_in) . delete(v:fname_in) + v:shell_error
<
	On MS-Windows machines the default is to copy the file to the
	currently specified printdevice: >

	    system('copy' . ' ' . v:fname_in . ' "' . &printdevice . '"')
			. delete(v:fname_in)
<
	On VMS machines the default is to send the file to either the default
	or currently specified printdevice: >

	    system('print' . (&printdevice == '' ? '' : ' /queue=' .
                        &printdevice) . ' ' . v:fname_in) . delete(v:fname_in)
<
	If you change this option, using a function is an easy way to avoid
	having to escape all the spaces.  Example: >

		:set printexpr=PrintFile(v:fname_in)
		:function PrintFile(fname)
		:  call system("ghostview " . a:fname)
		:  call delete(a:fname)
		:  return v:shell_error
		:endfunc

<	Be aware that some print programs return control before they have read
	the file.  If you delete the file too soon it will not be printed.
	These programs usually offer an option to have them remove the file
	when printing is done.
								*E365*
	If evaluating the expression fails or it results in a non-zero number,
	you get an error message.  In that case Vim will delete the
	file.  In the default value for non-MS-Windows a trick is used: Adding
	"v:shell_error" will result in a non-zero number when the system()
	call fails.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'printfont'* *'pfn'* *E448*
'printfont' 'pfn'	文字列	(default "courier")
			グローバル
			{Vi にはない}
			{Vi mが |+printer| 機能付きでコンパイルされたときのみ
			使用可能}
	This is the name of the font that will be used for the |:hardcopy|
	command's output.  It has the same format as the 'guifont' option,
	except that only one font may be named, and the special "guifont=*"
	syntax is not available.
	In the Win32 GUI version this specifies a font name with its extra
	attributes, as with the 'guifont' option.
	For other systems, only ":h11" is recognized, where "11" is the point
	size of the font.  When omitted, the points size is 10.

						*'printheader'* *'pheader'*
'printheader' 'pheader'  string  (default "%<%f%h%m%=Page %N")
			グローバル
			{Vi にはない}
			{Vi mが |+printer| 機能付きでコンパイルされたときのみ
			使用可能}
	This defines the format of the header produced in |:hardcopy| output.
	The option is defined in the same way as the 'statusline' option.
	If Vim has not been compiled with the |+statusline| feature, this
	option has no effect and a simple default header is used, which shows
	the page number.

						*'printoptions'* *'popt'*
'printoptions' 'popt' string (既定では "")
			グローバル
			{Vi にはない}
			{only available when compiled with |+printer| feature}
	This is a comma-separated list of items that control the format of
	the output of |:hardcopy|:

	  left:{spec}		left margin (既定では 10pc)
	  right:{spec}		right margin (既定では 5pc)
	  top:{spec}		top margin (既定では 5pc)
	  bottom:{spec}		bottom margin (既定では 5pc)
				{spec} is a number followed by "in" for
				inches, "pt" for points (1 point is 1/72 of an
				inch), "mm" for millimetres or "pc" for a
				percentage of the media size.
				Weird example:
				    left:2in,top:30pt,right:16mm,bottom:3pc
				If the unit is not recognized there is no
				error and the default value is used.

	  header:{nr}		数値 of lines to reserve for the header.
				Only the first line is actually filled, thus
				when {nr} is 2 there is one empty line.  The
				header is formatted according to
				'printheader'.
	  header:0		Do not print a header.
	  header:2  (default)	Use two lines for the header

	  syntax:n		Do not use syntax highlighting.  This is
				faster and thus useful when printing large
				files.
	  syntax:y		Do syntax highlighting.
	  syntax:a  (default)	Use syntax highlighting if the printer appears
				to be able to print color or grey.

	  number:y		Include line numbers in the printed output.
	  number:n  (default)	No line numbers.

	  wrap:y    (default)   Wrap long lines.
	  wrap:n		Truncate long lines.

	  duplex:off		Print on one side.
	  duplex:long (default)	Print on both sides (when possible), bind on
				long side.
	  duplex:short		Print on both sides (when possible), bind on
				short side.

	  collate:y  (default)	Collating: 1 2 3, 1 2 3, 1 2 3
	  collate:n		No collating: 1 1 1, 2 2 2, 3 3 3

	  jobsplit:n (default)	Do all copies in one print job
	  jobsplit:y		Do each copy as a separate print job.  Useful
				when doing N-up postprocessing.

	  portrait:y (default)	Orientation is portrait.
	  portrait:n		Orientation is landscape.


	  paper:A4   (default)	Paper size: A4
	  paper:{name}		Paper size from this table:
					{name}		 size in inch ~
					10x14		10    x 14
					A3		11.69 x 16.54
					A4		 8.27 x 11.69
					A5		 5.83 x	8.27
					B4		10.12 x 14.33
					B5		 7.17 x 10.12
					executive	 7.25 x 10.5
					folio		 8.27 x 13
					ledger		17    x 11
					legal		 8.5  x 14
					letter		 8.5  x 11
					quarto		 8.5  x 10.83
					statement	 5.5  x	8.5
					tabloid		11    x 17

	The item indicated with (default) is used when the item is not
	present.  The values are not always used, especially when using a
	dialog to select the printer and options.
	Example: >
		:set printoptions=paper:letter,duplex:off
<
				   *'readonly'* *'ro'* *'noreadonly'* *'noro'*
'readonly' 'ro'		切替	(既定ではオフ)
			バッファについてローカル
			{Vi にはない}
	If on, writes fail unless you use a '!'.  Protects you from
	accidentally overwriting a file.  Default on when Vim is started
	in read-only mode ("vim -R") or when the executable is called "view".
	{not in Vi:}  When using the ":view" command the 'readonly' option is
	set for the newly edited buffer.  When using ":w!" the 'readonly'
	option is reset for the current buffer.

						*'remap'* *'noremap'*
'remap'			切替	(既定ではオン)
			グローバル
	Allows for mappings to work recursively.  If you do not want this for
	a single entry, use the :noremap[!] command.

						*'report'*
'report'		数値	(既定では 2)
			グローバル
	Threshold for reporting number of lines changed.  When the number of
	changed lines is more than 'report' a message will be given for most
	":" commands.  If you want it always, set 'report' to 0.
	For the ":substitute" command the number of substitutions is used
	instead of the number of lines.

			 *'restorescreen'* *'rs'* *'norestorescreen'* *'nors'*
'restorescreen' 'rs'	切替	(既定ではオン)
			グローバル
			{Vi にはない}  {Windows 95/NT console version only}
	When set, the screen contents is restored when exiting Vim.  This also
	happens when executing external commands.

	For non-Windows Vim: You can set or reset the 't_ti' and 't_te'
	options in your .vimrc.  To disable restoring:
		set t_ti= t_te=
	To enable restoring (for an xterm):
		set t_ti=^[7^[[r^[[?47h t_te=^[[?47l^[8
	(Where ^[ is an <Esc>, type CTRL-V <Esc> to insert it)

				*'revins'* *'ri'* *'norevins'* *'nori'*
'revins' 'ri'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+rightleft| 機能付きでコンパイルされたときの
			み使用可能}
	Inserting characters in Insert mode will work backwards.  See "typing
	backwards" |ins-reverse|.  This option can be toggled with the CTRL-_
	command in Insert mode, when 'allowrevins' is set.
	NOTE: This option is reset when 'compatible' or 'paste' is set.

				 *'rightleft'* *'rl'* *'norightleft'* *'norl'*
'rightleft' 'rl'	切替	(既定ではオフ)
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+rightleft| 機能付きでコンパイルされたときの
			み使用可能}
	When on, display orientation becomes right-to-left, i.e., character
	that are stored in the file appear from the right to the left.  Using
	this option, it is possible to edit files for languages that are
	written from the right to the left such as Hebrew and Arabic.  This
	option is per window, so it is possible to edit mixed files
	simultaneously, or to view the same file in both ways (this is
	sometimes useful when editing Hebrew TeX--XeT files).  See
	|rileft.txt|.

					 *'ruler'* *'ru'* *'noruler'* *'noru'*
'ruler' 'ru'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{not available when compiled without the
			|+cmdline_info| feature}
	Show the line and column number of the cursor position, separated by a
	comma.  When there is room, the relative position of the displayed
	text in the file is shown on the far right:
		Top	first line is visible
		Bot	last line is visible
		All	first and last line are visible
		45%	relative position in the file
	If 'rulerformat' is set, it will determine the contents of the ruler.
	Each window has its own ruler.  If a window has a status line, the
	ruler is shown there.  Otherwise it is shown in the last line of the
	screen.  If the statusline is given by 'statusline' (ie. not empty),
	this option takes precedence over 'ruler' and 'rulerformat'
	If the number of characters displayed is different from the number of
	bytes in the text (e.g., for a TAB or a multi-byte character), both
	the text column (byte number) and the screen column are shown,
	separated with a dash.
	For an empty line "0-1" is shown.
	For an empty buffer the line number will also be zero: "0,0-1".
	This option is reset when the 'paste' option is set.
	If you don't want to see the ruler all the time but want to know where
	you are, use "g CTRL-G" |g_CTRL-G|.
	NOTE: This option is reset when 'compatible' is set.

						*'rulerformat'* *'ruf'*
'rulerformat' 'ruf'	文字列	(default empty)
			グローバル
			{Vi にはない}
			{Vi mが |+statusline| 機能付きでコンパイルされたときの
			み使用可能}
	When this option is not empty, it determines the content of the ruler
	文字列, as displayed for the 'ruler' option.
	The format of this option, is like that of 'statusline'.
	The default ruler width is 17 characters.  To make the ruler 15
	characters wide, put "%15(" at the start and "%)" at the end.
	Example: >
		:set rulerformat=%15(%c%V\ %p%%%)
<
						*'runtimepath'* *'rtp'*
'runtimepath' 'rtp'	文字列	(default:
					Unix: "$HOME/.vim,
						$VIM/vimfiles,
						$VIMRUNTIME,
						$VIM/vimfiles/after,
						$HOME/.vim/after"
					Amiga: "home:vimfiles,
						$VIM/vimfiles,
						$VIMRUNTIME,
						$VIM/vimfiles/after,
						home:vimfiles/after"
					PC, OS/2: "$HOME/vimfiles,
						$VIM/vimfiles,
						$VIMRUNTIME,
						$VIM/vimfiles/after,
						$HOME/vimfiles/after"
					Macintosh: "$VIM:vimfiles,
						$VIMRUNTIME,
						$VIM:vimfiles:after"
					RISC-OS: "Choices:vimfiles,
						$VIMRUNTIME,
						Choices:vimfiles/after"
					VMS: "sys$login:vimfiles,
						$VIM/vimfiles,
						$VIMRUNTIME,
						$VIM/vimfiles/after,
						sys$login:vimfiles/after"
			グローバル
			{Vi にはない}
	This is a list of directories which will be searched for runtime
	files:
	  filetype.vim	filetypes by file name |new-filetype|
	  scripts.vim	filetypes by file contents |new-filetype-scripts|
	  colors/	color scheme files |:colorscheme|
	  compiler/	compiler files |:compiler|
	  doc/		documentation |write-local-help|
	  ftplugin/	filetype plugins |write-filetype-plugin|
	  indent/	indent scripts |indent-expression|
	  keymap/	key mapping files |mbyte-keymap|
	  lang/		menu translations |:menutrans|
	  menu.vim	GUI menus |menu.vim|
	  plugin/	plugin scripts |write-plugin|
	  syntax/	syntax files |mysyntaxfile|
	  tutor/	files for vimtutor |tutor|

	And any other file searched for with the |:runtime| command.

	The defaults for most systems are setup to search five locations:
	1. In your home directory, for your personal preferences.
	2. In a system-wide Vim directory, for preferences from the system
	   administrator.
	3. In $VIMRUNTIME, for files distributed with Vim.
	4. In the "after" directory in the system-wide Vim directory.  This is
	   for the system administrator to overrule or add to the distributed
	   defaults (rarely needed)
	5. In the "after" directory in your home directory.  This is for
	   personal preferences to overrule or add to the distributed defaults
	   or system-wide settings (rarely needed).

	Note that, unlike 'path', no wildcards like "**" are allowed.  Normal
	wildcards are allowed, but can significantly slow down searching for
	runtime files.  For speed, use as few items as possible and avoid
	wildcards.
	See |:runtime|.
	Example: >
		:set runtimepath=~/vimruntime,/mygroup/vim,$VIMRUNTIME
<	This will use the directory "~/vimruntime" first (containing your
	personal Vim runtime files), then "/mygroup/vim" (shared between a
	group of people) and finally "$VIMRUNTIME" (the distributed runtime
	files).
	You probably should always include $VIMRUNTIME somewhere, to use the
	distributed runtime files.  You can put a directory before $VIMRUNTIME
	to find files which replace a distributed runtime files.  You can put
	a directory after $VIMRUNTIME to find files which add to distributed
	runtime files.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'scroll'* *'scr'*
'scroll' 'scr'		数値	(default: half the window height)
			ウィンドウについてローカル
	数値 of lines to scroll with CTRL-U and CTRL-D commands.  Will be
	set to half the number of lines in the window when the window size
	changes.  If you give a count to the CTRL-U or CTRL-D command it will
	be used as the new value for 'scroll'.  Reset to half the window
	height with ":set scroll=0".   {Vi is a bit different: 'scroll' gives
	the number of screen lines instead of file lines, makes a difference
	when lines wrap}

			*'scrollbind'* *'scb'* *'noscrollbind'* *'noscb'*
'scrollbind' 'scb'	boolean  (default off)
			ウィンドウについてローカル
			{Vi にはない}
			{Vi mが |+scrollbind| 機能付きでコンパイルされたときの
			み使用可能}
	See also |scroll-binding|.  When this option is set, the current
	window scrolls as other scrollbind windows (windows that also have
	this option set) scroll.  This option is useful for viewing the
	differences between two versions of a file, see 'diff'.
	See |'scrollopt'| for options that determine how this option should be
	interpreted.

						*'scrolljump'* *'sj'*
'scrolljump' 'sj'	数値	(既定では 1)
			グローバル
			{Vi にはない}
	Minimal number of lines to scroll when the cursor gets off the
	screen (e.g., with "j").  Not used for scroll commands (e.g., CTRL-E,
	CTRL-D).  Useful if your terminal scrolls very slowly.
	NOTE: This option is set to 1 when 'compatible' is set.

						*'scrolloff'* *'so'*
'scrolloff' 'so'	数値	(既定では 0)
			グローバル
			{Vi にはない}
	Minimal number of screen lines to keep above and below the cursor.
	This will make some context visible around where you are working.  If
	you set it to a very large value (999) the cursor line will always be
	in the middle of the window (except at the start or end of the file or
	when long lines wrap).
	For scrolling horizontallly see 'sidescrolloff'.
	NOTE: This option is set to 0 when 'compatible' is set.

						*'scrollopt'* *'sbo'*
'scrollopt' 'sbo'	文字列	(default "ver,jump")
			グローバル
			{Vi mが |+scrollbind| 機能付きでコンパイルされたときの
			み使用可能}
			{Vi にはない}
	This is a comma-separated list of words that specifies how
	'scrollbind' windows should behave.
	The following words are available:
	    ver		Bind vertical scrolling for 'scrollbind' windows
	    hor		Bind horizontal scrolling for 'scrollbind' windows
	    jump	Applies to the offset between two windows for vertical
			scrolling.  This offset is the difference in the first
			displayed line of the bound windows.  When moving
			around in a window, another 'scrollbind' window may
			reach a position before the start or after the end of
			the buffer.  The offset is not changed though, when
			moving back the 'scrollbind' window will try to scroll
			to the desired position when possible.
			When now making that window the current one, two
			things can be done with the relative offset:
			1. When "jump" is not included, the relative offset is
			   adjusted for the scroll position in the new current
			   window.  When going back to the other window, the
			   the new relative offset will be used.
			2. When "jump" is included, the other windows are
			   scrolled to keep the same relative offset.  When
			   going back to the other window, it still uses the
			   same relative offset.
	Also see |scroll-binding|.

						*'sections'* *'sect'*
'sections' 'sect'	文字列	(default "SHNHH HUnhsh")
			グローバル
	Specifies the nroff macros that separate sections.  These are pairs of
	two letters (See |object-motions|).  The default makes a section start
	at the nroff macros ".SH", ".NH", ".H", ".HU", ".nh" and ".sh".

						*'secure'* *'nosecure'*
'secure'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	When on, ":autocmd", shell and write commands are not allowed in
	".vimrc" and ".exrc" in the current directory and map commands are
	displayed.  Switch it off only if you know that you will not run into
	problems, or when the 'exrc' option is off.  On Unix this option is
	only used if the ".vimrc" or ".exrc" is not owned by you.  This can be
	dangerous if the systems allows users to do a "chown".  You better set
	'secure' at the end of your ~/.vimrc then.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'selection'* *'sel'*
'selection' 'sel'	文字列	(default "inclusive")
			グローバル
			{Vi にはない}
	This option defines the behavior of the selection.  It is only used
	in Visual and Select mode.
	Possible values:
	   value	past line     inclusive ~
	   old		   no		yes
	   inclusive	   yes		yes
	   exclusive	   yes		no
	"past line" means that the cursor is allowed to be positioned one
	character past the line.
	"inclusive" means that the last character of the selection is included
	in an operation.  For example, when "x" is used to delete the
	selection.

	The 'selection' option is set by the |:behave| command.

						*'selectmode'* *'slm'*
'selectmode' 'slm'	文字列	(既定では "")
			グローバル
			{Vi にはない}
	This is a comma separated list of words, which specifies when to start
	Select mode instead of Visual mode, when a selection is started.
	Possible values:
	   mouse	when using the mouse
	   key		when using shifted special keys
	   cmd		when using "v", "V" or CTRL-V
	See |Select-mode|.
	The 'selectmode' option is set by the |:behave| command.

						*'sessionoptions'* *'ssop'*
'sessionoptions' 'ssop'	文字列	(default: "blank,buffers,curdir,folds,
							help,options,winsize")
			グローバル
			{Vi にはない}
			{Vi mが |+mksession| 機能付きでコンパイルされたときの
			み使用可能}
	Changes the effect of the |:mksession| command.  It is a comma
	separated list of words.  Each word enables saving and restoring
	something:
	   word		save and restore ~
	   blank	empty windows
	   buffers	hidden and unloaded buffers, not just those in windows
	   curdir	the current directory
	   folds	manually created folds, opened/closed folds and local
			fold options
	   globals	global variables that start with an uppercase letter
			and contain at least one lowercase letter.
	   help		the help window
	   localoptions	options and mappings local to a window or buffer (not
			グローバル values for local options)
	   options	all options and mappings (also global values for local
			options)
	   resize	size of the Vim window: 'lines' and 'columns'
	   sesdir	the directory in which the session file is located
			will become the current directory (useful with
			projects accessed over a network from different
			systems)
	   slash	backslashes in file names replaced with forward
			slashes
	   unix		with Unix end-of-line format (single <NL>), even when
			on Windows or DOS
	   winpos	position of the whole Vim window
	   winsize	window sizes

	Don't include both "curdir" and "sesdir".
	When "curdir" nor "sesdir" is included, file names are stored with
	absolute paths.
	"slash" and "unix" are useful on Windows when sharing session files
	with Unix.  The Unix version of Vim cannot source dos format scripts,
	but the Windows version of Vim can source unix format scripts.

						*'shell'* *'sh'* *E91*
'shell' 'sh'		文字列	(default $SHELL or "sh",
					MS-DOS and Win32: "command.com" or
					"cmd.exe", OS/2: "cmd")
			グローバル
	Name of the shell to use for ! and :! commands.  When changing the
	value also check these options: 'shelltype', 'shellpipe', 'shellslash'
	'shellredir', 'shellquote', 'shellxquote' and 'shellcmdflag'.
	It is allowed to give an argument to the command, e.g.  "csh -f".
	See |option-backslash| about including spaces and backslashes.
	Environment variables are expanded |:set_env|.
	If the name of the shell contains a space, you might need to enclose
	it in quotes.  Example: >
		:set shell=\"c:\program\ files\unix\sh.exe\"\ -f
<	Note the backslash before each quote (to avoid starting a comment) and
	each space (to avoid ending the option value).  Also note that the
	"-f" is not inside the quotes, because it is not part of the command
	name.  And Vim automagically recognizes the backslashes that are path
	separators.
	For Dos 32 bits (DJGPP), you can set the $DJSYSFLAGS environment
	variable to change the way external commands are executed.  See the
	libc.inf file of DJGPP.
	Under MS-Windows, when the executable ends in ".com" it must be
	included.  Thus setting the shell to "command.com" or "4dos.com"
	works, but "command" and "4dos" do not work for all commands (e.g.,
	filtering).
	For unknown reasons, when using "4dos.com" the current directory is
	changed to "C:\".  To avoid this set 'shell' like this: >
		:set shell=command.com\ /c\ 4dos
<	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'shellcmdflag'* *'shcf'*
'shellcmdflag' 'shcf'	文字列	(default: "-c", MS-DOS and Win32, when 'shell'
					does not contain "sh" somewhere: "/c")
			グローバル
			{Vi にはない}
	Flag passed to the shell to execute "!" and ":!" commands; e.g.,
	"bash.exe -c ls" or "command.com /c dir".  For the MS-DOS-like
	systems, the default is set according to the value of 'shell', to
	reduce the need to set this option by the user.  It's not used for
	OS/2 (EMX figures this out itself).  See |option-backslash| about
	including spaces and backslashes.  See |dos-shell|.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'shellpipe'* *'sp'*
'shellpipe' 'sp'	文字列	(default ">", "| tee", "|& tee" or "2>&1| tee")
			グローバル
			{Vi にはない}
			{Vi mが |+quickfix| 機能付きでコンパイルされたときのみ
			使用可能}
	文字列 to be used to put the output of the ":make" command in the
	error file.  See also |:make_makeprg|.  See |option-backslash| about
	including spaces and backslashes.
	The name of the temporary file can be represented by "%s" if necessary
	(the file name is appended automatically if no %s appears in the value
	of this option).
	For the Amiga and MS-DOS the default is ">".  The output is directly
	saved in a file and not echoed to the screen.
	For Unix the default it "| tee".  The stdout of the compiler is saved
	in a file and echoed to the screen.  If the 'shell' option is "csh" or
	"tcsh" after initializations, the default becomes "|& tee".  If the
	'shell' option is "sh", "ksh", "zsh" or "bash" the default becomes
	"2>&1| tee".  This means that stderr is also included.
	The initialization of this option is done after reading the ".vimrc"
	and the other initializations, so that when the 'shell' option is set
	there, the 'shellpipe' option changes automatically, unless it was
	explicitly set before.
	When 'shellpipe' is set to an empty string, no redirection of the
	":make" output will be done.  This is useful if you use a 'makeprg'
	that writes to 'makeef' by itself.  If you want no piping, but do
	want to include the 'makeef', set 'shellpipe' to a single space.
	Don't forget to precede the space with a backslash: ":set sp=\ ".
	In the future pipes may be used for filtering and this option will
	become obsolete (at least for Unix).
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'shellquote'* *'shq'*
'shellquote' 'shq'	文字列	(default: ""; MS-DOS and Win32, when 'shell'
					contains "sh" somewhere: "\"")
			グローバル
			{Vi にはない}
	Quoting character(s), put around the command passed to the shell, for
	the "!" and ":!" commands.  The redirection is kept outside of the
	quoting.  See 'shellxquote' to include the redirection.  It's
	probably not useful to set both options.
	This is an empty string by default.  Only known to be useful for
	third-party shells on MS-DOS-like systems, such as the MKS Korn Shell
	or bash, where it should be "\"".  The default is adjusted according
	the value of 'shell', to reduce the need to set this option by the
	user.  See |dos-shell|.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'shellredir'* *'srr'*
'shellredir' 'srr'	文字列	(default ">", ">&" or ">%s 2>&1")
			グローバル
			{Vi にはない}
	文字列 to be used to put the output of a filter command in a temporary
	file.  See also |:!|.  See |option-backslash| about including spaces
	and backslashes.
	The name of the temporary file can be represented by "%s" if necessary
	(the file name is appended automatically if no %s appears in the value
	of this option).
	The default is ">".  For Unix, if the 'shell' option is "csh", "tcsh"
	or "zsh" during initializations, the default becomes ">&".  If the
	'shell' option is "sh", "ksh" or "bash" the default becomes
	">%s 2>&1".  This means that stderr is also included.
	For Win32, the Unix checks are done and additionally "cmd" is checked
	for, which makes the default ">%s 2>&1".  Also, the same names with
	".exe" appended are checked for.
	The initialization of this option is done after reading the ".vimrc"
	and the other initializations, so that when the 'shell' option is set
	there, the 'shellredir' option changes automatically unless it was
	explicitly set before.
	In the future pipes may be used for filtering and this option will
	become obsolete (at least for Unix).
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

			*'shellslash'* *'ssl'* *'noshellslash'* *'nossl'*
'shellslash' 'ssl'	切替	(既定ではオフ)
			グローバル
			{Vi にはない} {only for MSDOS, MS-Windows and OS/2}
	When set, a forward slash is used when expanding file names.  This is
	useful when a Unix-like shell is used instead of command.com or
	cmd.exe.  Backward slashes can still be typed, but they are changed to
	forward slashes by Vim.
	Note that setting or resetting this option has no effect for some
	existing file names, thus this option needs to be set before opening
	any file for best results.  This might change in the future.

						*'shelltype'* *'st'*
'shelltype' 'st'	数値	(既定では 0)
			グローバル
			{Vi にはない} {only for the Amiga}
	On the Amiga this option influences the way how the commands work
	which use a shell.
	0 and 1: always use the shell
	2 and 3: use the shell only to filter lines
	4 and 5: use shell only for ':sh' command
	When not using the shell, the command is executed directly.

	0 and 2: use "shell 'shellcmdflag' cmd" to start external commands
	1 and 3: use "shell cmd" to start external commands

						*'shellxquote'* *'sxq'*
'shellxquote' 'sxq'	文字列	(default: "";
					for Win32, when 'shell' contains "sh"
					somewhere: "\""
					for Unix, when using system(): "\"")
			グローバル
			{Vi にはない}
	Quoting character(s), put around the command passed to the shell, for
	the "!" and ":!" commands.  Includes the redirection.  See
	'shellquote' to exclude the redirection.  It's probably not useful
	to set both options.
	This is an empty string by default.  Known to be useful for
	third-party shells when using the Win32 version, such as the MKS Korn
	Shell or bash, where it should be "\"".  The default is adjusted
	according the value of 'shell', to reduce the need to set this option
	by the user.  See |dos-shell|.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

			*'shiftround'* *'sr'* *'noshiftround'* *'nosr'*
'shiftround' 'sr'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	Round indent to multiple of 'shiftwidth'.  Applies to > and <
	commands.  CTRL-T and CTRL-D in Insert mode always round the indent to
	a multiple of 'shiftwidth' (this is Vi compatible).
	NOTE: This option is reset when 'compatible' is set.

						*'shiftwidth'* *'sw'*
'shiftwidth' 'sw'	数値	(既定では 8)
			バッファについてローカル
	数値 of spaces to use for each step of (auto)indent.  Used for
	|'cindent'|, |>>|, |<<|, etc.

						*'shortmess'* *'shm'*
'shortmess' 'shm'	文字列	(Vim default "filnxtToO", Vi default: "")
			グローバル
			{Vi にはない}
	This option helps to avoid all the |hit-enter| prompts caused by file
	messages, for example  with CTRL-G, and to avoid some other messages.
	It is a list of flags:
	 flag	meaning when present	~
	  f	use "(3 of 5)" instead of "(file 3 of 5)"
	  i	use "[noeol]" instead of "[Incomplete last line]"
	  l	use "999L, 888C" instead of "999 lines, 888 characters"
	  m	use "[+]" instead of "[Modified]"
	  n	use "[New]" instead of "[New File]"
	  r	use "[RO]" instead of "[readonly]"
	  w	use "[w]" instead of "written" for file write message
		and "[a]" instead of "appended" for ':w >> file' command
	  x	use "[dos]" instead of "[dos format]", "[unix]" instead of
		"[unix format]" and "[mac]" instead of "[mac format]".
	  a	all of the above abbreviations

	  o	overwrite message for writing a file with subsequent message
		for reading a file (useful for ":wn" or when 'autowrite' on)
	  O	message for reading a file overwrites any previous message.
		Also for quickfix message (e.g., ":cn").
	  s	don't give "search hit BOTTOM, continuing at TOP" or "search
		hit TOP, continuing at BOTTOM" messages
	  t	truncate file message at the start if it is too long to fit
		on the command-line, "<" will appear in the left most column.
		Ignored in Ex mode.
	  T	truncate other messages in the middle if they are too long to
		fit on the command line. "..." will appear in the middle.
		Ignored in Ex mode.
	  W	don't give "written" or "[w]" when writing a file
	  A	don't give the "ATTENTION" message when an existing swap file
		is found.
	  I	don't give the intro message when starting Vim |:intro|.

	This gives you the opportunity to avoid that a change between buffers
	requires you to hit <Enter>, but still gives as useful a message as
	possible for the space available.  To get the whole message that you
	would have got with 'shm' empty, use ":file!"
	Useful values:
	    shm=	No abbreviation of message.
	    shm=a	Abbreviation, but no loss of information.
	    shm=at	Abbreviation, and truncate message when necessary.

	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

				 *'shortname'* *'sn'* *'noshortname'* *'nosn'*
'shortname' 'sn'	切替	(既定ではオフ)
			バッファについてローカル
			{not in Vi, not in MS-DOS versions}
	Filenames are assumed to be 8 characters plus one extension of 3
	characters.  Multiple dots in file names are not allowed.  When this
	option is on, dots in file names are replaced with underscores when
	adding an extension (".~" or ".swp").  This option is not available
	for MS-DOS, because then it would always be on.  This option is useful
	when editing files on an MS-DOS compatible filesystem, e.g., messydos
	or crossdos.  When running the Win32 GUI version under Win32s, this
	option is always on by default.

						*'showbreak'* *'sbr'*
'showbreak' 'sbr'	文字列	(既定では "")
			グローバル
			{Vi にはない}
			{not available when compiled without the  |+linebreak|
			feature}
	文字列 to put at the start of lines that have been wrapped.  Useful
	values are "> " or "+++ ".  Only printable characters are allowed,
	excluding <Tab> and comma (in a future version the comma might be used
	to separate the part that is shown at the end and at the start of a
	line).  The characters are highlighted according to the '@' flag in
	'highlight'.
	Note that tabs after the showbreak will be displayed differently.
	If you want the 'showbreak' to appear in between line numbers, add the
	"n" flag to 'cpoptions'.

				     *'showcmd'* *'sc'* *'noshowcmd'* *'nosc'*
'showcmd' 'sc'		切替	(Vim default: on, off for Unix, Vi default:
				 off)
			グローバル
			{Vi にはない}
			{not available when compiled without the
			|+cmdline_info| feature}
	Show (partial) command in status line.  Set this option off if your
	terminal is slow.
	In Visual mode the size of the selected area is shown:
	- When selecting characters within a line, the number of characters.
	- When selecting more than one line, the number of lines.
	- When selecting a block, the size in screen characters: linesxcolumns.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

			*'showfulltag'* *'sft'* *'noshowfulltag'* *'nosft'*
'showfulltag' 'sft'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	When completing a word in insert mode (see |ins-completion|) from the
	tags file, show both the tag name and a tidied-up form of the search
	pattern (if there is one) as possible matches.  Thus, if you have
	matched a C function, you can see a template for what arguments are
	required (coding style permitting).

				 *'showmatch'* *'sm'* *'noshowmatch'* *'nosm'*
'showmatch' 'sm'	切替	(既定ではオフ)
			グローバル
	When a bracket is inserted, briefly jump to the matching one.  The
	jump is only done if the match can be seen on the screen.  The time to
	show the match can be set with 'matchtime'.
	A Beep is given if there is no match (no matter if the match can be
	seen or not).  This option is reset when the 'paste' option is set.
	When the 'm' flag is not included in 'cpoptions', typing a character
	will immediately move the cursor back to where it belongs.
	See the "sm" field in 'guicursor' for setting the cursor shape and
	blinking when showing the match.
	Note: For the use of the short form parental guidance is advised.

				 *'showmode'* *'smd'* *'noshowmode'* *'nosmd'*
'showmode' 'smd'	切替	(Vim default: on, Vi default: off)
			グローバル
	If in Insert, Replace or Visual mode put a message on the last line.
	Use the 'M' flag in 'highlight' to set the type of highlighting for
	this message.
	When |XIM| may be used the message will include "XIM".  But this
	doesn't mean XIM is really active, especially when 'imactivatekey' is
	not set.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

						*'sidescroll'* *'ss'*
'sidescroll' 'ss'	数値	(既定では 0)
			グローバル
			{Vi にはない}
	The minimal number of columns to scroll horizontally.  Used only when
	the 'wrap' option is off and the cursor is moved off of the screen.
	When it is zero the cursor will be put in the middle of the screen.
	When using a slow terminal set it to a large number or 0.  When using
	a fast terminal use a small number or 1.  Not used for "zh" and "zl"
	commands.

						*'sidescrolloff'* *'siso'*
'sidescrolloff' 'siso'	数値 (default 0)
			グローバル
			{Vi にはない}
	The minimal number of screen columns to keep to the left and to the
	right of the cursor if 'nowrap' is set. Setting this option to a value
	greater than 0 while having |'sidescroll'| also at a nonzero value
	makes some context visible in the line you are scrolling in
	horizontally (except at the end and beginning of the line).  Setting
	this option to a large value (like 999) has the effect of keeping the
	cursor horizontally centered in the window, as long as one does not
	come too close to the beginning or end of the line.
	NOTE: This option is set to 0 when 'compatible' is set.

	Example: Try this together with 'sidescroll' and 'listchars' as
		 in the following example to never allow the cursor to move
		 onto the "extends" character:

		 :set nowrap sidescroll=1 listchars=extends:>,precedes:<
		 :set sidescrolloff=1


			*'smartcase'* *'scs'* *'nosmartcase'* *'noscs'*
'smartcase' 'scs'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	Override the 'ignorecase' option if the search pattern contains upper
	case characters.  Only used when the search pattern is typed and
	'ignorecase' option is on.  Used for the commands "/", "?", "n", "N",
	":g" and ":s".  Not used for "*", "#", "gd", tag search, etc..  After
	"*" and "#" you can make 'smartcase' used by doing a "/" command,
	recalling the search pattern from history and hitting <Enter>.
	NOTE: This option is reset when 'compatible' is set.

			     *'smartindent'* *'si'* *'nosmartindent'* *'nosi'*
'smartindent' 'si'	切替	(既定ではオフ)
			バッファについてローカル
			{Vi にはない}
			{not available when compiled without the
			|+smartindent| feature}
	Do smart autoindenting when starting a new line.  Works for C-like
	programs, but can also be used for other languages.  'cindent' does
	something like this, works better in most cases, but is more strict,
	see |C-indenting|.  When 'cindent' is on, setting 'si' has no effect.
	'indentexpr' is a more advanced alternative.
	Normally 'autoindent' should also be on when using 'smartindent'.
	An indent is automatically inserted:
	- After a line ending in '{'.
	- After a line starting with a keyword from 'cinwords'.
	- Before a line starting with '}' (only with the "O" command).
	When typing '}' as the first character in a new line, that line is
	given the same indent as the matching '{'.
	When typing '#' as the first character in a new line, the indent for
	that line is removed, the '#' is put in the first column.  The indent
	is restored for the next line.  If you don't want this, use this
	mapping: ":inoremap # X^H#", where ^H is entered with CTRL-V CTRL-H.
	When using the ">>" command, lines starting with '#' are not shifted
	right.
	NOTE: 'smartindent' is reset when 'compatible' is set.  When 'paste'
	is set smart indenting is disabled.

				 *'smarttab'* *'sta'* *'nosmarttab'* *'nosta'*
'smarttab' 'sta'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	When on, a <Tab> in front of a line inserts blanks according to
	'shiftwidth'.  'tabstop' is used in other places.
	When off a <Tab> always inserts blanks according to 'tabstop'.
	'shiftwidth' is only used for shifting text left or right
	|shift-left-right|.
	What gets inserted (a Tab or spaces) depends on the 'expandtab'
	option.  Also see |ins-expandtab|.  When 'expandtab' is not set, the
	数値 of spaces minimized by using <Tab>s.
	NOTE: This option is reset when 'compatible' is set.

					*'softtabstop'* *'sts'*
'softtabstop' 'sts'	数値	(既定では 0)
			バッファについてローカル
			{Vi にはない}
	数値 of spaces that a <Tab> counts for while performing editing
	operations, like inserting a <Tab> or using <BS>.  It "feels" like
	<Tab>s are being inserted, while in fact a mix of spaces and <Tab>s is
	used.  This is useful to keep the 'ts' setting at its standard value
	of 8, while being able to edit like it is set to 'sts'.  However,
	commands like "x" still work on the actual characters.
	When 'sts' is zero, this feature is off.
	'softtabstop' is set to 0 when the 'paste' option is set.
	See also |ins-expandtab|.  When 'expandtab' is not set, the number of
	spaces is minimized by using <Tab>s.
	NOTE: This option is set to 0 when 'compatible' is set.

			*'splitbelow'* *'sb'* *'nosplitbelow'* *'nosb'*
'splitbelow' 'sb'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+windows| 機能付きでコンパイルされたときのみ
			使用可能}
	When on, splitting a window will put the new window below the current
	one. |:split|

			*'splitright'* *'spr'* *'nosplitright'* *'nospr'*
'splitright' 'spr'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+vertsplit| 機能付きでコンパイルされたときの
			み使用可能}
	When on, splitting a window will put the new window right of the
	current one. |:vsplit|

			   *'startofline'* *'sol'* *'nostartofline'* *'nosol'*
'startofline' 'sol'	切替	(既定ではオン)
			グローバル
			{Vi にはない}
	When "on" the commands listed below move the cursor to the first
	blank of the line.  When off the cursor is kept in the same column
	(if possible).  This applies to the commands: CTRL-D, CTRL-U, CTRL-B,
	CTRL-F, "G", "H", "M", "L", , and to the commands "d", "<<" and ">>"
	with a linewise operator, with "%" with a count and to buffer changing
	commands (CTRL-^, :bnext, :bNext, etc.).  Also for an Ex command that
	only has a line number, e.g., ":25" or ":+".
	In case of buffer changing commands the cursor is placed at the column
	where it was the last time the buffer was edited.
	NOTE: This option is set when 'compatible' is set.

			   *'statusline'* *'stl'*
'statusline' 'stl'	文字列	(default empty)
			グローバル
			{Vi にはない}
			{Vi mが |+statusline| 機能付きでコンパイルされたときの
			み使用可能}
	When nonempty, this option determines the content of the status line.
	Also see |status-line|.

	The option consists of printf style '%' items interspersed with
	normal text.  Each status line item is of the form:
	  %-0{minwid}.{maxwid}{item}
	All fields except the {item} is optional.  A single percent sign can
	be given as "%%".

	Note that the only effect of 'ruler' when this option is set (and
	'laststatus' is 2) is controlling the output of |CTRL-G|.

	field	    meaning ~
	-	    Left justify the item. The default is right justified
		    when minwid is larger than the length of the item.
	0	    Leading zeroes in numeric items. Overridden by '-'.
	minwid	    Minimum width of the item, padding as set by '-' & '0'.
	maxwid	    Maximum width of the item.  Truncation occurs with a '<'
		    on the left for text items.  Numeric items will be
		    shifted down to maxwid-2 digits followed by '>'number
		    where number is the amount of missing digits, much like
		    an exponential notation.
	item	    A one letter code as described below.

	Following is a description of the possible statusline items.  The
	second character in "item" is the type:
		N for number
		S for string
		F for flags as described below
		- not applicable

	item  meaning ~
	f S   Path to the file in the buffer, relative to current directory.
	F S   Full path to the file in the buffer.
	t S   File name (tail) of file in the buffer.
	m F   Modified flag, text is " [+]" or " [-]" if 'modifiable' is off.
	M F   Modified flag, text is ",+" or ",-".
	r F   Readonly flag, text is " [RO]".
	R F   Readonly flag, text is ",RO".
	h F   Help buffer flag, text is " [help]".
	H F   Help buffer flag, text is ",HLP".
	w F   Preview window flag, text is " [Preview]".
	W F   Preview window flag, text is ",PRV".
	y F   Type of file in the buffer, e.g., " [vim]".  See 'filetype'.
	Y F   Type of file in the buffer, e.g., ",VIM".  See 'filetype'.
	      {not available when compiled without |+autocmd| feature}
	k S   Value of "b:keymap_name" or 'keymap' when |:lmap| mappings are
	      being used: "<keymap>"
	n N   Buffer number.
	b N   Value of byte under cursor.
	B N   As above, in hexadecimal.
	o N   Byte number in file of byte under cursor, first byte is 1.
	      Mnemonic: Offset from start of file (with one added)
	      {not available when compiled without |+byte_offset| feature}
	O N   As above, in hexadecimal.
	N N   Printer page number. (Only works in the 'printheader' option.)
	l N   Line number.
	L N   Number of lines in buffer.
	c N   Column number.
	v N   Virtual column number.
	V N   Virtual column number as -{num}.  Not displayed if equal to 'c'.
	p N   Percentage through file in lines as in |CTRL-G|.
	P S   Percentage through file of displayed window.  This is like the
	      percentage described for 'ruler'.  Always 3 in length.
	a S   Argument list status as in default title. ({current} of {max})
	      Empty if the argument file count is zero or one.
	{ NF  Evaluate expression between '{' and '}' and substitute result.
	( -   Start of item group.  Can be used for setting the width and
	      alignment of a section.  Must be followed by %) somewhere.
	) -   End of item group.  No width fields allowed.
	< -   Where to truncate line if too long.  Default is at the start.
	      No width fields allowed.
	= -   Separation point between left and right aligned items.
	      No width fields allowed.
	* -   Set highlight group to User{N}, where {N} is taken from the
	      minwid field. eg. %1*.  Restore normal highlight with %* or %0*.
	      The difference between User{N} and StatusLine  will be applied
	      to StatusLineNC for the statusline of non-current windows.
	      The number N must be between 1 and 9.  See |hl-User1..9|

	Display of flags are controlled by the following heuristic:
	If a flag text starts with comma it is assumed that it wants to
	separate itself from anything but preceding plaintext.  If it starts
	with a space it is assumed that it wants to separate itself from
	anything but other flags.  That is: A leading comma is removed if the
	preceding character stems from plaintext.  A leading space is removed
	if the preceding character stems from another active flag. This will
	make a nice display when flags are used like in the examples below.

	When all items in a group becomes an empty string (ie. flags that are
	not set) and a minwid is not set for the group, the whole group will
	become empty.  This will make a group like the following disappear
	completely from the statusline when none of the flags are set. >
		:set statusline=...%(\ [%M%R%H]%)...
<
	Beware that an expression is evaluated each and every time the status
	line is displayed.  The current buffer and current window will be set
	temporarily to that of the window (and buffer) whose statusline is
	currently being drawn. The expression will evaluate in this context.
	The variable "actual_curbuf" is set to the 'bufnr()' number of the
	real current buffer.  The expression is evaluated in the |sandbox|.

	If the statusline is not updated when you want it (e.g., after setting
	a variable that's used in an expression), you can force an update by
	setting an option without changing its value.  Example: >
		:let &ro = &ro

<	A result of all digits is regarded a number for display purposes.
	Otherwise the result is taken as flag text and applied to the rules
	described above.

	Watch out for errors in expressions.  They may render Vim unusable !
	If you are stuck, hold down ':' or 'Q' to get a prompt, then quit and
	edit your .vimrc or whatever with "vim -u NONE" to get it right.

	Examples:
	Display byte count and byte value, modified flag in red. >
	  :set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
	  :hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red
<	Emulate standard status line with 'ruler' set >
	  :set statusline=%<%f%h%m%r%=%l,%c%V\ %P
<	Idem, but add ascii value of char under the cursor (like "ga") >
	  :set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P
<	Display a ,GZ flag if a compressed file is loaded >
	  :set statusline=...%r%{VarExists('b:gzflag','\ [GZ]')}%h...
<	In the |:autocmd|'s: >
	  :let b:gzflag = 1
<	And: >
	  :unlet b:gzflag
<	And define this function: >
	  :function VarExists(var, val)
	  :    if exists(a:var) | return a:val | else | return '' | endif
	  :endfunction
<
						*'suffixes'* *'su'*
'suffixes' 'su'		文字列	(default ".bak,~,.o,.h,.info,.swp,.obj")
			グローバル
			{Vi にはない}
	Files with these suffixes get a lower priority when multiple files
	match a wildcard.  See |suffixes|.  Commas can be used to separate the
	suffixes.  Spaces after the comma are ignored.  A dot is also seen as
	the start of a suffix.  To avoid a dot or comma being recognized as a
	separator, precede it with a backslash (see |option-backslash| about
	including spaces and backslashes).
	See 'wildignore' for completely ignoring files.
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	suffixes from the list.  This avoids problems when a future version
	uses another default.

						*'suffixesadd'* *'sua'*
'suffixesadd' 'sua'	文字列	(既定では "")
			バッファについてローカル
			{Vi にはない}
			{not available when compiled without the
			|+file_in_path| feature}
	Comma separated list of suffixes, which are used when searching for a
	file for the "gf", "[I", etc. commands.  Example: >
		:set suffixesadd=.java
<
				*'swapfile'* *'swf'* *'noswapfile'* *'noswf'*
'swapfile' 'swf'	切替	(既定ではオン)
			バッファについてローカル
			{Vi にはない}
	Use a swapfile for the buffer.  This option can be reset when a
	swapfile is not wanted for a specific buffer.  For example, with
	confidential information that even root must not be able to access.
	Careful: All text will be in memory:
		- Don't use this for big files.
		- Recovery will be impossible!
	A swapfile will only be present when |'updatecount'| is non-zero and
	'swapfile' is set.
	When 'swapfile' is reset, the swap file for the current buffer is
	immediately deleted.  When 'swapfile' is set, and 'updatecount' is
	non-zero, a swap file is immediately created.
	Also see |swap-file| and |'swapsync'|.

	This option is used together with 'bufhidden' and 'buftype' to
	specify special kinds of buffers.   See |special-buffers|.

						*'swapsync'* *'sws'*
'swapsync' 'sws'	文字列	(default "fsync")
			グローバル
			{Vi にはない}
	When this option is not empty a swap file is synced to disk after
	writing to it.  This takes some time, especially on busy unix systems.
	When this option is empty parts of the swap file may be in memory and
	not written to disk.  When the system crashes you may lose more work.
	On Unix the system does a sync now and then without Vim asking for it,
	so the disadvantage of setting this option off is small.  On some
	systems the swap file will not be written at all.  For a unix system
	setting it to "sync" will use the sync() call instead of the default
	fsync(), which may work better on some systems.

						*'switchbuf'* *'swb'*
'switchbuf' 'swb'	文字列	(既定では "")
			グローバル
			{Vi にはない}
	This option controls the behavior when switching between buffers.
	Possible values (comma separated list):
	   useopen	If included, jump to the first open window that
			contains the specified buffer (if there is one).
			Otherwise: Do not examine other windows.
			This setting is checked with |quickfix| commands, when
			jumping to errors (":cc", ":cn", "cp", etc.).  It is
			also used in all buffer related split commands, for
			example ":sbuffer", ":sbnext", or ":sbrewind".
	   split	If included, split the current window before loading
			a buffer. Otherwise: do not split, use current window.
			Supported in |quickfix| commands that display errors.

						*'syntax'* *'syn'*
'syntax' 'syn'		文字列  (default emtpy)
			バッファについてローカル
			{Vi にはない}
			{Vi mが |+syntax| 機能付きでコンパイルされたときのみ使
			用可能}
	When this option is set, the syntax with this name is loaded, unless
	syntax highlighting has been switched off with ":syntax off".
	Otherwise this option does not always reflect the current syntax (the
	b:current_syntax variable does).
	This option is most useful in a modeline, for a file which syntax is
	not automatically recognized.  Example, for in an IDL file: >
		/* vim: set syntax=idl : */
<	To switch off syntax highlighting for the current file, use: >
		:set syntax=OFF
<	To switch syntax highlighting on according to the current value of the
	'filetype' option: >
		:set syntax=ON
<	What actually happens when setting the 'syntax' option is that the
	Syntax autocommand event is triggered with the value as argument.
	This option is not copied to another buffer, independent of the 's' or
	'S' flag in 'cpoptions'.

					*'tabstop'* *'ts'*
'tabstop' 'ts'		数値	(既定では 8)
			バッファについてローカル
	数値 of spaces that a <Tab> in the file counts for.  Also see
	|:retab| command, and 'softtabstop' option.

	Note: Setting 'tabstop' to any other value than 8 can make your file
	appear wrong in many places (e.g., when printing it).

	There are four main ways to use tabs in Vim:
	1. Always keep 'tabstop' at 8, set 'softtabstop' and 'shiftwidth' to 4
	   (or 3 or whatever you prefer) and use 'noexpandtab'.  Then Vim
	   will use a mix of tabs and spaces, but typing Tab and BS will
	   behave like a tab appears every 4 (or 3) characters.
	2. Set 'tabstop' and 'shiftwidth' to whatever you prefer and use
	   'expandtab'.  This way you will always insert spaces.  The
	   formatting will never be messed up when 'tabstop' is changed.
	3. Set 'tabstop' and 'shiftwidth' to whatever you prefer and use a
	   |modeline| to set these values when editing the file again.  Only
	   works when using Vim to edit the file.
	4. Always set 'tabstop' and 'shiftwidth' to the same value, and
	   'noexpandtab'.  This should then work (for initial indents only)
	   for any tabstop setting that people use.  It might be nice to have
	   tabs after the first non-blank inserted as spaces if you do this
	   though.  Otherwise aligned comments will be wrong when 'tabstop' is
	   changed.

			*'tagbsearch'* *'tbs'* *'notagbsearch'* *'notbs'*
'tagbsearch' 'tbs'	切替	(既定ではオン)
			グローバル
			{Vi にはない}
	When searching for a tag (e.g., for the |:ta| command), Vim can either
	use a binary search or a linear search in a tags file.  Binary
	searching makes searching for a tag a LOT faster, but a linear search
	will find more tags if the tags file wasn't properly sorted.
	Vim normally assumes that your tags files are sorted, or indicate that
	they are not sorted.  Only when this is not the case does the
	'tagbsearch' option need to be switched off.

	When 'tagbsearch' is on, binary searching is first used in the tags
	files.  In certain situations, Vim will do a linear search instead for
	certain files, or retry all files with a linear search.  When
	'tagbsearch' is off, only a linear search is done.

	Linear searching is done anyway, for one file, when Vim finds a line
	at the start of the file indicating that it's not sorted: >
   !_TAG_FILE_SORTED	0	/some command/
<	[The whitespace before and after the '0' must be a single <Tab>]

	When a binary search was done and no match was found in any of the
	files listed in 'tags', and 'ignorecase' is set or a pattern is used
	instead of a normal tag name, a retry is done with a linear search.
	Tags in unsorted tags files, and matches with different case will only
	be found in the retry.

	When 'tagbsearch' is off, tags searching is slower when a full match
	exists, but faster when no full match exists.  Tags in unsorted tags
	files may only be found with 'tagbsearch' off.
	When the tags file is not sorted, or sorted in a wrong way (not on
	ASCII byte value), 'tagbsearch' should be off, or the line given above
	must be included in the tags file.
	This option doesn't affect commands that find all matching tags (e.g.,
	command-line completion and ":help").
	{Vi: always uses binary search in some versions}

						*'taglength'* *'tl'*
'taglength' 'tl'	数値	(既定では 0)
			グローバル
	If non-zero, tags are significant up to this number of characters.

			*'tagrelative'* *'tr'* *'notagrelative'* *'notr'*
'tagrelative' 'tr'	切替	(Vim default: on, Vi default: off)
			グローバル
			{Vi にはない}
	If on and using a tag file in another directory, file names in that
	tag file are relative to the directory where the tag file is.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

						*'tags'* *'tag'* *E433*
'tags' 'tag'		文字列	(default "./tags,tags", when compiled with
				|+emacs_tags|: "./tags,./TAGS,tags,TAGS")
			グローバル／バッファについてローカル |global-local|
	Filenames for the tag command, separated by spaces or commas.  To
	include a space or comma in a file name, precede it with a backslash
	(see |option-backslash| about including spaces and backslashes).
	When a file name starts with "./", the '.' is replaced with the path
	of the current file.  But only when the 'd' flag is not included in
	'cpoptions'.  Environment variables are expanded |:set_env|.  Also see
	|tags-option|.
	"*" and "**" Wildcards can be used to search for tags files in a
	directory tree.  See |file-searching|.  {not available when compiled
	without the |+path_extra| feature}
	If Vim was compiled with the |+emacs_tags| feature, Emacs-style tag
	files are also supported.  They are automatically recognized.  The
	default value becomes "./tags,./TAGS,tags,TAGS", unless case
	differences are ignored (MS-Windows).  |emacs-tags|
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	file names from the list.  This avoids problems when a future version
	uses another default.
	{Vi: default is "tags /usr/lib/tags"}

				*'tagstack'* *'tgst'* *'notagstack'* *'notgst'*
'tagstack' 'tgst'	切替	(既定ではオン)
			グローバル
			{not in all versions of Vi}
	When on, the |tagstack| is used normally.  When off, a ":tag" or
	":tselect" command with an argument will not push the tag onto the
	tagstack.  A following ":tag" without an argument, a ":pop" command or
	any other command that uses the tagstack will use the unmodified
	tagstack, but does change the pointer to the active entry.
	Resetting this option is useful when using a ":tag" command in a
	mapping which should not change the tagstack.

						*'term'*
'term'			文字列	(default is $TERM, if that fails:
				      in the GUI: "builtin_gui"
					on Amiga: "amiga"
					 on BeOS: "beos-ansi"
					  on Mac: "mac-ansi"
					 on MiNT: "vt52"
				       on MS-DOS: "pcterm"
					 on OS/2: "os2ansi"
					 on Unix: "ansi"
					  on VMS: "ansi"
				       on Win 32: "win32")
			グローバル
	Name of the terminal.  Used for choosing the terminal control
	characters.  Environment variables are expanded |:set_env|.
	For example: >
		:set term=$TERM
<	See |termcap|.

						*'termencoding'* *'tenc'*
'termencoding' 'tenc'	文字列	(既定では "")
			グローバル
			{Vi mが |+multi_byte| 機能付きでコンパイルされたときの
			み使用可能}
			{Vi にはない}
	Encoding used for the terminal.  This specifies what character
	encoding the keyboard produces and the display will understand.  For
	the GUI it only applies to the keyboard ('encoding' is used for the
	display).
	When empty, the same encoding is used as for the 'encoding' option.
	This is the normal value.
	Not all combinations for 'termencoding' and 'encoding' are valid.  See
	|encoding-table|.
	The value for this option must be supported by iconv().  When iconv()
	cannot handle the value, no conversion will be done and you will
	probably experience problems with non-ASCII characters.
	Example: You are working with the locale set to euc-jp (Japanese) and
	want to edit a UTF-8 file: >
		:let &termencoding = &encoding
		:set encoding=utf-8
<	You need to do this when your system has no locale support for UTF-8.

						*'terse'* *'noterse'*
'terse'			切替	(既定ではオフ)
			グローバル
	When set: Add 's' flag to 'shortmess' option (this makes the message
	for a search that hits the start or end of the file not being
	displayed).  When reset: Remove 's' flag from 'shortmess' option.  {Vi
	shortens a lot of messages}

				   *'textauto'* *'ta'* *'notextauto'* *'nota'*
'textauto' 'ta'		切替	(Vim default: on, Vi default: off)
			グローバル
			{Vi にはない}
	This option is obsolete.  Use 'fileformats'.
	For backwards compatibility, when 'textauto' is set, 'fileformats' is
	set to the default value for the current system.  When 'textauto' is
	reset, 'fileformats' is made empty.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

				   *'textmode'* *'tx'* *'notextmode'* *'notx'*
'textmode' 'tx'		切替	(MS-DOS, Win32 and OS/2: default on,
				 others: default off)
			バッファについてローカル
			{Vi にはない}
	This option is obsolete.  Use 'fileformat'.
	For backwards compatibility, when 'textmode' is set, 'fileformat' is
	set to "dos".  When 'textmode' is reset, 'fileformat' is set to
	"unix".

						*'textwidth'* *'tw'*
'textwidth' 'tw'	数値	(既定では 0)
			バッファについてローカル
			{Vi にはない}
	Maximum width of text that is being inserted.  A longer line will be
	broken after white space to get this width.  A zero value disables
	this.  'textwidth' is set to 0 when the 'paste' option is set.  When
	'textwidth' is zero, 'wrapmargin' may be used.  See also
	'formatoptions' and |ins-textwidth|.
	NOTE: This option is set to 0 when 'compatible' is set.

						*'thesaurus'* *'tsr'*
'thesaurus' 'tsr'	文字列	(既定では "")
			グローバル／バッファについてローカル |global-local|
			{Vi にはない}
	List of file names, separated by commas, that are used to lookup words
	for thesesaurus completion commands |i_CTRL-X_CTRL-T|.  Each line in
	the file should contain words with similar meaning, separated by
	non-keyword characters (white space is preferred).  Maximum line
	length is 510 bytes.
	To obtain a file to be used here, check out the wordlist FAQ at
	http://www.hyphenologist.co.uk .
	To include a comma in a file name precede it with a backslash.  Spaces
	after a comma are ignored, otherwise spaces are included in the file
	name.  See |option-backslash| about using backslashes.
	The use of |:set+=| and |:set-=| is preferred when adding or removing
	directories from the list.  This avoids problems when a future version
	uses another default.
	Backticks cannot be used in this option for security reasons.

			     *'tildeop'* *'top'* *'notildeop'* *'notop'*
'tildeop' 'top'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	When on: The tilde command "~" behaves like an operator.
	NOTE: This option is reset when 'compatible' is set.

				*'timeout'* *'to'* *'notimeout'* *'noto'*
'timeout' 'to'		切替	(既定ではオン)
			グローバル
						*'ttimeout'* *'nottimeout'*
'ttimeout'		切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	These two options together determine the behavior when part of a
	mapped key sequence or keyboard code has been received:

	'timeout'    'ttimeout'		action	~
	   off		off		do not time out
	   on		on or off	time out on :mappings and key codes
	   off		on		time out on key codes

	If both options are off, Vim will wait until either the complete
	mapping or key sequence has been received, or it is clear that there
	is no mapping or key sequence for the received characters.  For
	example: if you have mapped "vl" and Vim has received 'v', the next
	character is needed to see if the 'v' is followed by an 'l'.
	When one of the options is on, Vim will wait for about 1 second for
	the next character to arrive.  After that the already received
	characters are interpreted as single characters.  The waiting time can
	be changed with the 'timeoutlen' option.
	On slow terminals or very busy systems timing out may cause
	malfunctioning cursor keys.  If both options are off, Vim waits
	forever after an entered <Esc> if there are key codes that start
	with <Esc>.  You will have to type <Esc> twice.  If you do not have
	problems with key codes, but would like to have :mapped key
	sequences not timing out in 1 second, set the 'ttimeout' option and
	reset the 'timeout' option.

	NOTE: 'ttimeout' is reset when 'compatible' is set.

						*'timeoutlen'* *'tm'*
'timeoutlen' 'tm'	数値	(既定では 1000)
			グローバル
			{not in all versions of Vi}
						*'ttimeoutlen'* *'ttm'*
'ttimeoutlen' 'ttm'	数値	(default -1)
			グローバル
			{Vi にはない}
	The time in milliseconds that is waited for a key code or mapped key
	sequence to complete.  Normally only 'timeoutlen' is used and
	'ttimeoutlen' is -1.  When a different timeout value for key codes is
	desired set 'ttimeoutlen' to a non-negative number.

		ttimeoutlen	mapping delay	   key code delay	~
		   < 0		'timeoutlen'	   'timeoutlen'
		  >= 0		'timeoutlen'	   'ttimeoutlen'

	The timeout only happens when the 'timeout' and 'ttimeout' options
	tell so.  A useful setting would be
		:set timeout timeoutlen=3000 ttimeoutlen=100
	(time out on mapping after three seconds, time out on key codes after
	a tenth of a second).

						*'title'* *'notitle'*
'title'			切替	(default off, on when title can be restored)
			グローバル
			{Vi にはない}
			{Vi mが |+title| 機能付きでコンパイルされたときのみ使
			用可能}
	When on, the title of the window will be set to the value of
	'titlestring' (if it is not empty), or to:
		filename [+=-] (path) - VIM
	Where:
		filename	the name of the file being edited
		-		indicates the file canot be modified, 'ma' off
		+		indicates the file was modified
		=		indicates the file is read-only
		=+		indicates the file is read-only and modified
		(path)		is the path of the file being edited
		- VIM		the server name |v:servername| or "VIM"
	Only works if the terminal supports setting window titles
	(currently Amiga console, Win32 console, all GUI versions and
	terminals with a non- empty 't_ts' option - these are Unix xterm and
	iris-ansi by default, where 't_ts' is taken from the builtin termcap).
								*X11*
	When Vim was compiled with HAVE_X11 defined, the original title will
	be restored if possible.  The output of ":version" will include "+X11"
	when HAVE_X11 was defined, otherwise it will be "-X11".  This also
	works for the icon name |'icon'|.
	But: When Vim was started with the |-X| argument, restoring the title
	will not work (except in the GUI).
	If the title cannot be restored, it is set to the value of 'titleold'.
	You might want to restore the title outside of Vim then.
	When using an xterm from a remote machine you can use this command:
	    rsh machine_name xterm -display $DISPLAY &
	then the WINDOWID environment variable should be inherited and the
	title of the window should change back to what it should be after
	exiting Vim.

								*'titlelen'*
'titlelen'		数値	(既定では 85)
			グローバル
			{Vi にはない}
			{Vi mが |+title| 機能付きでコンパイルされたときのみ使
			用可能}
	Gives the percentage of 'columns' to use for the length of the window
	title.  When the title is longer, only the end of the path name is
	shown.  A '<' character before the path name is used to indicate this.
	Using a percentage makes this adapt to the width of the window.  But
	it won't work perfectly, because the actual number of characters
	available also depends on the font used and other things in the title
	bar.  When 'titlelen' is zero the full path is used.  Otherwise,
	values from 1 to 30000 percent can be used.
	'titlelen' is also used for the 'titlestring' option.

						*'titleold'*
'titleold'		文字列	(default "Thanks for flying Vim")
			グローバル
			{Vi にはない}
			{Vi mが |+title| 機能付きでコンパイルされたときのみ使
			用可能}
	This option will be used for the window title when exiting Vim if the
	original title cannot be restored.  Only happens if 'title' is on or
	'titlestring' is not empty.
						*'titlestring'*
'titlestring'		文字列	(既定では "")
			グローバル
			{Vi にはない}
			{Vi mが |+title| 機能付きでコンパイルされたときのみ使
			用可能}
	When this option is not empty, it will be used for the title of the
	window.  This happens only when the 'title' option is on.
	Only works if the terminal supports setting window titles (currently
	Amiga console, Win32 console, all GUI versions and terminals with a
	non-empty 't_ts' option).
	When Vim was compiled with HAVE_X11 defined, the original title will
	be restored if possible |X11|.
	When this option contains printf-style '%' items, they will be
	expanded according to the rules used for 'statusline'.
	Example: >
    :auto BufEnter * let &titlestring = hostname() . "/" . expand("%:p")
    :set title titlestring=%<%F%=%l/%L-%P titlelen=70
<	The value of 'titlelen' is used to align items in the middle or right
	of the available space.
	Some people prefer to have the file name first: >
    :set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)
<	Note the use of "%{ }" and an expression to get the path of the file,
	without the file name.  The "%( %)" constructs are used to add a
	separating space only when needed.
	NOTE: Use of special characters in 'titlestring' may cause the display
	to be garbled (e.g., when it contains a CR or NL character).
	{not available when compiled without the |+statusline| feature}

				*'toolbar'* *'tb'*
'toolbar' 'tb'		文字列	(default "icons,tooltips")
			グローバル
			{only for |+GUI_GTK|, |+GUI_Athena|, |+GUI_Motif| and
			|+GUI_Photon|}
	The contents of this option controls various toolbar settings.  The
	possible values are:
		icons		Toolbar buttons are shown with icons.
		text		Toolbar buttons shown with text.
		tooltips	Tooltips are active for toolbar buttons.
	Tooltips refer to the popup help text which appears after the mouse
	cursor is placed over a toolbar button for a brief moment.

	If you want the toolbar to be shown with icons as well as text, do the
	following: >
		:set tb=icons,text
<	Motif and Athena cannot display icons and text at the same time.  They
	will show icons if both are requested.

	If none of the strings specified in 'toolbar' are valid or if
	'toolbar' is empty, this option is ignored.  If you want to disable
	the toolbar, you need to set the 'guioptions' option.  For example: >
		:set guioptions-=T
<	Also see |gui-toolbar|.

			     *'ttybuiltin'* *'tbi'* *'nottybuiltin'* *'notbi'*
'ttybuiltin' 'tbi'	切替	(既定ではオン)
			グローバル
			{Vi にはない}
	When on, the builtin termcaps are searched before the external ones.
	When off the builtin termcaps are searched after the external ones.
	When this option is changed, you should set the 'term' option next for
	the change to take effect, for example: >
		:set notbi term=$TERM
<	See also |termcap|.
	Rationale: The default for this option is "on", because the builtin
	termcap entries are generally better (many systems contain faulty
	xterm entries...).

				     *'ttyfast'* *'tf'* *'nottyfast'* *'notf'*
'ttyfast' 'tf'		切替	(default off, on when 'term' is xterm, hpterm,
					sun-cmd, screen, rxvt, dtterm or
					iris-ansi; also on when running Vim in
					a DOS console)
			グローバル
			{Vi にはない}
	Indicates a fast terminal connection.  More characters will be sent to
	the screen for redrawing, instead of using insert/delete line
	commands.  Improves smoothness of redrawing when there are multiple
	windows and the terminal does not support a scrolling region.
	Also enables the extra writing of characters at the end of each screen
	line for lines that wrap.  This helps when using copy/paste with the
	mouse in an xterm and other terminals.

						*'ttymouse'* *'ttym'*
'ttymouse' 'ttym'	文字列	(default depends on 'term')
			グローバル
			{Vi にはない}
			{only in Unix and VMS, doesn't work in the GUI; not
			available when compiled without |+mouse|}
	Name of the terminal type for which mouse codes are to be recognized.
	Currently these three strings are valid:
							*xterm-mouse*
	   xterm	xterm-like mouse handling.  The mouse generates
			"<Esc>[Mscr", where "scr" is three bytes:
				"s"  = button state
				"c"  = column plus 33
				"r"  = row plus 33
	   xterm2	Works like "xterm", but with the xterm reporting the
			mouse position while the mouse is dragged.  This works
			much faster and more precise.  Your xterm must at
			least at patchlevel 88  / XFree 3.3.3 for this to
			work.  See below for how Vim detects this
			automatically.
							*netterm-mouse*
	   netterm	NetTerm mouse handling.  The mouse generates
			"<Esc>}r,c<CR>", where "r,c" are two decimal numbers
			for the row and column.
							*dec-mouse*
	   dec		DEC terminal mouse handling.  The mouse generates a
			rather complex sequence, starting with "<Esc>[".
							*jsbterm-mouse*
	   jsbterm	JSB term mouse handling.
							*pterm-mouse*
	   pterm	QNX pterm mouse handling.

	The mouse handling must be enabled at compile time |+mouse_xterm|
	|+mouse_dec| |+mouse_netterm|.
	Only "xterm"(2) is really recognized.  NetTerm mouse codes are always
	recognized, if enabled at compile time.  DEC terminal mouse codes
	are recognized if enabled at compile time, and 'ttymouse' is not
	"xterm" (because the xterm and dec mouse codes conflict).
	This option is automatically set to "xterm", when the 'term' option is
	set to a name that starts with "xterm", and 'ttymouse' is not "xterm"
	or "xterm2" already.  The main use of this option is to set it to
	"xterm", when the terminal name doesn't start with "xterm", but it can
	handle xterm mouse codes.
	The "xterm2" value will be set if the xterm version is reported to be
	95 of higher.  This only works when compiled with the |+termresponse|
	feature and if |t_RV| is set to the escape sequence to request the
	xterm version number.  Otherwise "xterm2" must be set explicitly.
	If you do not want 'ttymouse' to be set to "xterm2" automatically, set
	t_RV to an empty string: >
		:set t_RV=
<
						*'ttyscroll'* *'tsl'*
'ttyscroll' 'tsl'	数値	(既定では 999)
			グローバル
	Maximum number of lines to scroll the screen.  If there are more lines
	to scroll the window is redrawn.  For terminals where scrolling is
	very slow and redrawing is not slow this can be set to a small number,
	e.g., 3, to speed up displaying.

						*'ttytype'* *'tty'*
'ttytype' 'tty'		文字列	(default from $TERM)
			グローバル
	Alias for 'term', see above.

						*'undolevels'* *'ul'*
'undolevels' 'ul'	数値	(default 100, 1000 for Unix, VMS,
						Win32 and OS/2)
			グローバル
			{Vi にはない}
	Maximum number of changes that can be undone.  Since undo information
	is kept in memory, higher numbers will cause more memory to be used
	(nevertheless, a single change can use an unlimited amount of memory).
	Set to 0 for Vi compatibility: One level of undo and "u" undoes
	itself: >
		set ul=0
<	But you can also get Vi compatibility by including the 'u' flag in
	'cpoptions', and still be able to use CTRL-R to repeat undo.
	Set to a negative number for no undo at all: >
		set ul=-1
<	This helps when you run out of memory for a single change.
	Also see |undo-two-ways|.

						*'updatecount'* *'uc'*
'updatecount' 'uc'	数値	(default: 200)
			グローバル
			{Vi にはない}
	After typing this many characters the swap file will be written to
	disk.  When zero, no swap file will be created at all (see chapter on
	recovery |crash-recovery|).  'updatecount' is set to zero by starting
	Vim with the "-n" option, see |startup|.  When editing in readonly
	mode this option will be initialized to 10000.
	The swapfile can be disabled per buffer with |'swapfile'|.
	When 'updatecount' is set from non-zero to zero, swap files are
	created for all buffers that have 'swapfile' set.  When 'updatecount'
	is set to zero, existing swap files are not deleted.
	Also see |'swapsync'|.
	This option has no meaning in buffers where |'buftype'| is "nofile"
	or "nowrite".

						*'updatetime'* *'ut'*
'updatetime' 'ut'	数値	(既定では 4000)
			グローバル
			{Vi にはない}
	If this many milliseconds nothing is typed the swap file will be
	written to disk (see |crash-recovery|).  Also used for the
	|CursorHold| autocommand event.

						*'verbose'* *'vbs'*
'verbose' 'vbs'		数値	(既定では 0)
			グローバル
			{not in Vi, although some versions have a boolean
			verbose option}
	When bigger than zero, Vim will give messages about what it is doing.
	Currently, these messages are given:
	>= 1	When the viminfo file is read or written.
	>= 2	When a file is ":source"'ed.
	>= 5	Every searched tags file.
	>= 8	Files for which a group of autocommands is executed.
	>= 9	Every executed autocommand.
	>= 12	Every executed function
	>= 15	Every executed Ex command (truncated at 200 characters)

	This option can also be set with the "-V" argument.  See |-V|.
	This option is also set by the |:verbose| command.

						*'viewdir'* *'vdir'*
'viewdir' 'vdir'	文字列	(default for Amiga, MS-DOS, OS/2 and Win32:
							 "$VIM/vimfiles/view",
				 for Unix: "~/.vim/view",
				 for Macintosh: "$VIM:vimfiles:view"
				 for VMS: "sys$login:vimfiles/view"
				 for RiscOS: "Choices:vimfiles/view")
			グローバル
			{Vi にはない}
			{Vi mが |+mksession| 機能付きでコンパイルされたときの
			み使用可能}
	Name of the directory where to store files for |:mkview|.
	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

						*'viewoptions'* *'vop'*
'viewoptions' 'vop'	文字列	(default: "folds,options,cursor")
			グローバル
			{Vi にはない}
			{Vi mが |+mksession| 機能付きでコンパイルされたときの
			み使用可能}
	Changes the effect of the |:mkview| command.  It is a comma separated
	list of words.  Each word enables saving and restoring something:
	   word		save and restore ~
	   cursor	cursor position in file and in window
	   folds	manually created folds, opened/closed folds and local
			fold options
	   options	options and mappings local to a window or buffer (not
			グローバル values for local options)
	   unix		with Unix end-of-line format (single <NL>), even when
			on Windows or DOS

	"slash" and "unix" are useful on Windows when sharing view files
	with Unix.  The Unix version of Vim cannot source dos format scripts,
	but the Windows version of Vim can source unix format scripts.

						*'viminfo'* *'vi'*

'viminfo' 'vi'		文字列	(Vi default: "", Vim default for MS-DOS,
					Windows and OS/2: '20,"50,h,rA:,rB:,
					for Amiga: '20,"50,h,rdf0:,rdf1:,rdf2:
					for others: '20,"50,h)
			グローバル
			{Vi にはない}
			{not available when compiled without the  |+viminfo|
			feature}
	When non-empty, the viminfo file is read upon startup and written
	when exiting Vim (see |viminfo-file|).  The string should be a comma
	separated list of parameters, each consisting of a single character
	identifying the particular parameter, followed by a number or string
	which specifies the value of that parameter.  If a particular
	character is left out, then the default value is used for that
	parameter.  The following is a list of the identifying characters and
	the effect of their value.
	CHAR	VALUE	~
	!	When included, save and restore global variables that start
		with an uppercase letter, and don't contain a lowercase
		letter.  Thus "KEEPTHIS and "K_L_M" are stored, but "KeepThis"
		and "_K_L_M" are not.
	"	Maximum number of lines saved for each register.  If zero then
		registers are not saved.  When not included, all lines are
		saved.  Dont forget to put a backslash before the ", otherwise
		it will be recognized as the start of a comment!
	%	When included, save and restore the buffer list.  If Vim is
		started with a file name argument, the buffer list is not
		restored.  If Vim is started without a file name argument, the
		buffer list is restored from the viminfo file.  Buffers
		without a file name and buffers for help files are not written
		to the viminfo file.
	'	Maximum number of previously edited files for which the marks
		are remembered.  This parameter must always be included when
		'viminfo' is non-empty.
		Including this item also means that the |jumplist| is stored
		in the viminfo file.
	/	Maximum number of items in the search pattern history to be
		saved.  If non-zero, then the previous search and substitute
		patterns are also saved.  When not included, the value of
		'history' is used.
	:	Maximum number of items in the command-line history to be
		saved.  When not included, the value of 'history' is used.
	@	Maximum number of items in the input-line history to be
		saved.  When not included, the value of 'history' is used.
	c	When included, convert the text in the viminfo file from the
		'encoding' used when writing the file to the current
		'encoding'. See |viminfo-encoding|.
	f	Whether file marks need to be stored.  If zero, file marks ('0
		to '9, 'A to 'Z) are not stored.  When not present or when
		non-zero, they are all stored.  '0 is used for the current
		cursor position (when exiting or when doing ":wviminfo").
	h	Disable the effect of 'hlsearch' when loading the viminfo
		file.  When not included, it depends on whether ":nohlsearch"
		has been used since the last search command.
	n	Name of the viminfo file.  The name must immediately follow
		the 'n'.  Must be the last one!  If the "-i" argument was
		given when starting Vim, that file name overrides the one
		given here with 'viminfo'.  Environment variables are expanded
		when opening the file, not when setting the option.
	r	Removable media.  The argument is a string (up to the next
		',').  This parameter can be given several times.  Each
		specifies the start of a path for which no marks will be
		stored.  This is to avoid removable media.  For MS-DOS you
		could use "ra:,rb:", for Amiga "rdf0:,rdf1:,rdf2:".  Case is
		ignored.  Maximum length of each 'r' argument is 50
		characters.

	Example: >
	    :set viminfo='50,\"1000,:0,n~/vim/viminfo
<
	'50		Marks will be remembered for the last 50 files you
			edited.
	"1000		Contents of registers (up to 1000 lines each) will be
			remembered.
	:0		Command-line history will not be saved.
	n~/vim/viminfo	The name of the file to use is "~/vim/viminfo".
	no /		Since '/' is not specified, the default will be used,
			that is, save all of the search history, and also the
			previous search and substitute patterns.
	no %		The buffer list will not be saved nor read back.
	no h		'hlsearch' highlighting will be restored.

	安全上の理由から、このオプションをモードライン |modeline| から設定する
	ことはできない。

					    *'virtualedit'* *'ve'*
'virtualedit' 've'	文字列  (既定では "")
			グローバル
			{Vi にはない}
			{not available when compiled without the
			|+virtualedit| feature}
	A comma separated list of these words:
	    block	Allow virtual editing in Visual block mode.
	    insert	Allow virtual editing in Insert mode.
	    all		Allow virtual editing in all modes.
	Virtual editing means that the cursor can be positioned where there is
	no actual character.  This can be halfway into a Tab or beyond the end
	of the line.  Useful for selecting a rectangle in Visual mode and
	editing a table.

			*'visualbell'* *'vb'* *'novisualbell'* *'novb'* *beep*
'visualbell' 'vb'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	Use visual bell instead of beeping.  The terminal code to display the
	visual bell is given with 't_vb'.  When no beep or flash is wanted,
	use ":set vb t_vb=".
	Note: When the GUI starts, 't_vb' is reset to its default value.  You
	might want to set it again in your |gvimrc|.
	In the GUI, 't_vb' defaults to "<Esc>|f", which inverts the display
	for 20 msec.  If you want to use a different time, use "<Esc>|40f",
	where 40 is the time in msec.
	Does not work on the Amiga, you always get a screen flash.
	Also see 'errorbells'.

						*'warn'* *'nowarn'*
'warn'			切替	(既定ではオン)
			グローバル
	Give a warning message when a shell command is used while the buffer
	has been changed.

		     *'weirdinvert'* *'wiv'* *'noweirdinvert'* *'nowiv'*
'weirdinvert' 'wiv'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
	This option has the same effect as the 't_xs' termcap option.
	It is provided for backwards compatibility with version 4.x.
	Setting 'weirdinvert' has the effect of making 't_xs' non-empty, and
	vice versa.  Has no effect when the GUI is running.

						*'whichwrap'* *'ww'*
'whichwrap' 'ww'	文字列	(Vim default: "b,s", Vi default: "")
			グローバル
			{Vi にはない}
	Allow specified keys that move the cursor left/right to wrap to the
	previous/next line when the cursor is on the first/last character in
	the line.  Concatenate characters to allow this for these keys:
		char   key	  mode	~
		 b    <BS>	 Normal and Visual
		 s    <Space>	 Normal and Visual
		 h    "h"	 Normal and Visual
		 l    "l"	 Normal and Visual
		 <    <Left>	 Normal and Visual
		 >    <Right>	 Normal and Visual
		 ~    "~"	 Normal
		 [    <Left>	 Insert and Replace
		 ]    <Right>	 Insert and Replace
	For example: >
		:set ww=<,>,[,]
<	allows wrap only when cursor keys are used.
	When the movement keys are used in combination with a delete or change
	operator, the <EOL> also counts for a character.  This makes "3h"
	different from "3dh" when the cursor crosses the end of a line.  This
	is also true for "x" and "X", because they do the same as "dl" and
	"dh".  If you use this, you may also want to use the mapping
	":map <BS> X" to make backspace delete the character in front of the
	cursor.
	When 'l' is included, you get a side effect: "yl" on an empty line
	will include the <EOL>, so that "p" will insert a new line.
	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

						*'wildchar'* *'wc'*
'wildchar' 'wc'		数値	(Vim default: <Tab>, Vi default: CTRL-E)
			グローバル
			{Vi にはない}
	Character you have to type to start wildcard expansion in the
	command-line, as specified with 'wildmode'.
	The character is not recognized when used inside a macro.  See
	'wildcharm' for that.
	Although 'wc' is a number option, you can set it to a special key: >
		:set wc=<Esc>
<	NOTE: This option is set to the Vi default value when 'compatible' is
	set and to the Vim default value when 'compatible' is reset.

						*'wildcharm'* *'wcm'*
'wildcharm' 'wcm'	数値	(default: none (0))
			グローバル
			{Vi にはない}
	'wildcharm' works exactly like 'wildchar', except that it is
	recognized when used inside a macro. You can find "spare" command-line
	keys suitable for this option by looking at |ex-edit-index|. Normally
	you'll never actually type 'wildcharm', just use it in mappings that
	automatically invoke completion mode, e.g.: >
		:set wcm=<C-Z>
		:cmap ss so $vim/sessions/*.vim<C-Z>
<	Then after typing :ss you can use CTRL-P & CTRL-N.

						*'wildignore'* *'wig'*
'wildignore' 'wig'	文字列	(既定では "")
			グローバル
			{Vi にはない}
			{Vi mが |+wildignore| 機能付きでコンパイルされたときの
			み使用可能}
	A list of file patterns.  A file that matches with one of these
	patterns is ignored when completing file or directory names.
	The pattern is used like with |:autocmd|, see |autocmd-patterns|.
	Also see 'suffixes'.
	Example: >
		:set wildignore=*.o,*.obj
<	The use of |:set+=| and |:set-=| is preferred when adding or removing
	a pattern from the list.  This avoids problems when a future version
	uses another default.

				*'wildmenu'* *'wmnu'* *'nowildmenu'* *'nowmnu'*
'wildmenu' 'wmnu'	切替	(既定ではオフ)
			グローバル
			{Vi にはない}
			{Vi mが |+wildmenu| 機能付きでコンパイルされたときのみ
			使用可能}
	When 'wildmenu' is on, command-line completion operates in an enhanced
	mode.  On pressing 'wildchar' (usually <Tab>) to invoke completion,
	the possible matches are shown just above the command line, with the
	first match highlighted (overwriting the status line, if there is
	one).  Keys that show the previous/next match, such as <Tab> or
	CTRL-P/CTRL-N, cause the highlight to move to the appropriate match.
	When 'wildmode' is used, "wildmenu" mode is used where "full" is
	specified.  "longest" and "list" do not start "wildmenu" mode.
	If there are more matches than can fit in the line, a ">" is shown on
	the right and/or a "<" is shown on the left.  The status line scrolls
	as needed.
	The "wildmenu" mode is abandoned when a key is hit that is not used
	for selecting a completion.
	While the "wildmenu" is active the following keys have special
	meanings:

	<Left> <Right>	- select previous/next match (like CTRL-P/CTRL-N)
	<Down>		- in filename/menu name completion: move into a
			  subdirectory or submenu.
	<CR>		- in menu completion, when the cursor is just after a
			  dot: move into a submenu.
	<Up>		- in filename/menu name completion: move up into
			  parent directory or parent menu.

	This makes the menus accessible from the console |console-menus|.

	If you prefer the <Left> and <Right> keys to move the cursor instead
	of selecting a different match, use this: >
		:cnoremap <Left> <Space><BS><Left>
		:cnoremap <Right> <Space><BS><Right>
<
	The "WildMenu" highlighting is used for displaying the current match
	|hl-WildMenu|.

						*'wildmode'* *'wim'*
'wildmode' 'wim'	文字列	(Vim default: "full")
			グローバル
			{Vi にはない}
	Completion mode that is used for the character specified with
	'wildchar'.  It is a comma separated list of up to four parts.  Each
	part specifies what to do for each consecutive use of 'wildchar.  The
	first part specifies the behavior for the first use of 'wildchar',
	The second part for the second use, etc.
	These are the possible values for each part:
	""		Complete only the first match.
	"full"		Complete the next full match.  After the last match,
			the original string is used and then the first match
			again.
	"longest"	Complete till longest common string.  If this doesn't
			result in a longer string, use the next part.
	"longest:full"	Like "longest", but also start 'wildmenu' if it is
			enabled.
	"list"		When more than one match, list all matches.
	"list:full"	When more than one match, list all matches and
			complete first match.
	"list:longest"	When more than one match, list all matches and
			complete till longest common string.
	When there is only a single match, it is fully completed in all cases.

	Examples: >
		:set wildmode=full
<	Complete first full match, next match, etc. (the default) >
		:set wildmode=longest,full
<	Complete longest common string, then each full match >
		:set wildmode=list:full
<	List all matches and complete each full match >
		:set wildmode=list,full
<	List all matches without completing, then each full match >
		:set wildmode=longest,list
<	Complete longest common string, then list alternatives.

						*'winaltkeys'* *'wak'*
'winaltkeys' 'wak'	文字列	(default "menu")
			グローバル
			{Vi にはない}
			{only used in Win32, Motif, GTK and Photon GUI}
	Some GUI versions allow the access to menu entries by using the ALT
	key in combination with a character that appears underlined in the
	menu.  This conflicts with the use of the ALT key for mappings and
	entering special characters.  This option tells what to do:
	  no	Don't use ALT keys for menus.  ALT key combinations can be
		mapped, but there is no automatic handling.  This can then be
		done with the |:simalt| command.
	  yes	ALT key handling is done by the windowing system.  ALT key
		combinations cannot be mapped.
	  menu	Using ALT in combination with a character that is a menu
		shortcut key, will be handled by the windowing system.  Other
		keys can be mapped.
	If the menu is disabled by excluding 'm' from 'guioptions', the ALT
	key is never used for the menu.
	In the Win32 version, the <F10> key is handled like this too, since
	Windows uses it to select a menu.

						*'winheight'* *'wh'*
'winheight' 'wh'	数値	(既定では 1)
			グローバル
			{Vi にはない}
			{Vi mが |+windows| 機能付きでコンパイルされたときのみ
			使用可能}
	Minimal number of lines for the current window.  This is not a hard
	minimum, Vim will use fewer lines if there is not enough room.  If the
	current window is smaller, its size is increased, at the cost of the
	height of other windows.  Set it to 999 to make the current window
	always fill the screen.  Set it to a small number for normal editing.
	The height is not adjusted after one of the commands to change the
	height of the current window.
	'winheight' applies to the current window.  Use 'winminheight' to set
	the minimal height for other windows.

						*'winminheight'* *'wmh'*
'winminheight' 'wmh'	数値	(既定では 1)
			グローバル
			{Vi にはない}
			{Vi mが |+windows| 機能付きでコンパイルされたときのみ
			使用可能}
	The minimal height of a window, when it's not the current window.
	This is a hard minimum, windows will never become smaller.
	When set to zero, windows may be "squashed" to zero lines (i.e. just a
	status bar) if necessary.  They will return to at least one line when
	they become active (since the cursor has to have somewhere to go.)
	Use 'winheight' to set the minimal height of the current window.
	This option is only checked when making a window smaller.  Don't use a
	large number, it will cause errors when opening more than a few
	windows.  A value of 0 to 3 is reasonable.

						*'winminwidth'* *'wmw'*
'winminwidth' 'wmw'	数値	(既定では 1)
			グローバル
			{Vi にはない}
			{Vi mが |+vertsplit| 機能付きでコンパイルされたときの
			み使用可能}
	The minimal width of a window, when it's not the current window.
	This is a hard minimum, windows will never become smaller.
	When set to zero, windows may be "squashed" to zero columns (i.e. just
	a vertical separator) if necessary.  They will return to at least one
	line when they become active (since the cursor has to have somewhere
	to go.)
	Use 'winwidth' to set the minimal width of the current window.
	This option is only checked when making a window smaller.  Don't use a
	large number, it will cause errors when opening more than a few
	windows.  A value of 0 to 12 is reasonable.

						*'winwidth'* *'wiw'*
'winwidth' 'wiw'	数値	(既定では 20)
			グローバル
			{Vi にはない}
			{Vi mが |+vertsplit| 機能付きでコンパイルされたときの
			み使用可能}
	Minimal number of columns for the current window.  This is not a hard
	minimum, Vim will use fewer columns if there is not enough room.  If
	the current window is smaller, its size is increased, at the cost of
	the width of other windows.  Set it to 999 to make the current window
	always fill the screen.  Set it to a small number for normal editing.
	The width is not adjusted after one of the commands to change the
	width of the current window.
	'winwidth' applies to the current window.  Use 'winminwidth' to set
	the minimal width for other windows.

						*'wrap'* *'nowrap'*
'wrap'			切替	(既定ではオン)
			ウィンドウについてローカル
			{Vi にはない}
	This option changes how text is displayed.  It doesn't change the text
	in the buffer, see 'textwidth' for that.
	When on, lines longer than the width of the window will wrap and
	displaying continues on the next line.  When off lines will not wrap
	and only part of long lines will be displayed.  When the cursor is
	moved to a part that is not shown, the screen will scroll
	horizontally.
	The line will be broken in the middle of a word if necessary.  See
	'linebreak' to get the break at a word boundary.
	To make scrolling horizontally a bit more useful, try this: >
		:set sidescroll=5
		:set listchars+=precedes:<,extends:>
<	See 'sidescroll', 'listchars' and |wrap-off|.

						*'wrapmargin'* *'wm'*
'wrapmargin' 'wm'	数値	(既定では 0)
			バッファについてローカル
	数値 of characters from the right window border where wrapping
	starts.  When typing text beyond this limit, an <EOL> will be inserted
	and inserting continues on the next line.  When 'textwidth' is
	non-zero, this option is not used.  See also 'formatoptions' and
	|ins-textwidth|.  {Vi: works differently and less usefully}

				   *'wrapscan'* *'ws'* *'nowrapscan'* *'nows'*
'wrapscan' 'ws'		切替	(既定ではオン)			*E384* *E385*
			グローバル
	Searches wrap around the end of the file.

						   *'write'* *'nowrite'*
'write'			切替	(既定ではオン)
			グローバル
			{Vi にはない}
	Allows writing files.  When not set, writing a file is not allowed.
	Can be used for a view-only mode, where modifications to the text are
	still allowed.  Can be reset with the |-m| or |-M| command line
	argument.  Filtering text is still possible, even though this requires
	writing a temporary file.

				   *'writeany'* *'wa'* *'nowriteany'* *'nowa'*
'writeany' 'wa'		切替	(既定ではオフ)
			グローバル
	Allows writing to any file with no need for "!" override.

			     *'writebackup'* *'wb'* *'nowritebackup'* *'nowb'*
'writebackup' 'wb'	切替	(default on with |+writebackup| feature, off
					otherwise)
			グローバル
			{Vi にはない}
	Make a backup before overwriting a file.  The backup is removed after
	the file was successfully written, unless the 'backup' option is
	also on.  Reset this option if your file system is almost full.  See
	|backup-table| for another explanation.
	When the 'backupskip' pattern matches, a backup is not made anyway.
	NOTE: This option is set to the default value when 'compatible' is
	set.

						*'writedelay'* *'wd'*
'writedelay' 'wd'	数値	(既定では 0)
			グローバル
			{Vi にはない}
	The number of microseconds to wait for each character sent to the
	screen.  When non-zero, characters are sent to the terminal one by
	one.  For MS-DOS pcterm this does not work.  For debugging purposes.

 vim:tw=78:ts=8:ft=help:norl:
