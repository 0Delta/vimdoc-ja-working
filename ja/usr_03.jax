COMMENT: カーソル移動
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*usr_03.txt*	For Vim version 6.3.  Last change: 2004 Jan 17

		     VIM USER MANUAL - by Bram Moolenaar

				  動いてみる


文の入力や削除の前には、カーソルを目的の場所に動かさなくてはなりません。
vimはカーソル移動のための数多くのコマンドを持っています。本章では、その中で
も重要なコマンドの使い方を述べます。一覧は|Q_lr|をご覧下さい。

|03.1|	単語ごとの移動
|03.2|	行頭、行末への移動
|03.3|	文字への移動
|03.4|	カッコ類の呼応
|03.5|	特定の行への移動
|03.6|	現在の場所を表示
|03.7|	スクロール
|03.8|	簡単な検索
|03.9|	簡単なパターン検索
|03.10|	マークの使用

     Next chapter: |usr_04.txt|  小さな変更
 Previous chapter: |usr_02.txt|  vimの最初の一歩
Table of contents: |usr_toc.txt|

==============================================================================
*03.1*	単語ごとの移動

カーソルを１単語先に進めるには、"w"コマンドを使います。他のvimコマンドも
そうですが、複数の単語を一気に進めるために数値による回数指定（カウンタ）
ができます。例えば、"3w"では３単語進めます。図で示すと次のようになります。

	This is a line with example text ~
	  --->-->->----------------->
	   w  w  w    3w

"w"は次の単語の先頭に移動します。既にカーソルが単語の先頭にある場合も、その
次の単語の先頭に移動します。
逆に"b"コマンドは直前の単語の先頭に戻ります。

	This is a line with example text ~
	<----<--<-<---------<---
	   b   b b    2b      b

"e"コマンドは次の単語の末尾に移動します。"ge"は直前の単語の末尾に移動します。

	This is a line with example text ~
	   <-   <--- ----->   ---->
	   ge    ge     e       e

カーソルが行末の単語にある場合、"w"コマンドは次の行の最初の単語に進みます。
これを使うと"l"よりもずっと早く文章の中を動けます。"b"なら逆方向に同じルールで動きます。

単語の末尾には"."や"-"、")"といったアルファベット以外の文字がきます。vimが
何を単語とみなすかは、'iskeyword'オプションの設定で変更できます。
空白類で区切られた単語(WORD)間を移動することもできます。これは普通に使う
単語(word)とは若干違うため、大文字で書いています。WORD単位で動くコマンド
は全部大文字です。図で示すと次の通りです。

	       ge      b	  w				e
	       <-     <-	 --->			       --->
	This is-a line, with special/separated/words (and some more). ~
	   <----- <-----	 -------------------->	       ----->
	     gE      B			 W			 E

小文字と大文字のコマンドを両方使うと、文章中をより素早く動けるようになり
ます。

==============================================================================
*03.2*	行頭、行末への移動

"$"コマンドはカーソルを行末に移動します。キーボード上に<End>キーがあれば、
それも同じ意味で使えます。

"^"コマンドはカーソルを行頭の非空白文字に移動します。"0"(数字のゼロ)コマン
ドは行頭文字に移動します。<Home>キーも同じです。図で示しましょう。

		  ^
	     <------------
	.....This is a line with example text ~
	<-----------------   --------------->
		0		   $

("....." は空白文字があることを示します)

"$"コマンドでも他の移動コマンドのようにカウンタの指定ができます。行末への移
動を何度やっても意味がありませんので、"$"コマンドでのカウンタは他の行の行末
への移動の意味になります。例えば、"1$"は"$"と同じで現在行の行末への移動です
が、"2$"は次の行末への移動、"3$"は２行下の行末への移動、となります。
"0"コマンドは回数指定できません。これは、"0"自身が回数指定の一部になってしま
うからです。意外でしょうが、"^"に回数指定を行っても、何も起こりません。

==============================================================================
*03.3*	文字への移動

他のエディタにはあまりない、実に便利な移動コマンドがあります。１文字検索とい
うこのコマンド"fx"は、その行にある文字 x を検索します。(fはFindの意味です)
例えば、下図で示した行の先頭にカーソルがあり、 human の h に移動したいとしま
す。ここで"fh"コマンドを使うと、'h'の上にカーソルが進みます。

	To err is human.  To really foul up you need a computer. ~
	---------->--------------->
	    fh		 fy

同じように"fy"コマンドを使うと really の y まで進むのも示しています。
これもカウンタ指定ができます。例えば下図で foul の l に進めたいのなら"3fl"で
できます。

	To err is human.  To really foul up you need a computer. ~
		  --------------------->
			   3fl

"F"コマンドは逆に左向きに検索します。

	To err is human.  To really foul up you need a computer. ~
		  <---------------------
			    Fh

"tx"コマンドは"fx"コマンドに似た動きをします。違うのは検索した文字の上では
なく、その直前で止まる点です。(tはToの意味です)
このコマンドの逆方向版は"Tx"です。

	To err is human.  To really foul up you need a computer. ~
		   <------------  ------------->
			Th		tn

この４つのコマンドは";"コマンドで繰り返し実行ができます。また","コマンドで
は反対方向に繰り返します。なお、このコマンドではカーソルは他の行には動きま
せん。前後に行があってもです。

検索をしようとして、コマンドを打ち間違うこともあるでしょう。例えば、逆方向検
索のつもりで("F"と打つべきところを)"f"と打ってしまったとしましょう。このコマ
ンドを中断するには<Esc>を押します。"f<Esc>"は<Esc>を探すのではなく、コマンド
をキャンセルします。
Note:<Esc>は検索に限らず、ほとんどのコマンドをキャンセルするのに使えます。

==============================================================================
*03.4*	カッコ類の呼応

プログラムを作っていると、呼応している( )を確認したくなる場合があります。
これには"%"コマンドがとても便利です。このコマンドは対応するカッコ類を
探し、そこに移動します。カーソルが"("の上にある時は呼応する")"を探し、")"上
にカーソルがある時は"("を逆方向に探します。

			    %
			 <----->
		if (a == (b * c) / d) ~
		   <---------------->
			    %

このコマンドは[ ]や{ }のペアでも動きます。(さらに'matchpairs'オプションで定義
することもできます)

カーソルがカッコ類の上にない場合、"%"はまず前方検索をしてカッコ類を探します。
つまり、上図の例で行頭にカーソルがある場合、"%"は前方検索をして、"("を見つ
け、次に呼応するカッコ")"の場所に移動します。

		if (a == (b * c) / d) ~
		---+---------------->
			   %

==============================================================================
*03.5*	特定の行に移動

CやC++のプログラマであれば、次のようなパターンのエラーメッセージはおなじみで
しょう。

	prog.c:33: j   undeclared (first use in this function) ~

何か33行目に修正しないといけない点がありそうです。では、どうやって33行目に
移動しましょうか？"9999k"などとしてファイルの先頭まで移動してから、"32j"で
32行下に移動するやり方もあります。確かに目的は達しますが、あまりいい方法とは
思えません。そこで"G"というコマンドを使いましょう。このコマンドはカウンタを
指定すると、その行にジャンプします。例えば、"33G"とすれば、33行目にジャンプ
できます。(実はコンパイラのエラーリストを使ってもっと簡単に移動する方法もあ
ります。|usr_30.txt| の":make"コマンドをご覧ください。)
カウンタを指定しないと、"G"はファイルの最終行にジャンプします。逆にファイル
の先頭にジャンプするには"gg"を使います。"1G"でも同じですが、ちょっと打ちに
くいですから。

	    |	first line of a file   ^
	    |	text text text text    |
	    |	text text text text    |  gg
	7G  |	text text text text    |
	    |	text text text text
	    |	text text text text
	    V	text text text text    |
		text text text text    |  G
		text text text text    |
		last line of a file    V

特定行に移動するもう一つの方法はカウンタ付きの"%"コマンドです。例えば、"50%"
はそのファイルの真ん中まで移動します。"90%"だとファイルのほぼ最後(90%の場所)
に移動します。

以上述べたのは、画面上に見えているかどうかは関係なくファイル中の特定行に
移動したい場合のコマンドでした。では画面上に見えている行に移動したい場合は
どうしましょうか？下図はこういう時に使える３つのコマンドです。

			+---------------------------+
		H -->	| text sample text	    |
			| sample text		    |
			| text sample text	    |
			| sample text		    |
		M -->	| text sample text	    |
			| sample text		    |
			| text sample text	    |
			| sample text		    |
		L -->	| text sample text	    |
			+---------------------------+

("H"はHome、"M"はMiddle、"L"はLastの意味です）

==============================================================================
*03.6*	現在の場所を表示

ファイル中の現在の場所を知るには、次の３つの方法があります。

1.  CTRL-Gコマンド。次のようなメッセージが表示されます。('ruler'オプション
    がOffの場合)

	"usr_03.txt" line 233 of 650 --35%-- col 45-52 ~

    編集中のファイル名、カーソルのある行番号、全体の行数、ファイル全体を
    通してのパーセント、カーソル桁位置、を表示します。
    場合によっては、"col 2-9"のようにカーソル桁位置が分けて表示される場合が
    あります。この場合、カーソルは２文字目にあります。しかし、その場所の文字
    がTABである場合８桁分の場所を占めるため、画面上ではカーソルは９桁目に
    表示されるのです。

2.  'number'オプションの使用。このオプションは各行の行頭に行番号を付けます。 >

	:set number
<
    その後、オプションをoffに戻します。 >

	:set nonumber
<
    'number'は論理値オプションなので、オプション名の先頭に"no"を付けると、
    offの意味になります。論理値オプションはonかoffの２つのいずれかになりま
    す。vimには多数のオプションがあります。論理値オプションの他に、数値オプ
    ションと文字列オプションがあります。そういったオプションを使う時に例を
    お見せしましょう。

3.  'ruler'オプションを使います。これは現在のカーソル位置をvimウィンドウの
    右下隅に表示します。 >

	:set ruler
<
    'ruler'オプションは'number'より場所を取らないので、画面を広く使えます。

==============================================================================
*03.7*	スクロール

CTRL-Uコマンドは画面の高さの半分だけ逆スクロールします。文章を覗き窓を通して
見ていて、その窓の高さの半分だけ上に動いたと考えてください。つまり窓が文章の
上をファイルの逆方向に戻ったということです。どっちが上でどっちが
下かわかりにくいかと思いますが、気にすることはありません。みんな同じように
悩むことですから。
CTRL-Dコマンドは覗き窓を半分だけ下に下げます。つまり文章は画面の半分だけス
クロールすることになります。

				       +----------------+
				       | some text	|
				       | some text	|
				       | some text	|
	+---------------+	       | some text	|
	| some text	|  CTRL-U  --> |		|
	|		|	       | 123456		|
	| 123456	|	       +----------------+
	| 7890		|
	|		|	       +----------------+
	| example	|  CTRL-D -->  | 7890		|
	+---------------+	       |		|
				       | example	|
				       | example	|
				       | example	|
				       | example	|
				       +----------------+

１行だけスクロールするにはCTRL-E(スクロールアップ)とCTRL-Y（スクロールダウン)
を使います。CTRL-Eについても同様に考えてみてください。(MS-Windows互換のキー
マップをお使いの場合、CTRL-Yはスクロールではなく、再実行(redo)コマンドとなり
ます)

１画面分(２行は重複します)スクロールするにはCTRL-Fを使います。逆方向用には
CTRL-Bコマンドを使います。幸いCTRL-FはForward、CTRL-BはBackward、ですから
覚えやすいでしょう。

"j"をたくさん使ったりして、カーソルが画面の最下段に移動した時に、その前後の
内容を見たいくなることがあります。これは"zz"コマンドで("z."でも可)できます。

	+------------------+		 +------------------+
	| some text	   |		 | some text	    |
	| some text	   |		 | some text	    |
	| some text	   |		 | some text	    |
	| some text	   |   zz  -->	 | line with cursor |
	| some text	   |		 | some text	    |
	| some text	   |		 | some text	    |
	| line with cursor |		 | some text	    |
	+------------------+		 +------------------+

"zt"コマンド("z<Enter>"でも可)はカーソル行を画面の１行目にし、"zb"コマンド
("z-"でも可)は画面の最下段にします。
これ以外にもいくつかスクロールコマンドがあります。|Q_sc|をご覧ください。常に
カーソル近辺の数行を表示させたいのであれば、'scrolloff'オプションを使って
ください。

==============================================================================
*03.8*	簡単な検索

文字列を検索するには"/string"コマンドを使います。例えば、"include"という単語
を探したいのであれば、次のように使います。 >

	/include

"/"を押すとコマンドラインモードの時のように、カーソルがvimウィンドウの最下段
に移動することに気付かれたかも知れません。ここで探したい単語を入力します。
訂正したければ、バックスペースキー（逆矢印、<BS>キーも可）を使います。必要に
応じて<Left>と<Right>の矢印キーも使います。
最後に<Enter>を押すとコマンドを実行します。

	Note:
	文字のうち、 .*[]^%/\?~$ には特別な意味があります。検索時にこれらを
	使う場合はその文字の直前に \ を置いてください。これは後(|03.9|の
	最後)で述べます。

同じ文字列をもう一度探したい場合には"n"コマンドを使います。今のカーソル位置
の後ろにある#includeを探すには次のコマンドを使います。 >

	/#include

次に"n"を数回押すと、順々に #include にジャンプします。移動したい場所がいく
つ目か解っていれば、カウンタも使えます。だから、"3n"は３つ目の #include を探
します。ただし、"/"ではカウンタは使えません。

"?"コマンドは"/"と同じですが、逆方向に検索します。 >

	?word

"N"コマンドは直前の検索とは反対の方向に検索を繰り返します。"/"の後で"N"を
すると逆方向検索になり、"?"の後で"N"を行うと、順方向の検索となります。


大文字/小文字の無視
-------------------

普通は探したい文字列の大文字/小文字を正確に指定しなければなりません。それを
気にしないのであれば、'ignorecase'オプションをセットします。 >

	:set ignorecase

これで、"word"を検索すると、"Word"も"WORD"もヒットします。大文字/小文字を区
別するように戻すのは次のコマンドです。 >

	:set noignorecase


ヒストリ(履歴)
--------------

次のような３つの検索を行ったとします。 >

	/one
	/two
	/three

ここで、"/"だけを入力し、<Enter>を押さずにおきます。<Up>（矢印キーの上向き）
を押すと、/threeとコマンド行に表示されます。ここで、<Enter>を押すと、"three"
を検索します。<Enter>を押さずに<Up>を押すとコマンド行には"/two"と表示されま
す。さらに<Up>を押すと"/one"となります。
同じ様に<Down>キーを使って逆方向に検索のヒストリの中を動くこともできます。

以前に使ったパターンを覚えていれば、<Up>を押す前にその先頭文字を入力すれば、
そのパターンを呼び出すことができます。上の例で言えば、"/o<Up>"と入力すると、
vimはコマンドラインに"/one"と表示してくれます。

":"で始まるコマンドについてもヒストリを持っています。以前のコマンドを呼び
出して、再実行させることができます。検索用ヒストリと":"用ヒストリは独立し
ています。


文章中の単語の検索
------------------

"TheLongFunctionName" という単語が文章中にあり、次に現れる場所を探したいと
します。もちろん、"/TheLongFunctionName"として検索もできますが、たくさんの
打鍵が必要です。また間違って打った時にはうまく検索できません。
もっと簡単な方法があります。カーソルを探したい単語の上に置いて、"*"コマンド
を使うのです。vimはカーソル位置の単語を抜き出してそれを検索文字列として使い
ます。
"#"コマンドは同じことを逆方向に実行します。このコマンドもカウンタが指定でき
ます。例えば、"3*"はカーソル位置の単語が３回目に現われる場所を探します。


単語全体が一致する場合の検索
----------------------------

"/the"と検索を行うと、"there"などもヒットします。"the"で終わる単語だけを探
したい場合には次のようにします。 >

	/the\>

"\>"というのは特別なマーカで、単語がここで終わっている時だけヒットします。
同じように"\<"は単語がここで始まっている時にだけヒットします。つまり、"the"
という単語だけを探したい場合は、次のようにします。 >

	/\<the\>

これだと、"there"とか"soothe"にはヒットしません。なお、"*"と"#"コマンドは
上の「単語の先頭」と「単語の末尾」マーカを使って、完全に一致する単語だけを
探します。（単語の一部として検索したい時は"g*"と"g#"コマンドを使います)


ヒット結果のハイライト表示
--------------------------

プログラムの編集中に、"nr"という変数を見つけ、その変数がどこで使われているか
を知りたいとします。"nr"の上にカーソルを移動して、"*"と"n"コマンドで片っ端
から探すのもいいですが、他にも方法があります。次のコマンドを入力してください。 >

	:set hlsearch

ここで、"nr"を検索すると、vimはヒットした全てのパターンをハイライト表示しま
す。これだと余計なコマンド入力が要りませんから、変数の使用箇所を確認したい
時にはとても便利でしょう。
このオプションは次のコマンドでoffにできます。 >

	:set nohlsearch

さて上のやり方では、検索を行う都度、いちいちオプションのon/offが必要になり
ます。単にハイライト表示を止めるだけなら、次のコマンドがあります。 >

	:nohlsearch

これだとオプションはoffにせずに、ハイライト表示だけを取り消します。次に検索
コマンドを実行すると、再度ハイライト表示を使うようになります。"n"や"N"を使っ
た時も同様です。


検索のチューニング
------------------

検索時の動きについてのいくつかのオプションがあります。以下はその基本的なもの
です。
>
	:set incsearch

これはいわゆるインクリメンタルサーチです。検索したい文字を入力している間にも
ヒットする文字列を探して画面に表示してくれます。これはヒットするパターンがあ
るかどうかのチェックに使えます。<Enter>を押すと実際にその場所にカーソル
を移動します。さらに文字を打って、検索を続けることもできます。
>
	:set nowrapscan

これはファイルの末尾まで進んだら(逆方向検索の場合はファイルの先頭まで戻ったら)
検索を停止します。'wrapscan'オプションはデフォルトではonです。onの場合は、
ファイルの末尾まで進んだら先頭に戻って検索を続けます。


INTERMEZZO(間奏)
----------------

これまでに出てきたオプションでvimを使う時に毎回設定しておきたいものがあれば、
vimのスタートアップファイルにそのコマンドを書くことができます。
|not-compatible|にあるようにファイルを編集するか、次のコマンドを入力して、
どこかにないかを確認してください。 >

	:scriptnames

ファイルを編集するには、例えば次のようにします。 >

	:edit ~/.vimrc

ここでオプションを設定するコマンド行を、vim内で実行する時と同じように入力し
て、追加します。例えば、次のようにします。 >

	Go:set hlsearch<Esc>

"G"はファイルの末尾まで移動し、"o"は新しい行を挿入して ":set ....."のコマン
ド用の空行を作ります。挿入モードの終了は<Esc>です。ここでファイルを保存しま
しょう。 >

	ZZ

次にvimを起動すると、'hlsearch'オプションは常にonの状態となります。

==============================================================================
*03.9*	簡単なパターン検索

vimでは、検索に正規表現(regular expressions)を使います。
正規表現というのは検索パターンの指定のための、極めてパワフルでシンプルな方
法です。残念ながら、これの実力を発揮させるには少々苦労していただくことにな
ります。というのは、正規表現はちょっとばかり書き方がトリッキーなんです。
ここでは本当に基本的なものだけを述べます。パターン検索とコマンドについては
27章|usr_27.txt| でもっと詳しく説明します。全パターンの説明は|pattern|を
ご覧ください。


行頭と行末
----------

"^"は行頭を示します。英語(ASCII)キーボードでは６のキーに、日本語(JIS)キー
ボードでは０のキーの２つ右側に刻印してあります。
例えば、"include"というパターンは 行のどこかに include という単語を含んでい
れば、ヒットします。一方、"^include"は行頭が include で始まっている場合だけ
ヒットします。
"$"は同様に行末にヒットします。ですから、パターン"was$" は、行末が was で終
わっている場合だけヒットします。

下の例では、"the"という単語を含んでいる箇所を"xxx"で示しています。

	the solder holding one of the chips melted and the ~
	xxx			  xxx		       xxx

"/the$"を実行すると、こうなります。

	the solder holding one of the chips melted and the ~
						       xxx

また、"/^the"の場合はこうです。

	the solder holding one of the chips melted and the ~
	xxx

"/^the$"という指定もできます。この指定だと、"the"という単語だけの行にヒット
します。なお空白文字も意味を持ちます。ですから、"the "のように行末に空白文
字を含んでいた場合は、"/the$"のパターンではヒットしません。
こういう場合でもヒットさせる方法はあります。詳しくは27章|usr_27.txt|で。


任意の１文字
------------

"." はあらゆる文字にヒットします。例えば、"c.m"は最初が"c"で始まり、２文字
目は何でも良くて、３文字目が"m"であるパターンにヒットします。
例を示します。 

	We use a computer that became the cummin winter. ~
		 xxx		 xxx	  xxx


特殊文字
-------

例えば"."という文字自体を探す時は、上で述べたような特殊な意味を"\"文字を
使って無効にします。
"ter."というパターンで検索をすると、次の"xxx"の箇所でヒットします。

	We use a computer that became the cummin winter. ~
		      xxxx			    xxxx

これを"ter\."で検索すると、上図の２つ目だけがヒットします。

==============================================================================
*03.10*	マークの使用

"G"コマンドでジャンプすると、vimはその直前のカーソル位置を覚えています。これ
をマークと呼びます。元の場所に戻りたいなら、次のコマンドを使います。 >

	``

この ` は backtick とか open single-quote と呼ばれる(日本では「バッククオート」
が多いでしょうか)ものです。
このコマンドを２回実行すると、最初の場所に戻ります。これは ` コマンドもジャ
ンプコマンドだから、実行前の場所を覚えるためです。

通常、現在行以外にカーソルが動くようなコマンドを実行した場合、それをジャンプ
と呼びます。"/"や"n"もジャンプの一種です(ジャンプ先がどれだけ離れているかは
関係ありません)。逆に、文字検索である"fx"や"tx"、単語移動である"w"や"e"は
ジャンプではありません。
"j"や"k"はカウンタを指定すればカーソルをはるか彼方に移動できますが、これも
ジャンプ扱いではありません。

``コマンドは２個所の間を交互にジャンプします。CTRL-Oコマンドはより古いマーク
( Oは Olderの意味です)にジャンプします。CTRL-Iはより新しいマーク("I"キーは
"O"キーのすぐ左隣りです)にジャンプします。次のコマンドを例にしましょう。 >

	33G
	/^The
	CTRL-O

まず33行目にジャンプします。次に"The"で始まる行を探します。ここでCTRL-Oを
使うと、33行目にジャンプします。もう一度CTRL-Oを使うと、最初の場所に戻りま
す。CTRL-Iを使うと33行目に戻り、さらにCTRL-Iを使うと行頭が"The"で始まる行に
戻ります。

	     |	example text   ^	     |
	33G  |	example text   |  CTRL-O     | CTRL-I
	     |	example text   |	     |
	     V	line 33 text   ^	     V
	     |	example text   |	     |
       /^The |	example text   |  CTRL-O     | CTRL-I
	     V	There you are  |	     V
		example text

	Note:
	CTRL-Iは<Tab>キーと同じです。

":jumps"コマンドは今までにジャンプした場所の一覧を表示します。最後に使った
エントリには">"記号がついています。


名前付きマーク
--------------

vimでは文章中に自分でマークを付けることができます。"ma"コマンドは現在のカー
ソル位置をマークａとしてマークします。文章には２６個(ａ～ｚ)のマークを付け
られます。ただしvimに覚えさせたマーク以外は表示されません。
マークへの移動は `{mark} コマンドを使います。{mark}はマーク文字のことです。
つまり、マークａに移動するには次のようにします。
>
	`a
<
 '{mark}(アポストロフィ＋マーク名)コマンドはその{mark}を設定してある行の行頭
に移動します。`{mark}の場合は{mark}を設定してあるその桁位置に移動します。
います。

マーク機能はファイル中の関連している２箇所で作業をする場合に便利です。例えば、
ファイルの最後の方を編集している時に、ファイルの最初の方の内容を確認する必要
が生じた場合を考えてみましょう。
この時、まずファイルの最初の方に移動して、マークｓ（startのつもり）を付けます。
>
	ms

次に文章の末尾の編集したい場所に移動して、マークｅ（endのつもり）を付けます。 >

	me

これで自由に行き来ができます。ファイルの先頭に移動したい時は、これでジャンプ
できます。 >

	's

ここで、 '' を使って戻ることもできますし、 'e を使って末尾のマークまでジャン
プすることもできます。
ここで先頭にマークｓを、末尾にマークｅを使いましたが、その名前に特別な意味
はありません。単に覚えやすいから使っただけです。

次のコマンドは設定してあるマークの一覧を表示します。 >

	:marks

この一覧には次のような特殊なマークも表示されます。

	'	ジャンプする直前のカーソル位置
	"	直前にファイルを編集した時のカーソル位置
	[	直前の変更の開始位置
	]	直前の変更の終了位置

==============================================================================

Next chapter: |usr_04.txt|  小さな変更

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
