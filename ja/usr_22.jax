COMMENT: ファイルの検索(ファイルブラウザ)
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*usr_22.txt*	For Vim version 6.3.  Last change: 2003 Mar 17

		     VIM USER MANUAL - by Bram Moolenaar

			 編集したいファイルを見つける


ファイルはどこにでもあります。ではどうやって見つけますか？vimではいろいろな
方法でディレクトリ構造を調べる方法を提供しています。既に他で説明したように、
ファイルにジャンプするコマンドがあり、vimは以前に編集したことのあるファイル
を憶えています。

|22.1|	ファイルエクスプローラ
|22.2|	カレントディレクトリ
|22.3|	ファイルを見つける
|22.4|	バッファリスト

     Next chapter: |usr_23.txt|  他のファイルを編集する
 Previous chapter: |usr_21.txt|  行ったり来たり
Table of contents: |usr_toc.txt|

==============================================================================
*22.1*	ファイルエクスプローラ

vimにはディレクトリを編集できるようなプラグインがあります。これを実行してみ
てください。 >

	:edit .

自動コマンドとvimスクリプトの魔法によって、ウィンドウにはディレクトリの内容
が表示されているはずです。例えばこんな具合です。

	" Press ? for keyboard shortcuts ~
	" Sorted by name (.bak,~,.o,.h,.info,.swp,.obj,.orig,.rej at end of list) ~
	"= /home/mool/vim/vim6/runtime/doc/ ~
	../ ~
	check/ ~
	Makefile ~
	autocmd.txt ~
	change.txt ~
	eval.txt~ ~
	filetype.txt~ ~
	help.txt.info ~

次のような項目が表示されるでしょう。
1.  "?"の使い方についてのコメント。ファイルエクスプローラの機能についてのヘ
    ルプ。
2.  ２行目はディレクトリ内の各項目をどのようにリストしているかの説明。ソート
    方法はいくつか用意されている。
3.  ３行目は現ディレクトリの名前
4.  "../"ディレクトリ。これは親ディレクトリのこと。
5.  子ディレクトリの名前
6.  通常ファイルの名前。２行目での説明の通り、ここではなく末尾に表示されるファ
    イルもある。
7.  あまり重要でない通常ファイルの名前。あまり使わないようなファイルについて
    は、このように末尾に移動できる。

シンタックスハイライトを有効にしている場合は、それぞれを違う色で表示しますか
ら見分けるのが簡単になります。

この画面ではリストの中を動くのvimの通常モードのコマンドが使えます。例えば、
あるファイルの上にカーソルを動かして、<Enter>を押すと、そのファイルを編集で
きます。エクスプローラに戻るには":edit ."と入力します。CTRL-Oでも同じ意味に
なります。
カーソルがディレクトリ名の上にある時に<Enter>を押してみましょう。すると、エ
クスプローラはその子ディレクトリに移動し、そのディレクトリ内のファイルなどを
表示します。最初に表示されている"../"ディレクトリで<Enter>を押すと、１つ上の
階層に移動します。その行まで移動しなくても、"-"を押しても同じ意味になります。

"?"を押すと、エクスプローラの使い方についての簡単なヘルプが出ます。
このような表示となります。

	" <enter> : open file or directory ~
	" o : open new window for file/directory ~
	" O : open file in previously visited window ~
	" p : preview the file ~
	" i : toggle size/date listing ~
	" s : select sort field    r : reverse sort ~
	" - : go up one level      c : cd to this dir ~
	" R : rename file	   D : delete file ~
	" :help file-explorer for detailed help ~

最初の数行は選択したファイルを表示するためのコマンドです。利用するコマンドに
よって、ファイルの表示のされ方が違います。

	<Enter>		現在のウィンドウを使って表示
	o		新たなウィンドウを開く
	O		直前に使っていたウィンドウを使う。
	p		プレビューウィンドウを使う。カーソルはエクスプローラ
			ウィンドウに戻ってくる。|preview-window|を参照。

次のコマンドはそれ以外の情報表示に使います。

	i		指定のファイルの大きさと日付を表示します。もう一度"i"
			を押すと非表示にします。
	s		カーソルのあるフィールドを使って並べ替えを行います。
			まず、"i"コマンドで大きさと日付を表示します。次にカー
			ソルをどれかのファイルの大きさフィールドに動かして、
			"s"を押します。するとファイルは大きさ順に並べ替えら
			れます。カーソルが日付にあれば、日付順に並べ替えられ
			ます。
	r		並べ替えの順序を逆にします(大きさでも日付でも)

また、次のような特殊コマンドもあります。

	c		表示されているディレクトリをカレントディレクトリとし
			ます。そうすると":edit"コマンドでフルパスを指定しな
			くてもよくなります。
	R		カーソル下のファイル名を変更します。新しいファイル名
			を入力するためのプロンプトを表示します。
	D		カーソル下のファイルを削除します。本当に実行してもよ
			いかを確認するプロンプトを表示します。

==============================================================================
*22.2*	カレントディレクトリ

シェルと同じようにvimにもカレントディレクトリという概念があります。例えば、
ホームディレクトリにいる時に、"VeryLongFileName"というディレクトリにあるファ
イルをいくつか編集したいとします。こうすればできますが、打ち込む文字数が多く
なります。 >

	:edit VeryLongFileName/file1.txt
	:edit VeryLongFileName/file2.txt
	:edit VeryLongFileName/file3.txt

こんなに文字を打つのを止めたければ、このようにします。 >

	:cd VeryLongFileName
	:edit file1.txt
	:edit file2.txt
	:edit file3.txt

このように":cd"コマンドでカレントディレクトリを変更できます。カレントディレ
クトリが何かを知るには、":pwd"コマンドを使います。 >

	:pwd
	/home/Bram/VeryLongFileName

vimは直前のディレクトリ名を覚えています。":cd -"を使うとそのディレクトリに戻
ることができます。
例を示しましょう。 >

	:pwd
	/home/Bram/VeryLongFileName
	:cd /etc
	:pwd
	/etc
	:cd -
	:pwd
	/home/Bram/VeryLongFileName
	:cd -
	:pwd
	/etc


ウィンドウ毎のカレントディレクトリ

ウィンドウを分割すると、両方のウィンドウのカレントディレクトリは同じになりま
す。でも新しく分割したウィンドウで別のディレクトリにあるファイル群を編集した
ければ、他のウィンドウのカレントディレクトリに影響を与えずに、ディレクトリ変
更ができます。これをローカルディレクトリと呼びます。 >

	:pwd
	/home/Bram/VeryLongFileName
	:split
	:lcd /etc
	:pwd
	/etc
	CTRL-W w
	:pwd
	/home/Bram/VeryLongFileName

":lcd"コマンドを使うまでは、全ウィンドウは同じカレントディレクトリを共有しま
す。ですから、あるウィンドウで":cd"コマンドを実行すれば、他の全ウィンドウの
カレントディレクトリも変更されます。
でも、":lcd"を使って違ったディレクトリに変更されたウィンドウは違います。他の
ウィンドウで":cd"や":lcd"を行っても影響を受けません。
他とは別のカレントディレクトリを使っているウィンドウで":cd"コマンドを実行す
ると、共有のディレクトリを使うようになります。

==============================================================================
*22.3*	ファイルを見つける

次のような行を含むＣのプログラムを編集しているとします。

	#include "inits.h" ~

この"inits.h"ファイルの内容を見たければ、カーソルをそのファイル名の上に動か
して、次のように入力します。 >

	gf

vimはそのファイルを見つけて、開いてくれます。
ファイルがカレントディレクトリにない場合はどうしましょうか？その場合は'path'
オプションを使ってそのファイルを探します。このオプションにはファイルを探す時
に見にいくディレクトリのリストを入れておきます。
例えば、インクルードファイルが"c:/prog/include"にあるのであれば、次のコマン
ドで'path'オプションにそのディレクトリを追加します。 >

	:set path+=c:/prog/include

ここで指定しているディレクトリは絶対パスです。ですからカレントディレクトリが
どこであれ、常に同じ場所を示します。ではファイルのある場所のサブディレクトリ
にファイル群を配置してある場合はどうでしょうか。この場合は相対パスで指定がで
きます。相対パスはこのように、"."文字で始めます。 >

	:set path+=./proto

この場合、"gf"を実行したファイルがあるディレクトリのサブディレクトリ"proto"
の中を探します。つまり、"inits.h"の上で"gf"と入力すると、vimは"proto/inits.h"
を探し、そのファイルのディレクトリで編集を開始します。
"./"なしで、つまり"proto"だけだった場合、vimはカレントディレクトリの下にある
"proto"ディレクトリを探します。ただ、編集中のファイルがある場所と、カレント
ディレクトリが、いつも一致しているとは限りません。

'path'オプションでは、これ以外にもいろいろな方法で検索対象のディレクトリを指
定することができます。詳しくはヘルプの'path'オプションをご覧ください。
'isfname'オプションはファイル名に使える文字とそうでない文字を決めるのに使い
ます。(例えば、上の例にもあるように "(ダブルクオート)文字がそうです)

ファイルの中では使っていないが、ファイル名を知っているようなファイルを探すに
は、次のコマンドを使います。 >

	:find inits.h

vimは'path'オプションでそのファイルの場所を決めようとします。これは":edit"コ
マンドと似ていますが、'path'を使う点が違っています。

見つけたファイルを別ウィンドウで開くには"gf"コマンドの代わりにCTRL-W fコマン
ドを使います。また、":find"の代わりは":sfind"となります。

Vim起動時に'path'にあるファイルの編集を開始するにはこの方法が便利です。 >

	vim "+find stdio.h"

こうすると"stdio.h"というファイルを'path'の中から探しだします。クオート(")は引
数を一つにまとめるために必ず必要です|-+c|。

==============================================================================
*22.4*	バッファリスト

vimでは編集中のファイルを表すのにバッファという用語を使います。実際にはバッ
ファは編集しているファイルのコピーです。バッファの変更を終わる時にそのファイ
ルにバッファの内容を書き出すのです。バッファにはファイルの内容だけが入ってい
るわけではなく、マークや設定などバッファに属する情報も持っています。


隠しバッファ 
------------

ファイル"one.txt"を編集している時に"two.txt"を編集する必要があったとします。
単純に":edit two.txt"と入力してもいいのですが、"one.txt"に変更を加えている時
にはうまくいきません。でもまだ"one.txt"を書き出したくはないとします。こんな
場合、vimなら次のコマンドで解決できます。 >

	:hide edit two.txt

"one.txt"というバッファは画面から消えますが、vimはそのバッファを編集中である
ことを覚えていて、変更されている内容も覚えています。これを隠しバッファと呼び
ます。このバッファに文章が含まれていますが、見ることはできません。
パラメタ付きの":hide"コマンドは別のコマンドです。これは'hidden'オプションが
設定されている時のようにふるまいます。このオプションを自分で設定することもで
きます。これを設定しておくといずれかのバッファを破棄する時に、隠しバッファの
状態となります。
気を付けてください。変更された隠しバッファがある時には全バッファを保存済であ
ることを確認してからvimを終了してください。


非アクティブバッファ
--------------------

一度使ったバッファに関する情報はずっと覚えています。ウィンドウが表示されてい
ない時で隠しバッファでもない場合もバッファリストには出てきます。こういった
バッファを「非アクティブバッファ」と呼びます。バッファの種類を整理しておきま
しょう。

   Active		文章ロード済でウィンドウを表示中
   Hidden		文章ロード済だがウィンドウは非表示
   Inactive		文章は未ロードでウィンドウも非表示

非アクティブバッファについてマークと同じようにvim側で情報を保持していますの
で覚えています。ファイル名を覚えていますので、編集したことのあるファイルを見
ることができ、便利です。後で再編集できます。


バッファリスト
--------------

バッファリストを見るのは次のコマンドです。 >

	:buffers

同じことを行うコマンドがあります。これはバッファリストを表示するという意味に
は取りにくいですが、ずっと入力は楽です。 >

	:ls

コマンドの実行結果は例えば次のようになります。

  1 #h	"help.txt"			line 62 ~
  2 %l+	"usr_21.txt"			line 1 ~
  3	"usr_toc.txt"			line 1 ~

最初のカラムはバッファ番号です。バッファ番号を使えば、後で述べるようにファイ
ル名を入力せずにそのバッファを編集できます。
バッファ番号の次にはフラグ、そしてファイル名、最後に編集した時の行番号と続き
ます。フラグ部分には次のようなものが(左から右へ)表示されます。

	u	バッファはリストに入らない(|unlisted-buffer|をご覧ください)
	 %	現在のバッファ
	 #	直前のバッファ
	  l	バッファはロード済で表示中
	  h	バッファはロード済ですが非表示
	   =	バッファは読み込み専用
	   -	バッファは未変更。'modifiable'オプションがoff
	    +	バッファは変更済


バッファを編集
--------------

番号を指定してバッファを編集できます。ファイル名を入力する手間を省けます。
>
	:buffer 2

しかしバッファ番号を知る唯一の方法はバッファリストを見ることです。その代わり
に、名前の一部を使うこともできます。 >

	:buffer help

vimは入力された名前に一番近いファイルを探します。その名前に合うバッファが１
つだけの場合はそれになります。この例であれば、"help.txt"がそうです。
新しいウィンドウを開いてバッファを開く時はこうします。 >

	:sbuffer 3

この場合も名前で指定ができます。


バッファリストの利用
--------------------

次のコマンド群を使って、バッファリスト内を動くことができます。

	:bnext		次のバッファを開く
	:bprevious	１つ前のバッファを開く
	:bfirst		最初のバッファを開く
	:blast		最後のバッファを開く

バッファをリストからはずすには、このコマンドを使います。 >

	:bdelete 3

繰り返しですが、この場合も名前が使えます。
アクティブ(ウィンドウ内に見えている)バッファを削除すると、そのウィンドウも閉
じます。またカレントバッファを削除すると、カレントウィンドウを閉じます。ただ
し、１つしかウィンドウが残っていない場合は、編集する他のバッファを探します。
何も編集しないわけにはいかないですからね！

	Note:
	":bdelete"でバッファを削除した後でもvimはそれを覚えています。実際に
	はそれを"unlieted"にして、":buffers"で表示されるリストに現れないよう
	にしているのです。":buffers!"コマンドを使うとこの"unlisted"なウィン
	ドウも表示します。(そう、vimは不可能なことも可能にするのです)
	バッファのことを本当に忘れてしまうようにするには":bwipe"を使います。
	'buflisted'オプションも併せてご覧ください。

==============================================================================

Next chapter: |usr_23.txt|  他の種類のファイルを編集する

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
