COMMENT: 複数のファイルを編集する
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*usr_07.txt*	For Vim version 6.3.  Last change: 2004 Mar 12

		     VIM USER MANUAL - by Bram Moolenaar

			   ２つ以上のファイルを扱う


どんなにファイルが多くても、心配はいりません。全てをvimの中で行えます。作業
用のファイルリストを定義すれば、ファイル間を自由に移動できます。ファイル間で
文字列をコピー＆ペーストするのも自由自在です。

|07.1|	他のファイルを編集する
|07.2|	ファイル一覧
|07.3|	ファイル間ジャンプ
|07.4|	バックアップファイル
|07.5|	ファイル間のテキストコピー
|07.6|	読み込み専用モード
|07.7|	ファイル名の変更

     Next chapter: |usr_08.txt|  ウィンドウの分割
 Previous chapter: |usr_06.txt|  シンタックスハイライトの使用
Table of contents: |usr_toc.txt|

==============================================================================
*07.1*	他のファイルを編集する

ここまでの章では、別のファイルを編集するにはvimの再起動が必要でした。実はこ
れはとても簡単なのです。別のファイルを編集したければ、このコマンドを使います。 >

	:edit foo.txt

ファイル名は"foo.txt"に限らず何でも使えます。vimは現在のファイルを閉じて、指
定のファイルを開きます。現在のファイルが変更されていて、それを保存していなけ
れば、エラーメッセージを表示します。この場合、新しいファイルは開かれません。

	E37: No write since last change (use ! to override) ~
JP:	E37: 最後の変更が保存されていません (! で変更を破棄) ~

	Note:
	vimは各エラーメッセージの先頭にエラーＩＤを付けて表示します。もしエ
	ラーの意味や、何が原因かがわからなければ、このＩＤでヘルプを引いてく
	ださい。上の場合なら、このようにします。 >

		:help E37

ここで２つの選択肢が選べます。一つは次のコマンドでファイルを書き出す方法です。 >

	:write

もう一つは今までの編集結果を破棄して、強制的に新しいファイルを開く方法です。
これには強制文字(!)を使います。 >

	:edit! foo.txt

現在編集中のファイルの変更の書き込みはまだしたくないけれど、他のファイルの編
集は行いたい、といった場合は現ファイルを隠すことができます。 >

	:hide edit foo.txt

変更のあったファイルはメモリ上に残っていますが、画面では見えません。この詳細
はバッファリスト(|22.4|)の節で説明します。

==============================================================================
*07.2*	ファイル一覧

vimは起動時に編集対象となるファイルを複数指定できます。例えばこのようにしま
す。 >

	vim one.c two.c three.c

このコマンドはvimに３つのファイルを編集しようとしていることを伝えます。vimは
起動すると、１つ目ファイル(one.c)だけを表示します。このファイルの編集が終わ
り、次のファイル(two.c)を編集するにはこのコマンドを使います。 >

	:next

現在のファイルでの変更を保存していない場合は、エラーメッセージを表示し":next"
コマンドを実行しません。前節で述べた":edit"の場合と同じです。保存せずに強制
的に次のファイルを開くのはこのコマンドです。 >

	:next!

でも、たいていは変更を保存してから次のファイルを開くことでしょう。ですので、
そのための特別コマンドを用意しています。 >

	:wnext

これは次の２つのコマンドを使うのと同じ結果となります。 >

	:write
	:next


私はドコにいるの？
------------------

今編集しているのが引数リスト中のどのファイルなのかは、ウィンドウタイトルを見
ればわかります。そこに"(2 of 3)"のような表示があります。これは全部で３つの
ファイルがあり、今は２つ目を編集しているという意味です。
ファイルの一覧を見るのは、このコマンドです。 >

	:args

これは"arguments"の省略形です。この結果は次のように表示されます。

	one.c [two.c] three.c ~

ここではvim起動時に指定したファイルリストを表示します。編集中のファイル(ここ
では"two.c")は[ ]記号で囲んで表示します。


他のファイルへの移動
--------------------

これはファイルを一つ戻るコマンドです。 >

	:previous

これは":next"コマンドに似ています。違うのは移動する方向です。繰り返しになり
ますが、このコマンドにもファイル保存してから移動したい時の省略コマンドがあり
ます。 >

	:wprevious

一覧の最後のファイルに移動するコマンドもあります。 >

	:last

逆に最初のファイルに戻るコマンドもあります。 >

	:first

でも、":wlast"とか":wfirst"はありません。

":next"と":previous"についてはカウンタが指定できます。例えば、２ファイル先に
進むにはこのようにします。 >

	:2next


自動保存
--------

ファイル内を動いて変更を加えた場合は、":write"を忘れてはいけません。そうで
ないとエラーメッセージが表示されます。変更部分を常にファイルに保存したいのな
ら、次のコマンドでvimに自動的に保存するように指示できます。 >

	:set autowrite

保存して欲しくないファイルを編集する時はこれをoffに戻します。 >

	:set noautowrite


他のファイルリストで編集する
----------------------------

vimを終了、再起動しなくてもファイルリストは再定義できます。次のコマンドを使
えば、編集対象のファイルを他のものに変更できます。 >

	:args five.c six.c seven.h

シェルと同じようにワイルドカードを使うこともできます。 >

	:args *.txt

vimはリストの最初のファイルを読み込みます。繰り返しになりますが、現在のファ
イルを変更してれば、それを保存することもできますし、":args!"（！が付いてい
ます）で変更を放棄することもできます。


最後のファイルまで編集した？
----------------------------
							*arglist-quit*
ファイルリストを使うと、vimは全ファイルが編集対象だ、と考えます。利用者が間
違って(ファイルが残っているのに)終わることがないように、リストの最後のファイ
ルを開くまでは、次のエラーメッセージを表示します。

	E173: 46 more files to edit ~
JP:	E173: 編集すべきファイルがあと 46 個あります。 ~

本当に終わってよければ、もう一度終了コマンドを実行すると終了できます。(ただ
し、途中に他のコマンドを実行しない場合に限ります)

==============================================================================
*07.3*	ファイルからファイルへのジャンプ

２つのファイル間を素早く移動するには、CTRL-^("^"はASCIIキーボードなら６の上
です)を押します。例を示します。
訳注: ※JISのキーボードでは'-'の右側にあります。
訳注:   私見ですが、viはASCII配列で使う方が幸せになれると思います。
訳注:   例えば、マークジャンプ(')やオリジナルviでの挿入モードでの行キャン
訳注:   セル(@)などはJIS配列ではとても使いにくく感じていました。
>
	:args one.c two.c three.c

上を実行すると１つ目の"one.c"が開きます。 >

	:next

これで、"two.c"になりました。ここでCTRL-^を使うと"one.c"に戻ります。もう一度
CTRL-^を押すと、"two.c"に戻ります。さらにCTRL-^を使うと"one.c"となります。
さて、ここで次のコマンドを実行します。 >

	:next

これで"three.c"になります。CTRL-^コマンドはファイルリスト中での場所は変更し
ません。それを変更できるのは":next"や":previous"だけです。

以前に編集したファイルは補欠ファイル("alternate" file)と呼びます。vimの起動
直後は CTRL-^は動きません。これは補欠ファイルがまだないからです。


定義済のマーク
--------------

他のファイルにジャンプすると、２つの定義済のマークが使えるようになります。
これは非常に便利です。 >

	`"

このコマンドは前のファイルから動いた時のカーソル位置に戻します。
もう１つのマークは最後に変更を加えた場所です。 >

	`.

"one.txt"を編集していて、ファイルのある場所で"x"を使って文字を削除したとし
ます。その後、"G"で最終行に移動して":w"でファイルを保存します。その後いく
つかのファイルを編集してから、":edit one.txt"を使って戻ってきたとします。こ
こで、
	`" 	ファイルの末尾にジャンプ。
	`.	"x"を使って文字を削除した場所にジャンプ。
となります。
`" と `. はさらに変更を加えて、別ファイルにジャンプしない限り変化しません。


ファイルマーク
--------------

４章(|4.1|)では"mx"でマークを付け、"`x"でその場所にジャンプする方法を述べま
した。このマークはそのファイルの編集中だけ使えます。別のファイルを開いて、そ
れに同じマークを付けても、マークはそのファイルに固有のものとなります。つまり
各ファイルは各々一組のマークを持っていて、ファイル内に閉じているということで
す。
ここまでマークには小文字を使ってきました。ですが、大文字のマークも用意されて
います。大文字のマークはグローバルで、どのファイルからでも使えます。例えば
"foo.txt"というファイルの編集中に"50%"コマンドでファイルの真ん中にジャンプ
して、そこにF(大文字のf)というマークを付けたとします。 >

	50%mF

次に"bar.txt"を編集して最終行にマーク B を付けます。
>
	GmB

さて、ここで"'F"コマンドを使うと、いきなりfoo.txtの真ん中にジャンプします。
もちろん"bat.txt"内で"'B"を入力すると、bar.txt の行末にも移動できます。

ファイルマークは他の場所に設定し直さない限り、ずっと覚えてくれています。です
から一度マークを付ければ、何時間も編集を行ってからでもそのマークに戻って来るこ
とができるのです。
マーク名にはマークを付けた場所から連想できるような単純なルールを決めておくと
よいでしょう。例えば、ヘッダファイルは H 、makeファイルは M 、Ｃのソースには
Cといった具合です。

あるマークがどこに定義されているかを見たければ、":marks"コマンドの引数にマー
クを指定します。 >

	:marks M

マークを複数指定しても構いません。 >

	:marks MCP

マークを付けていなくても CTRL-O と CTRL-I を使えば、古い場所と新しい場所の間
をジャンプできることをお忘れなく。

==============================================================================
*07.4*	バックアップファイル

通常vimはバックアップファイルを作成しません。しかしバックアップが必要なら次
のコマンドを実行するだけです。 >

	:set backup

バックアップファイルは元のファイル名の後ろに"~"を加えた名前になります。
ファイル名が、"data.txt"であれば、バックアップファイル名は"data.txt~"となり
ます。
 ~で終わるのが好みでなければ、このように変更できます。 >

	:set backupext=.bak

上のように設定するとバックアップファイルは"data.txt~"ではなく"data.txt.bak"
になります。
もう一つのオプション'backupdir'にも触れておきましょう。これはバックアップ
ファイルを作るディレクトリを指定するオプションです。デフォルトではバックアッ
プは元ファイルと同じディレクトリに作られます。たいていの場合はこれで問題ない
はずです。

	Note:
	'backup'オプションがoffで、'writebackup'がonの場合、vimはバックアップ
	を作ります。ただしそのバックアップは正常にファイルへの保存が行われた
	時に削除されます。この機能は何らかの理由(例えば、ディスクがいっぱい
	になったというのが一番ありがちな理由です。雷にやられるというのも可能
	性は低いですがありうることです)で書き込み処理に失敗した時、オリジナ
	ルファイルを失ってしまう危険を回避するための機能なのです。


オリジナルファイルの保全
------------------------

ソースファイルの編集などで、変更を加える前のファイルを残しておきたい時もあり
ます。しかし、バックアップファイルはファイルを保存する都度に上書きされますか
ら、直前のバックアップしか残らず、最初のファイルはなくなってしまいます。
変更前のファイルを残しておく場合は、'patchmode'オプションを設定します。これ
には変更を加える前のファイルバックアップ用の拡張子を指定します。普通はこのよ
うに指定します。 >

	:set patchmode=.orig

data.txtを開いて編集をし、最初にファイルを保存しようとした時に、vimは変更前
のファイルを"data.txt.orig"という名前にして保全してくれます。
さらにファイルに変更を加えても、既に"data.txt.orig"があるので、そのままにし
て上書きはしません。この場合もバックアップは"data.txt~"(もしくは'backupext'
で指定された名前)で作成されます。
'patchmode'が空のまま(これがデフォルト)だと、変更前ファイルを残しません。

==============================================================================
*07.5*	ファイル間での文字列のコピー

ここではファイルから別のファイルに文字列をコピーする方法を説明します。簡単な
例で始めましょう。まずコピーしたい文字列を含んだファイルを編集中とします。
カーソルを対象となる文字列の先頭に動かして"v"を押します。visualモードに入り
ますので、カーソルを対象文字列の末尾に動かして"y"を押します。これで対象をヤン
ク(いわゆるコピー)しました。
例えばこの上の段落をコピーしたければ次のようにします。 >

	:edit thisfile
	/ここでは
	vjjjjj$y

次にこのテキストをプット(ペースト)したいファイルを編集します。文字列をプット
したい場所にカーソルを動かし、"p"コマンドでプットします。 >
	:edit otherfile
	/どこか
	p

当然ながら、文字列のヤンクには他にもいろんなコマンドが使えます。例えば、行
全体を選択したければ、"V"で行単位のビジュアルモードを使えますし、矩形の選択
ならCTRL-Vを使っても構いません。"Y"で１行のヤンクを使ってもいいですし、"yaw"
で単語をヤンクするなど、何でもＯＫです。
"p"コマンドはカーソルの後に文字列をプットします。カーソルの前にプットしたけ
れば、 "P"を使います。なお、vimは行単位でヤンクしたのかブロック単位なのかを
覚えています。行単位でヤンクしたのならプットも行単位ですし、ブロック単位で
ヤンクしたのならプットもブロック単位です。


レジスタの使用
--------------

あるファイルから別のファイルに複数の文字列をコピーしたい場合、手間ひまをかけ
て何度も何度もファイルを切り換えなければなりません。これを避けるには、各文
字列をレジスタにコピーします。
レジスタというのはvimが文字列を保持する場所です。レジスタには a ～ z の名前
がついていています(実はこれ以外にもあるのですが、それは後程)。では文字列をレ
ジスタ f (fはfirstのつもり)にヤンクしてみましょう。 >

	"fyas

"yas"コマンドで文をヤンクします。"f はその文字列をレジスタ f に入れるための
指定です。この指定はヤンクコマンドの直前に指定します。
さらに３行をレジスタ l (lはlineのつもり)にヤンクしてみましょう。 >

	"l3Y

カウンタ(回数指定)は "l の直前に指定しても構いません。
また、ブロック単位の文字列をレジスタ b (bはblockのつもり)にヤンクする場合は
このようにします。 >

	CTRL-Vjjww"by

この場合でもレジスタ指定 "b を"y"コマンドの直前で指定している点に注意してく
ださい。これは必須事項です。これを"w"コマンドより前に置いてしまうとうまく動
きません。
さて、この時点でレジスタ f,l,b の３つにそれぞれ文字列が格納されました。
ここで別のファイルを開いて、目的の場所に動いてからレジスタ内容をプットしま
す。 >

	"fp

ヤンクの場合と同じく、レジスタ指定"f は"p"コマンドより前でなければなりませ
ん。どのレジスタからプットしても構いません。他の文字列をヤンクし直さない限り
レジスタの内容は変化しません。ですから、同じレジスタの内容を何度でも好きなだ
けプットできます。

ヤンク時だけでなく、削除の時もレジスタが使えます。これを使うと、複数の文字列
を好きなように移動できます。例えば単語を削除しその内容をレジスタ w に入れるに
はこのようにします。 >

	"wdaw

繰り返しですが、レジスタ指定は削除コマンドの前に置いてください。


ファイルに追記する
------------------

編集中の文章を他のファイルにまとめたい場合は、このコマンドを使います。 >

	:write >> logfile

これは編集中のファイル内容を"logfile"に追記します。これを使うと、1)コピーし
たい範囲を選択してヤンクし、2)"logfile"を開き、3)末尾にプットするという手間
をかけなくて済みます。ただし、ファイルの末尾への追加しかできません。
数行程度を追記したければ、visualモードでそれを選択してから":write"を実行し
ます。行範囲の選択方法は、10章でいろいろと説明します。

==============================================================================
*07.6*	読み込み専用モード

ファイルの内容は見たいけれど、変更や保存はしたくないというケースもあります。
ですが、うっかり":w"を実行してしまうと元のファイルに上書きされます。これは
危険です。これを避けるためファイルの読み込み専用モードを用意しています。
vimを読み込み専用モードで起動するにはこのコマンドを使います。 >

	vim -R file

Unix上なら、次のコマンドも同じ意味になります。 >

	view file

これで"file"を読み込み専用モードで編集できます。":w"をしようとすると、エラー
メッセージが表示され、保存は行われません。
また、ファイルに変更を加えようとすると、vimは次のような警告を表示します。

	W10: Warning: Changing a readonly file ~
JP:	W10: 警告：読込専用ファイルを変更します ~

警告は出ますが、変更は可能です。これは例えば、内容を読み易くするためにフォー
マットを整えるといったことを許すためです。
読み込み専用モードであることを忘れて、(保存したいような)変更を加えてしまった
場合でも保存はできます。writeコマンドに ! を付けて強制保存してください。

完全にファイルの変更を禁止したい時は、このようにします。 >

	vim -M file

これで内容を変更しようとしてもエラーになります。例えばヘルプファイルを表示す
る時はこのモードになります。変更しようとすると、次のエラーメッセージが表示さ
れます。

	E21: Cannot make changes, 'modifiable' is off ~
JP:	E21: 'modifiable'がオフなので、変更できません ~

vimを閲覧モードで動くように設定したければ-M を引数に与えます。とはいってもこ
れは自主規制みたいなものですから、次のコマンドを使えばプロテクトははずれてし
まいます。 >

	:set modifiable
	:set write

==============================================================================
*07.7*	ファイル名の変更

新たなファイルの作成時に既存ファイルから必要な部分を抜き出して作るというやり
方があります。例えばファイル名を変更するプログラムを作りたいとしましょう。
もし以前に作ったファイルコピーのプログラムがあれば、それを流用したいですよね。
>
	:edit copy.c

新しいプログラムに不必要な部分は削除してしまいましょう。次に、このファイルに
新しい名前を付けましょう。そのためのコマンドが":saveas"です。 >

	:saveas move.c

vimは内容を指定のファイル名で保存し、編集中のファイルもその名前にします。
ですから次に":write"した時も"move.c"に上書き保存され、"copy.c"は変更されずに
残ります。
保存しないで編集中のファイル名だけを変更する場合は、次のコマンドを使います。 >

	:file move.c

vimはこのファイルを"未編集"として扱います。これは編集開始時とは違うファイル
となっているためです。ファイルを保存しようとすると、次のようなメッセージが
表示される場合があります。

	E13: File exists (use ! to override) ~

これは間違って他のファイルに上書きしてしまうのを防ぐための防護策です。

==============================================================================

Next chapter: |usr_08.txt|  ウィンドウの分割

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
