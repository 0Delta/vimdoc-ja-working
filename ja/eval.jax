COMMENT: Vimスクリプト
STATUS: halfway 7.1
TRANSLATOR: 村岡太郎 <koron@tka.att.ne.jp>
TRANSLATOR: 青山正太郎(mm) <jod@r9.dion.ne.jp>

*eval.txt*      For Vim version 7.1.  Last change: 2007 May 11


		VIMリファレンスマニュアル    by Bram Moolenaar


Vimスクリプト				*expression* *expr* *E15* *eval*

Vimスクリプトの利用についてはユーザマニュアルの41章|user_41.txt|でも解説されて
いる。

注意:Vimスクリプトはコンパイル時に無効化できる。もしそうなっているとこのドキュ
メントに書かれている事は有効ではない。|+eval|と|no-eval-feature|を参照。

1.  変数		|variables|
    1.1 変数の型
    1.2 関数への参照			|Funcref|
    1.3 リスト				|Lists|
    1.4 辞書				|Dictionaries|
    1.5 変数について補足		|more-variables|
2.  式の文法		|expression-syntax|
3.  内部変数		|internal-variables|
4.  組み込み関数	|functions|
5.  関数定義		|user-functions|
6.  波括弧{}変数	|curly-braces-names|
7.  コマンド		|expression-commands|
8.  例外処理		|exception-handling|
9.  例			|eval-examples|
10. +eval機能が無効	|no-eval-feature|
11. サンドボックス	|eval-sandbox|
12. テキストロック	|textlock|

{Vi にはこれらのコマンドは存在しない}

==============================================================================
1. 変数							*variables*

1.1 変数の型 ~
							*E712*
変数には5種類の型がある:

数値		32ビット符合有整数
		例: -123 0x10 0177

文字列		終端がNUL文字である8ビットの符号無し文字(バイト)
		例: "ab\txx\"--"  'x-z''a,c'

Funcref		関数への参照 |Funcref|.
		例: function("strlen")

リスト		要素の順序つきの列 |List|.
		例: [1, 2, ['a', 'b']]

辞書		順序を持たない連想配列: 各要素はキーと値を持つ。|Dictionary|
		例: {'blue': "#0000ff", 'red': "#ff0000"}

数値と文字列は文脈に応じて相互に変換される。

数値から文字列への変換は数字のASCII表現によって行なわれる。例: >
	数値 123	-->	文字列 "123"
	数値 0		-->	文字列 "0"
	数値 -1		-->	文字列 "-1"

文字列から数値への変換は最初の数字を用いて数値に変換する。16進表記"0xf9"や8進
表記"017"も認識される。文字列が数字で始まらない場合結果は0となる。例: >
	文字列 "456"	-->	数値 456
	文字列 "6bar"	-->	数値 6
	文字列 "foo"	-->	数値 0
	文字列 "0xf1"	-->	数値 241
	文字列 "0100"	-->	数値 64
	文字列 "-8"	-->	数値 -8
	文字列 "+8"	-->	数値 0

文字列を強制的に数値に変換するには0を足す: >
	:echo "0100" + 0
<	64 ~

先頭の0によって8進数とみなされるのを防いだり、異なる基数を使うには|str2nr()|を
使う。

ブール(真理値)演算には数値が使われる。0は偽を意味し、非0は真を表す。

Note 次のコマンドをみると >
	:if "foo"
"foo"は0に変換され、それは偽を意味する。文字列が空ではないか調べるためには
strlen()を使用して次のようにする。 >
	:if strlen("foo")
<				*E745* *E728* *E703* *E729* *E730* *E731*
List, Dictionary and Funcref types are not automatically converted.

								*E706*
You will get an error if you try to change the type of a variable.  You need
to |:unlet| it first to avoid this error.  String and Number are considered
equivalent though.  Consider this sequence of commands: >
	:let l = "string"
	:let l = 44		" changes type from String to Number
	:let l = [1, 2, 3]	" error!


1.2 関数への参照 ~
					*Funcref* *E695* *E718*
関数|function()|は関数への参照を返す。関数への参照は、式の中で関数名が要求され
る場所で使うと参照先の関数を呼び出す。例: >

	:let Fn = function("MyFunc")
	:echo Fn()
<							*E704* *E705* *E707*
関数参照の変数名は、大文字、"s:"、"w:"、"t:"、"b:"のいずれかで始めなければなら
ない。関数参照と参照先の関数の名前を同じにすることはできない。

関数を定義して、それへの参照を直接辞書に入れるための特別な形式がある。例: >
	:function dict.init() dict
	:   let self.val = 0
	:endfunction

この辞書のキーは小文字で始めなければならない。実際の関数名はここでは使われない。
|numbered-function|も参照。

|:call|コマンドでも関数参照を使うことができる: >
	:call Fn()
	:call dict.init()

参照先の関数名は|string()|で得られる。 >
	:let func = string(Fn)

関数参照を呼び出すには|call()|を使い、引数にはリスト型の変数を使う: >
	:let r = call(Fn, mylist)


1.3 リスト ~
							*List* *Lists* *E686*
A List is an ordered sequence of items.  An item can be of any type.  Items
can be accessed by their index number.  Items can be added and removed at any
position in the sequence.


List creation ~
							*E696* *E697*
A List is created with a comma separated list of items in square brackets.
Examples: >
	:let mylist = [1, two, 3, "four"]
	:let emptylist = []

An item can be any expression.  Using a List for an item creates a
List of Lists: >
	:let nestlist = [[11, 12], [21, 22], [31, 32]]

An extra comma after the last item is ignored.


List index ~
							*list-index* *E684*
An item in the List can be accessed by putting the index in square brackets
after the List.  Indexes are zero-based, thus the first item has index zero. >
	:let item = mylist[0]		" get the first item: 1
	:let item = mylist[2]		" get the third item: 3

When the resulting item is a list this can be repeated: >
	:let item = nestlist[0][1]	" get the first list, second item: 12
<
A negative index is counted from the end.  Index -1 refers to the last item in
the List, -2 to the last but one item, etc. >
	:let last = mylist[-1]		" get the last item: "four"

To avoid an error for an invalid index use the |get()| function.  When an item
is not available it returns zero or the default value you specify: >
	:echo get(mylist, idx)
	:echo get(mylist, idx, "NONE")


List concatenation ~

Two lists can be concatenated with the "+" operator: >
	:let longlist = mylist + [5, 6]
	:let mylist += [7, 8]

To prepend or append an item turn the item into a list by putting [] around
it.  To change a list in-place see |list-modification| below.


Sublist ~

A part of the List can be obtained by specifying the first and last index,
separated by a colon in square brackets: >
	:let shortlist = mylist[2:-1]	" get List [3, "four"]

Omitting the first index is similar to zero.  Omitting the last index is
similar to -1. >
	:let endlist = mylist[2:]	" from item 2 to the end: [3, "four"]
	:let shortlist = mylist[2:2]	" List with one item: [3]
	:let otherlist = mylist[:]	" make a copy of the List

If the first index is beyond the last item of the List or the second item is
before the first item, the result is an empty list.  There is no error
message.

If the second index is equal to or greater than the length of the list the
length minus one is used: >
	:let mylist = [0, 1, 2, 3]
	:echo mylist[2:8]		" result: [2, 3]

NOTE: mylist[s:e] means using the variable "s:e" as index.  Watch out for
using a single letter variable before the ":".  Insert a space when needed:
mylist[s : e].


List identity ~
							*list-identity*
When variable "aa" is a list and you assign it to another variable "bb", both
variables refer to the same list.  Thus changing the list "aa" will also
change "bb": >
	:let aa = [1, 2, 3]
	:let bb = aa
	:call add(aa, 4)
	:echo bb
<	[1, 2, 3, 4]

Making a copy of a list is done with the |copy()| function.  Using [:] also
works, as explained above.  This creates a shallow copy of the list: Changing
a list item in the list will also change the item in the copied list: >
	:let aa = [[1, 'a'], 2, 3]
	:let bb = copy(aa)
	:call add(aa, 4)
	:let aa[0][1] = 'aaa'
	:echo aa
<	[[1, aaa], 2, 3, 4] >
	:echo bb
<	[[1, aaa], 2, 3]

To make a completely independent list use |deepcopy()|.  This also makes a
copy of the values in the list, recursively.  Up to a hundred levels deep.

The operator "is" can be used to check if two variables refer to the same
List.  "isnot" does the opposite.  In contrast "==" compares if two lists have
the same value. >
	:let alist = [1, 2, 3]
	:let blist = [1, 2, 3]
	:echo alist is blist
<	0 >
	:echo alist == blist
<	1

Note about comparing lists: Two lists are considered equal if they have the
same length and all items compare equal, as with using "==".  There is one
exception: When comparing a number with a string they are considered
different.  There is no automatic type conversion, as with using "==" on
variables.  Example: >
	echo 4 == "4"
<	1 >
	echo [4] == ["4"]
<	0

Thus comparing Lists is more strict than comparing numbers and strings.  You
can compare simple values this way too by putting them in a string: >

	:let a = 5
	:let b = "5"
	echo a == b
<	1 >
	echo [a] == [b]
<	0


List unpack ~

To unpack the items in a list to individual variables, put the variables in
square brackets, like list items: >
	:let [var1, var2] = mylist

When the number of variables does not match the number of items in the list
this produces an error.  To handle any extra items from the list append ";"
and a variable name: >
	:let [var1, var2; rest] = mylist

This works like: >
	:let var1 = mylist[0]
	:let var2 = mylist[1]
	:let rest = mylist[2:]

Except that there is no error if there are only two items.  "rest" will be an
empty list then.


List modification ~
							*list-modification*
To change a specific item of a list use |:let| this way: >
	:let list[4] = "four"
	:let listlist[0][3] = item

To change part of a list you can specify the first and last item to be
modified.  The value must at least have the number of items in the range: >
	:let list[3:5] = [3, 4, 5]

Adding and removing items from a list is done with functions.  Here are a few
examples: >
	:call insert(list, 'a')		" prepend item 'a'
	:call insert(list, 'a', 3)	" insert item 'a' before list[3]
	:call add(list, "new")		" append String item
	:call add(list, [1, 2])		" append a List as one new item
	:call extend(list, [1, 2])	" extend the list with two more items
	:let i = remove(list, 3)	" remove item 3
	:unlet list[3]			" idem
	:let l = remove(list, 3, -1)	" remove items 3 to last item
	:unlet list[3 : ]		" idem
	:call filter(list, 'v:val !~ "x"')  " remove items with an 'x'

Changing the order of items in a list: >
	:call sort(list)		" sort a list alphabetically
	:call reverse(list)		" reverse the order of items


For loop ~

The |:for| loop executes commands for each item in a list.  A variable is set
to each item in the list in sequence.  Example: >
	:for item in mylist
	:   call Doit(item)
	:endfor

This works like: >
	:let index = 0
	:while index < len(mylist)
	:   let item = mylist[index]
	:   :call Doit(item)
	:   let index = index + 1
	:endwhile

Note that all items in the list should be of the same type, otherwise this
results in error |E706|.  To avoid this |:unlet| the variable at the end of
the loop.

If all you want to do is modify each item in the list then the |map()|
function will be a simpler method than a for loop.

Just like the |:let| command, |:for| also accepts a list of variables.  This
requires the argument to be a list of lists. >
	:for [lnum, col] in [[1, 3], [2, 8], [3, 0]]
	:   call Doit(lnum, col)
	:endfor

This works like a |:let| command is done for each list item.  Again, the types
must remain the same to avoid an error.

It is also possible to put remaining items in a List variable: >
	:for [i, j; rest] in listlist
	:   call Doit(i, j)
	:   if !empty(rest)
	:      echo "remainder: " . string(rest)
	:   endif
	:endfor


List functions ~
						*E714*
Functions that are useful with a List: >
	:let r = call(funcname, list)	" call a function with an argument list
	:if empty(list)			" check if list is empty
	:let l = len(list)		" number of items in list
	:let big = max(list)		" maximum value in list
	:let small = min(list)		" minimum value in list
	:let xs = count(list, 'x')	" count nr of times 'x' appears in list
	:let i = index(list, 'x')	" index of first 'x' in list
	:let lines = getline(1, 10)	" get ten text lines from buffer
	:call append('$', lines)	" append text lines in buffer
	:let list = split("a b c")	" create list from items in a string
	:let string = join(list, ', ')	" create string from list items
	:let s = string(list)		" String representation of list
	:call map(list, '">> " . v:val')  " prepend ">> " to each item

Don't forget that a combination of features can make things simple.  For
example, to add up all the numbers in a list: >
	:exe 'let sum = ' . join(nrlist, '+')


1.4 Dictionaries ~
						*Dictionaries* *Dictionary*
A Dictionary is an associative array: Each entry has a key and a value.  The
entry can be located with the key.  The entries are stored without a specific
ordering.


Dictionary creation ~
						*E720* *E721* *E722* *E723*
A Dictionary is created with a comma separated list of entries in curly
braces.  Each entry has a key and a value, separated by a colon.  Each key can
only appear once.  Examples: >
	:let mydict = {1: 'one', 2: 'two', 3: 'three'}
	:let emptydict = {}
<							*E713* *E716* *E717*
A key is always a String.  You can use a Number, it will be converted to a
String automatically.  Thus the String '4' and the number 4 will find the same
entry.  Note that the String '04' and the Number 04 are different, since the
Number will be converted to the String '4'.

A value can be any expression.  Using a Dictionary for a value creates a
nested Dictionary: >
	:let nestdict = {1: {11: 'a', 12: 'b'}, 2: {21: 'c'}}

An extra comma after the last entry is ignored.


Accessing entries ~

The normal way to access an entry is by putting the key in square brackets: >
	:let val = mydict["one"]
	:let mydict["four"] = 4

You can add new entries to an existing Dictionary this way, unlike Lists.

For keys that consist entirely of letters, digits and underscore the following
form can be used |expr-entry|: >
	:let val = mydict.one
	:let mydict.four = 4

Since an entry can be any type, also a List and a Dictionary, the indexing and
key lookup can be repeated: >
	:echo dict.key[idx].key


Dictionary to List conversion ~

You may want to loop over the entries in a dictionary.  For this you need to
turn the Dictionary into a List and pass it to |:for|.

Most often you want to loop over the keys, using the |keys()| function: >
	:for key in keys(mydict)
	:   echo key . ': ' . mydict[key]
	:endfor

The List of keys is unsorted.  You may want to sort them first: >
	:for key in sort(keys(mydict))

To loop over the values use the |values()| function:  >
	:for v in values(mydict)
	:   echo "value: " . v
	:endfor

If you want both the key and the value use the |items()| function.  It returns
a List in which each item is a  List with two items, the key and the value: >
	:for [key, value] in items(mydict)
	:   echo key . ': ' . value
	:endfor


Dictionary identity ~
							*dict-identity*
Just like Lists you need to use |copy()| and |deepcopy()| to make a copy of a
Dictionary.  Otherwise, assignment results in referring to the same
Dictionary: >
	:let onedict = {'a': 1, 'b': 2}
	:let adict = onedict
	:let adict['a'] = 11
	:echo onedict['a']
	11

Two Dictionaries compare equal if all the key-value pairs compare equal.  For
more info see |list-identity|.


Dictionary modification ~
							*dict-modification*
To change an already existing entry of a Dictionary, or to add a new entry,
use |:let| this way: >
	:let dict[4] = "four"
	:let dict['one'] = item

Removing an entry from a Dictionary is done with |remove()| or |:unlet|.
Three ways to remove the entry with key "aaa" from dict: >
	:let i = remove(dict, 'aaa')
	:unlet dict.aaa
	:unlet dict['aaa']

Merging a Dictionary with another is done with |extend()|: >
	:call extend(adict, bdict)
This extends adict with all entries from bdict.  Duplicate keys cause entries
in adict to be overwritten.  An optional third argument can change this.
Note that the order of entries in a Dictionary is irrelevant, thus don't
expect ":echo adict" to show the items from bdict after the older entries in
adict.

Weeding out entries from a Dictionary can be done with |filter()|: >
	:call filter(dict, 'v:val =~ "x"')
This removes all entries from "dict" with a value not matching 'x'.


Dictionary function ~
					*Dictionary-function* *self* *E725*
When a function is defined with the "dict" attribute it can be used in a
special way with a dictionary.  Example: >
	:function Mylen() dict
	:   return len(self.data)
	:endfunction
	:let mydict = {'data': [0, 1, 2, 3], 'len': function("Mylen")}
	:echo mydict.len()

This is like a method in object oriented programming.  The entry in the
Dictionary is a |Funcref|.  The local variable "self" refers to the dictionary
the function was invoked from.

It is also possible to add a function without the "dict" attribute as a
Funcref to a Dictionary, but the "self" variable is not available then.

				*numbered-function* *anonymous-function*
To avoid the extra name for the function it can be defined and directly
assigned to a Dictionary in this way: >
	:let mydict = {'data': [0, 1, 2, 3]}
	:function mydict.len() dict
	:   return len(self.data)
	:endfunction
	:echo mydict.len()

The function will then get a number and the value of dict.len is a |Funcref|
that references this function.  The function can only be used through a
|Funcref|.  It will automatically be deleted when there is no |Funcref|
remaining that refers to it.

It is not necessary to use the "dict" attribute for a numbered function.


Functions for Dictionaries ~
							*E715*
Functions that can be used with a Dictionary: >
	:if has_key(dict, 'foo')	" TRUE if dict has entry with key "foo"
	:if empty(dict)			" TRUE if dict is empty
	:let l = len(dict)		" number of items in dict
	:let big = max(dict)		" maximum value in dict
	:let small = min(dict)		" minimum value in dict
	:let xs = count(dict, 'x')	" count nr of times 'x' appears in dict
	:let s = string(dict)		" String representation of dict
	:call map(dict, '">> " . v:val')  " prepend ">> " to each item


1.5 変数について補足 ~
							*more-variables*

変数や式の結果の型を知りたいのならば、関数|type()|を使う。

オプション'viminfo'にフラグ'!'が含まれるならば、大文字で始まり小文字を含まない
名前のグローバル変数は、viminfoファイル|viminfo-file|に格納される。

オプション'sessionoptions'が"global"を含むなら、大文字で始まり少なくとも一文字
以上の小文字を含む名前のグローバル変数は、sessionファイル|session-file|に格納
される。

変数名			何処に保存されるか ~
my_var_6		されない
My_Var_6		sessionファイル
MY_VAR_6		viminfoファイル


波括弧を使って変数名を構成できる。詳細は|curly-braces-names|を参照。

==============================================================================
2. 式の文法						*expression-syntax*

式文法一覧、優先順位の低いものから高い順に:

|expr1| expr2 ? expr1 : expr1	if-then-else 条件式

|expr2|	expr3 || expr3 ..	論理和

|expr3|	expr4 && expr4 ..	論理積

|expr4|	expr5 == expr5		等しい
	expr5 != expr5		等しくない
	expr5 >	 expr5		より大きい
	expr5 >= expr5		大きいか等しい
	expr5 <	 expr5		より小さい
	expr5 <= expr5		小さいか等しい
	expr5 =~ expr5		正規表現にマッチする
	expr5 !~ expr5		正規表現にマッチしない

	expr5 ==? expr5		文字列として等しい(大文字/小文字区別無し)
	expr5 ==# expr5		文字列として等しい(大文字/小文字区別有り)
	etc.			上記の各式は大小文字の区別を、?を付加すると行
				わず、#を付加すると行う

	expr5 is expr5		同一の |List| のインスタンス
	expr5 isnot expr5	異なる |List| のインスタンス

|expr5|	expr6 +	 expr6 ..	足し算またはリストの連結
	expr6 -	 expr6 ..	引き算
	expr6 .	 expr6 ..	文字列の連結

|expr6|	expr7 *	 expr7 ..	掛け算
	expr7 /	 expr7 ..	割り算
	expr7 %	 expr7 ..	剰余(割った余り)

|expr7|	! expr7			論理否定
	- expr7			単項のマイナス(訳注:-1等)
	+ expr7			単項のプラス

|expr8|	expr8[expr1]		文字列のバイト、またはリストの要素
	expr8[expr1 : expr1]	文字列の部分文字列、またはリストの部分リスト
	expr8.name		辞書 |Dictionary| の要素
	expr8(expr1, ...)	|Funcref| 変数による関数呼び出し

|expr9|	number			数定数
	"string"		文字列定数。バックスラッシュは特別な意味を持つ
	'string'		リテラル文字列定数。'を含めるには2重にする
	[expr1, ...]		リスト |List|
	{expr1: expr1, ...}	辞書 |Dictionary|
	&option			オプション変数
	(expr1)			式の入れ子
	variable		内部変数
	va{ria}ble		波括弧付きの内部変数
	$VAR			環境変数
	@r			レジスタ'r'の値
	function(expr1, ...)	関数呼出し
	func{ti}on(expr1, ...)	波括弧付きの内部変数

".." はその演算が、その後に他の演算を続ける事が出来ることを示している。
例: >
	&nu || &list && &shell == "csh"

一つのレベルにある全ての式は左から右に解釈される。


expr1							*expr1* *E109*
-----

expr2 ? expr1 : expr1

'?'より前の式は数値として評価される。その結果が非0であった場合、'?'と':'に挟ま
れた式の値がこの式全体の値となり、逆に0であった場合は':'以降の式の値が全体の値
となる。
例: >
	:echo lnum == 1 ? "先頭" : lnum

始めの式が"expr2"であるから、そこに別の?:を含むことはできない。残り二つの式に
ついては以下のように再帰的な?:の利用が許される。
例: >
	:echo lnum == 1 ? "top" : lnum == 1000 ? "last" : lnum

読み易くするために、行継続|list-continuation|を利用することが推奨される: >
	:echo lnum == 1
	:\	? "top"
	:\	: lnum == 1000
	:\		? "last"
	:\		: lnum

':'の前には必ずスペースを入れること。そうでないと"a:1"のような変数の使用と間違
えてしまう可能性がある。


expr2 and expr3						*expr2* *expr3*
---------------

						*expr-barbar* *expr-&&*
演算子"||"と"&&"は左右に一つずつ引数を取る。引数は数値に変換される。結果は:

	  入力				   出力		    ~
n1		n2		n1 || n2	n1 && n2    ~
零		零		零		零
零		非零		非零		零
非零		零		非零		零
非零		非零		非零		非零

演算子は続けて書く事ができる。例: >

	&nu || &list && &shell == "csh"

Note "&&"は"||"よりも高い優先順位を持っている。これは次の事を意味する: >

	&nu || (&list && &shell == "csh")

結果が確定した時点で残りの式は省略され、解釈されない。これはC言語で行なわれる
ことに似ている。例: >

	let a = 1
	echo a || b

これはaが非零で戻り値は絶対に非零であるから、変数bが宣言されていなくても有効で
ある。次のも同様に: >

	echo exists("b") && b == "yes"

これもbが宣言されているいないに関わらず有効である。後半の項はbが定義されている
時にだけ評価される。


expr4							*expr4*
-----

expr5 {cmp} expr5

2つの式expr5を比較し、結果が偽なら0を、真なら1を返す。

				*expr-==*  *expr-!=*  *expr->*   *expr->=*
				*expr-<*   *expr-<=*  *expr-=~*  *expr-!~*
				*expr-==#* *expr-!=#* *expr->#*  *expr->=#*
				*expr-<#*  *expr-<=#* *expr-=~#* *expr-!~#*
				*expr-==?* *expr-!=?* *expr->?*  *expr->=?*
				*expr-<?*  *expr-<=?* *expr-=~?* *expr-!~?*
				*expr-is*
		'ignorecase'次第   大小文字考慮    大小文字無視 ~
等しい			==		==#		==?
等しくない		!=		!=#		!=?
より大きい		>		>#		>?
より大きいか等しい	>=		>=#		>=?
より小さい		<		<#		<?
より小さいか等しい	<=		<=#		<=?
正規表現マッチ		=~		=~#		=~?
正規表現非マッチ	!~		!~#		!~?
同一のインスタンス	is
異なるインスタンス	isnot

例:
"abc" ==# "Abc"	  0と評価される
"abc" ==? "Abc"	  1と評価される
"abc" == "Abc"	  'ignorecase'が設定されていれば1と、でなければ0と評価

							*E691* *E692*
リスト|List|はリストとだけ比較可能で、==系、!=系、is、isnotのみ利用できる。
これらはそれぞれのリストの値を再帰的に比較する。大文字小文字無視にすると要素を
比較するときに大文字小文字を無視する。

							*E735* *E736*
辞書|Dictionary|は辞書とだけ比較可能で、==系、!=系、is、isnotのみ利用できる。
これらは辞書のキー/値を再帰的に比較する。大文字小文字無視にすると要素を
比較するときに大文字小文字を無視する。

							*E693* *E694*
|Funcref|は|Funcref|とだけ比較可能で、"equal"と"not equal"のみ利用できる。大文
字小文字は常に区別される。

リスト|List|に対して"is"や"isnot"を使うと、それらの式が同じリストのインスタン
スを参照しているか判定される。リストのコピーと元のリストは異なると判定される。
リスト以外に対して"is"は"equal"と同じで、"isnot"は"not equal"と同じである。た
だし"is"、"isnot"は型が異なると値が等しくない点が"=="とは異なる。「4 == '4'」
は真で、「4 is '4'」は偽である。

文字列と数値を比較した場合、文字列が数値に変換され、数値として比較される。これ
は"0 == 'x'"が、'x'が数値としては0であることから、真となることを意味する。

文字列同士を比較した場合、strcmp()やstricmp()によって比較される。これは数値的
に(バイトの値で)比較されるのであって、必ずしも言語に基づく文字種の違いではな
い。

'#'を付けた演算子を使うか、省略形かつ'ignorecase'が設定されていない場合、比較
はstrcmp()で行なわれる。大文字・小文字は区別される。

'?'を付けた演算子を使うか、省略形かつ'ignorecase'が設定されている場合、比較は
stricmp()で行なわれる。大文字・小文字は区別されない。

'smartcase' は適用されない。

"=~"と"!~"演算子は右側の引数を正規表現のパターンとして、左側の引数に対してマッ
チを試みる。正規表現のパターンに関しては|pattern|を参照。このマッチは'magic'が
設定され'cpoptions'が空であるように振舞い、実際の'magic'や'cpoptions'に何が設
定されているには依存しない。これがスクリプトをポータブルにしてくれる。正規表現
中のバックスラッシュが重複してしまうのを避けるには、シングルクォーテーションの
文字列を使用する。詳細は|literal-string|を参照。
文字列は単一行として扱われるので、複数行のパターン(\nを含むもの)はマッチしな
い。しかしながらリテラルなヌル文字(NL)を、普通の文字として代用することはでき
る。例:
	"foo\nbar" =~ "\n"	1として評価される
	"foo\nbar" =~ "\\n"	0として評価される


expr5 and expr6						*expr5* *expr6*
---------------
expr6 +	 expr6 ..	足し算、またはリストの連結	*expr-+*
expr6 -	 expr6 ..	引き算				*expr--*
expr6 .	 expr6 ..	文字列の連結			*expr-.*

リストに対しては"+"のみ可能で、expr6は両方ともリストでなければならない。結果は
2つのリストを連結した新しいリスト。

expr7 *	 expr7 ..	掛け算				*expr-star*
expr7 /	 expr7 ..	割り算				*expr-/*
expr7 %	 expr7 ..	剰余(割った余り)		*expr-%*

"."を除く全ての演算子は自動的に文字列を数値に変換する。

"+"と"."の違いに注意:
	"123" + "456" = 579
	"123" . "456" = "123456"

'/'の右辺(除数)が0の場合、結果は0x7ffffffになる。
'%'の右辺(法)が0の場合、結果は0になる。

これらは全て|Funcref|には適用できない。


expr7							*expr7*
-----
! expr7			論理否定		*expr-!*
- expr7			単項マイナス		*expr-unary--*
+ expr7			unary plus		*expr-unary-+*

'!'演算子では非零は0に、0は1になる。
'-'では数値の符号が反転される。
'+"では変化はない。

文字列はまず数値に変換される。

これら2つは繰り返したり混ぜたりできる。例:
	!-1	    == 0
	!!8	    == 1
	--9	    == 9


expr8							*expr8*
-----
expr8[expr1]		文字列またはリストの要素	*expr-[]* *E111*

expr8が数値か文字列ならば、これの結果は文字列expr8のexpr1番目の単一のバイトか
らなる文字列である。expr8は文字列、expr1は数である。ただしマルチバイトエンコー
ディングの文字列については、単なるバイトコードであることに注意。

インデックスが0の場合、先頭のキャラクタが得られることに注意。これはC言語のよう
に働く。注意:カラム番号は1から始まる。例えばカーソルの下の文字を得るためには、
次のようにする必要がある: >
	:let c = getline(".")[col(".") - 1]

文字列の長さよりも大きなインデックスが指定された場合、結果は空文字列になる。負
数のインデックスを指定すると、結果は常に空文字列になる(後方互換性のため)。
最後のバイトを得るには[-1:]を使うこと。

expr8がリスト|List|ならばインデックスexpr1の要素が返る。取りうるインデックスの
値については|list-index|を参照。インデックスが範囲を超えている場合はエラーとな
る。例: >
	:let item = mylist[-1]		" 最後の要素を取得

一般的には、インデックスが正でリストの長さ以上または、負でリストの長さ×-1より
小さいときエラーとなる。


expr8[expr1a : expr1b]	部分文字列または部分リスト	*expr-[:]*

expr8が数値か文字列ならば、expr1aバイトからexpr1bバイトまでの部分文字列となる
(両端を含む)。expr8は文字列として扱われ、expr1aとexpr1bは数値として扱われる。
Note マルチバイトのエンコーディングは認識しない。

expr1aが省略されたときは0となる。expr1bが省略されたときは文字列の長さ-1となる。

負数のインデックスを使うことによって文字列の末尾から取り出すことができる。-1は
最後の文字、-2は最後から2文字目…を表す。

インデックスがその文字の範囲外に出てしまったときは、その文字は省かれる。expr1b
がexpr1aより小さいときは空文字列となる。

例: >
	:let c = name[-1:]		" 文字列の最後のバイト
	:let c = name[-2:-2]		" 文字列の最後から2バイト目
	:let s = line(".")[4:]		" 5バイト目から末尾まで
	:let s = s[:-3]			" 最後の2文字を削除する

expr8がリストならば、インデックスexpr1aとexpr1bの間の要素からなる新しいリスト
となる。上で説明した文字列の場合と同様だが、インデックスが範囲を超えるとエラー
になる。例: >
	:let l = mylist[:3]		" 最初の4個の要素
	:let l = mylist[4:4]		" 1個の要素からなるリスト
	:let l = mylist[:]		" リストの浅いコピー

|Funcref|に対してexpr8[expr1]やexpr8[expr1a : expr1b]を使うとエラーになる。


expr8.name		辞書|Dictionary|の要素		*expr-entry*

expr8が辞書|Dictionary|のとき、ドットをつけるとその後に書かれた名前が辞書のキ
ーと見なされる。例: expr8[name]。

名前は変数名と同じようにアルファベットと数字だけから構成されなければならない
が、数字で始まってもよい。波括弧は使えない。

ドットの前後に空白があってはならない。

例: >
	:let dict = {"one": 1, 2: "two"}
	:echo dict.one
	:echo dict .2

Note ドットは文字列連結にも使われる。混乱を避けるために、文字列連結のドットの
周りには必ずスペースを入れること。


expr8(expr1, ...)	|Funcref| 関数呼び出し

expr8が|Funcref|型の変数のとき、その参照する関数を呼び出す。



							*expr9*
数
------
number			数定数			*expr-number*

10進数、16進数(0xか0Xで始まる)、もしくは8進数(0で始まる)の数定数。


文字列							*expr-string* *E114*
------
"string"		文字列定数		*expr-quote*

ダブルクォートが使われていることに注意。

文字列定数には以下の特殊文字が使用できる: 
\...	3桁の8進数字 (例 "\316")
\..	2桁の8進数字 (非数字が続かなければならない)
\.	1桁の8進数字 (非数字が続かなければならない)
\x..	2桁の16進数字 (例 "\x1f")
\x.	1桁の16進数字 (16進数字でないものが続かなければならない)
\X..	\x..に同じ
\X.	\x.に同じ
\u....  文字を4桁の16進数で表現したもので、実際の値は現在の'encoding'の値に依
	存する (例えば "\u02a4")
\U....	\u....に同じ
\b	バックスペース <BS>
\e	エスケープ <Esc>
\f	フォームフィード <FF>
\n	改行 <NL>
\r	改行(キャリッジリターン) <CR>
\t	タブ <Tab>
\\	円記号(バックスラッシュ)
\"	ダブルクォート
\<xxx>	"xxx"という名の特殊キー。 例 "\<C-W>" は CTRL-W.

Note "\xff"は値255の1バイトとなる。これはエンコーディングによっては無効な値か
もしれない。現在の'encoding'の値に応じた文字255を得るには"\u00ff"を使う。

Note "\000"と"\x00"は強制的に文字列の終端として扱われる。


リテラル文字列						*literal-string* *E115*
---------------
'string'		文字列定数		*expr-'*

Note シングルクォートが使われていることに注意。

この文字列は文字通りに扱われる。バックスラッシュは取り除かれないし、また特別な
意味を持ったりもしない。唯一の例外は、2つのシングルクォートで1つのシングルクォ
ートになることである。

シングルクォートの文字列は、バックスラッシュを2重にしなくてよいため、正規表現
パターンを表すのに便利である。以下の2つのコマンドは同値である: >
	if a =~ "\\s*"
	if a =~ '\s*'


オプション					*expr-option* *E112* *E113*
------
&option			オプション変数、ローカルなものが優先
&g:option		グローバルオプション変数
&l:option		ローカルオプション変数

例: >
	echo "タブストップは " . &tabstop . " です"
	if &insertmode

ここにはあらゆるオプション名を使うことができる。|options|を参照。ローカル変数
を使おうとして、実際にはバッファローカルもウィンドウローカルも存在しない場合に
は、グローバル変数が利用される。


レジスタ						*expr-register* *@r*
--------
@r			レジスタ'r'の値

名前付きレジスタの中身を1つの文字列として得る。必要なところには改行文字が挿入
されている。無名レジスタの中身を取得するには@"か@@を使う。利用可能なレジスタの
説明については|registers|を参照。

レジスタ'='を使うと、式の値でなく式そのものを得る。それを評価するには|eval()|
を使う。


入れ子							*expr-nesting* *E110*
-------
(expr1)			式の入れ子


環境変数						*expr-env*
--------------------
$VAR			環境変数

環境変数の文字列。定義されていない環境変数を指定した場合、結果は空文字列。
							*expr-env-expand*
Note $VARを直接使用した場合とexpand("$VAR")を使用した場合では、動作に違いがあ
ることに注意。直接使用した場合には、現在のVimのセッション中で既知の値に展開さ
れるだけである。expand()を使用した場合、まず最初にVimのセッション中で既知の値
に展開される。それが失敗した場合、変数の展開にシェルが使用されることになる。こ
れは遅くはなるが、シェルの知りうる総ての変数を展開することができる。例: >
	:echo $version
	:echo expand("$version")
最初の一つは恐らく何も返ってこず、2つ目は$versionの値が返ってくるだろう(貴方の
シェルがサポートしていたとして)


内部変数						*expr-variable*
-----------------
variable		内部変数
以下の|internal-variables|を参照。


関数呼出		*expr-function* *E116* *E118* *E119* *E120*
-------------
function(expr1, ...)	関数呼出
以下の|functions|を参照。


==============================================================================
3. 内部変数					*internal-variables* *E121*
									*E461*
内部変数の名前には文字と、数字とアンダーバー('_')を使うことができる。しかし数
字で始めることはできない。波括弧を使うこともできる。
詳細は|curly-braces-names|を参照。

内部変数は":let"コマンドで作成される|:let|。":unlet"コマンドで明示的に内部変数
を破棄することができる|:unlet|。内部変数に使われてない名前か、既に破棄された内
部変数を使うとエラーとなる。

変数には幾つもの名前空間が存在する。実際にどれが利用されるかは、どのような前置
子が使われたかで決まる:

		(無し) 関数の中では関数ローカル、それ以外ではグローバル
|buffer-variable|    b:	  現在のバッファにローカル
|window-variable|    w:	  現在のウィンドウにローカル
|tabpage-variable|   t:	  現在のタブページにローカル
|global-variable|    g:	  グローバル
|local-variable|     l:	  関数にローカル
|script-variable|    s:	  |:source|されたVimスクリプトにローカル
|function-argument|  a:	  関数の引数(関数内のみ)
|vim-variable|       v:	  グローバル、Vimがあらかじめ定義

これらのスコープそのものに辞書を通じてアクセスできる。例えば、全てのスクリプト
ローカル変数を削除するには次のようにする: >
	:for k in keys(s:)
	:    unlet s:[k]
	:endfor
<
						*buffer-variable* *b:var*
"b:"で始まる変数名は、カレントバッファに局所的な変数を意味する。このように一つ
一つのバッファ毎に、変数"b:foo"を別々に使用することができる。この種の変数は
バッファが掃除(wipe out)された時や、":bdelete"で削除された時に一緒に削除され
る。

1つのバッファローカル変数が定義済:
					*b:changedtick-variable* *changetick*
b:changedtick	現在のバッファに対する総変更の回数。変更を行うたびに増加する。
		これには一回のアンドゥ操作もカウントされる。この変数はバッファ
		に変更が行われた際にだけアクションを起こしたい時に利用できる。
		例: >
		    :if my_changedtick != b:changedtick
		    :   let my_changedtick = b:changedtick
		    :   call My_Update()
		    :endif
<
						*window-variable* *w:var*
"w:"で始まる変数名は、カレントウィンドウにローカルな変数を意味する。これはウィ
ンドウを閉じるときに破棄される。

						*tabpage-variable* *t:var*
"t:"で始まる変数名は、カレントタブページにローカルな変数を意味する。これはタブ
ページを閉じるときに破棄される。{+windows 機能つきでコンパイルしたときのみ利用
可能}

						*global-variable* *g:var*
関数の中からグローバル変数へアクセスするには、"g:"を付けた名前を使用する。これ
が省略された場合は関数ローカルな変数にアクセスする。ただし"g:"自体は、関数の外
でも使うことができる。

						*local-variable* *l:var*
関数の中からそのローカル変数にアクセスするには何も前置しなければ良い。明示的に
"l:"を付けることも可能である。ただし"l:"をつけないと予約されている変数名と衝突
してしまうことがある。例: "count"とすると"v:count"を参照してしまう。"l:count"
とすればローカル変数countを参照できる。

						*script-variable* *s:var*
Vimスクリプト内では"s:"で始まる変数名を使うことができる。これはスクリプトにつ
いてローカルであり、スクリプトの外部からはアクセスできない。

スクリプトローカル関数は次の中で使われる:
- そのスクリプトをsourceしている間に実行されるコマンド
- そのスクリプト内で定義される関数
- そのスクリプト内で定義されるオートコマンド
- そのスクリプト内で定義される関数やオートコマンドで定義される関数やオートコマ
  ンド(再帰的)
- そのスクリプト内で定義されるユーザ定義コマンド
次の場面では使えない:
- そのスクリプトからsourceされる他のスクリプト
- マッピング
- など。

グローバル変数との衝突を避けるにはスクリプト変数を使う。
次の例を参照: >

	let s:counter = 0
	function MyCounter()
	  let s:counter = s:counter + 1
	  echo s:counter
	endfunction
	command Tick call MyCounter()

ここで他のスクリプトから"Tick"を実行してみると、そのスクリプト内の変数
"s:counter"は変化せず、"Tick"が定義されたスクリプト内の"s:counter"だけが変化す
る。

これと同じことをするもう1つの例: >

	let s:counter = 0
	command Tick let s:counter = s:counter + 1 | echo s:counter

関数呼び出しやユーザ定義コマンドを実行するとき、スクリプト変数のコンテキストは
その関数、コマンドが定義されたスクリプトとなる。

関数の中で関数を定義した場合、スクリプト変数も共有される。例: >

	let s:counter = 0
	function StartCounting(incr)
	  if a:incr
	    function MyCounter()
	      let s:counter = s:counter + 1
	    endfunction
	  else
	    function MyCounter()
	      let s:counter = s:counter - 1
	    endfunction
	  endif
	endfunction

このStartCounting()を呼ぶと、カウントアップかカウントダウンのどちらかを行う関
数MyCounter()を定義する。StartCounting()がどこで呼ばれたかに関係なく、
MyCounter()の中では変数s:counterにアクセスできる。

同じスクリプトが再度読み込まれた場合、同一のスクリプト変数が使われる。スクリプ
ト変数はVimが終了するまで存続する。以下の例はカウンタを保持する: >

	if !exists("s:counter")
	  let s:counter = 1
	  echo "script executed for the first time"
	else
	  let s:counter = s:counter + 1
	  echo "script executed " . s:counter . " times now"
	endif

Note これはつまり、ファイルタイププラグインはバッファごとにスクリプト変数を1セッ
ト持つのではないということを意味する。そのような目的にはバッファローカル変数
|b:var|を使うこと。


Vimの定義済変数:				*vim-variable* *v:var*

					*v:beval_col* *beval_col-variable*
v:beval_col	マウスポインタがある桁の桁番号。|v:beval_lnum|行目のバイトイン
		デックスである。オプション'balloonexpr'を評価している最中のみ
		有効。

					*v:beval_bufnr* *beval_bufnr-variable*
v:beval_bufnr	マウスポインタがあるバッファの番号。オプション'balloonexpr'を
		評価している最中のみ有効。

					*v:beval_lnum* *beval_lnum-variable*
v:beval_lnum	マウスポインタがある行の行番号。オプション'balloonexpr'を
		評価している最中のみ有効。

					*v:beval_text* *beval_text-variable*
v:beval_text	マウスポインタの下もしくは後ろにあるテキスト。Cプログラムのデ
		バッグのために有用。'iskeyword'が適用されるが、マウスポインタ
		の下より前にあるドットと"->"は含まれる。マウスポインタが']'の
		上にあるときは、そこから対応する'['とその前にあるテキストまで
		が含まれる。マウスポインタが1行に収まるビジュアル領域の上にあ
		るときはその選択領域となる。オプション'balloonexpr'を評価して
		いる最中のみ有効。

					*v:beval_winnr* *beval_winnr-variable*
v:beval_winnr	マウスポインタがあるウィンドウの番号。オプション'balloonexpr'を評価して
		いる最中のみ有効。

					*v:char* *char-variable*
v:char		'formatexpr'を評価しているときの引数。

			*v:charconvert_from* *charconvert_from-variable*
v:charconvert_from
		変換しようとしているファイルの文字エンコーディング名。オプショ
		ン'charconvert'を評価している最中のみ有効。

			*v:charconvert_to* *charconvert_to-variable*
v:charconvert_to
		変換後のファイルの文字エンコーディング名。オプション
		'charconvert'を評価している最中のみ有効。

					*v:cmdarg* *cmdarg-variable*
v:cmdarg	2つの目的のために使われる:
		1. ファイルの読み書きコマンドに与えられる余分な引数。現在のと
		   ころ"++enc="と"++ff="がそれである。読み書きコマンドに対する
		   オートコマンドイベントが発生する前にこの変数が代入される。
		   その読み書きコマンドの後に直接この変数を連結できるように、
		   先頭にスペースがついている。Note: ここには"+cmd"引数は含ま
		   れていない。どちらにしろそれは実行されるからである。
		2. ":hardcopy"でPostScriptファイルを印刷するとき、これが
		   ":hardcopy"への引数になる。'printexpr'の中で使うことができ
		   る。

					*v:cmdbang* *cmdbang-variable*
v:cmdbang	v:cmdargと同じく読み書きコマンドを実行したとき設定される。読み
		書きコマンドに"!"が使われたときは1となり、使われていなければ0
		となる。Note オートコマンドの中でのみ利用可能なことに注意。ユー
		ザ定義コマンドでは|<bang>|を使えば同じことができる。

 					*v:count* *count-variable*
v:count		最後に実行されたノーマルモードコマンドに渡されたコマンドの実行
		回数を返す。読出し専用。使用例: >
	:map _x :<C-U>echo "the count is " . count<CR>
<		Note: <C-U>は、カウントの後に':'をタイプした時に示される、行範
		囲指定を削除するために必要となる。
		オプション'formatexpr'を評価するためにも使われる。
		また"count"は、以前の版のVimとの互換性の為に動作する。

					*v:count1* *count1-variable*
v:count1	"v:count"と同じように、しかしカウントが指定されなかった時の省
		略値として存在する。

						*v:ctype* *ctype-variable*
v:ctype		文字に関する実行環境の現在のロケール設定。これを使えばVim
		スクリプト内で現在のロケール設定に対応できるようになる。技術的
		な詳細: LC_CTYPEに等しい。ロケールを使用していないときは"C"に
		なる。
		この変数を設定するには|:language|コマンドを使うこと。直接設定
		することはできない。
		|multi-lang|を参照。

					*v:dying* *dying-variable*
v:dying		通常時は0。致命的なシグナルを受信したとき1が代入される。複数
		のシグナルを受信すると値が増加していく。オートコマンド内でVim
		が正常に終了するかチェックするために使える。{Unix でのみ動作}
		例: >
	:au VimLeave * if v:dying | echo "\nAAAAaaaarrrggghhhh!!!\n" | endif
<
					*v:errmsg* *errmsg-variable*
v:errmsg	最後に表示されたエラーメッセージ。この変数は代入することが許
		されている。例: >
	:let errmsg = ""
	:next
	:if (errmsg != "")
	:  ...
<		また"errmsg"は、以前の版のVimとの互換性の為に動作する。

					*v:exception* *exception-variable*
v:exception	最も直近に捕捉され、まだ終了していない例外の値。
		|v:throwpoint|と|throw-variables|を参照。
		例: >
	:try
	:  throw "oops"
	:catch /.*/
	:  echo "caught" v:exception
	:endtry
<		出力: "caught oops".

					*v:fcs_reason* *fcs_reason-variable*
v:fcs_reason	|FileChangedShell|イベントが発生した理由。オートコマンドの中で
		何をすべきかやv:fcs_choiceに何を代入すべきかを決めるために使う。
		値は次のどれかとなる:
			deleted		もはやファイルが存在しない
			conflict	ファイルの内容、モード、タイムスタンプ
					が変化しており、バッファが変更されてい
					る状態。
			changed		ファイルの内容が変化している
			mode		ファイルのモードが変化している
			time		タイムスタンプだけが変化している

					*v:fcs_choice* *fcs_choice-variable*
v:fcs_choice	|FileChangedShell|イベントが発生した後に何をすべきかを表す。
		オートコマンドの中で、そのバッファに対して何をすべきかを指示す
		るために使う。
			reload		バッファを読み直す(バッファが削除され
					ている場合には効果がない)。
			ask		何をすべきかをユーザに問い合わせる。こ
					れはこのオートコマンドがない場合と同じ
					である。ただしタイムスタンプだけが変化
					しているときは何もしない。
			<empty>		何もしない。オートコマンドの中だけで必
					要なことは全て行ってしまっているという
					場合にこの値を代入する。
		既定値は<empty>。これら意外の(無効な)値が代入されたときは空の
		ときと同じ動作になり、警告メッセージは表示されない。

					*v:fname_in* *fname_in-variable*
v:fname_in	入力ファイルの名前。以下のオプションを評価している最中のみ
		有効:
			オプション	このファイル名の意味 ~
			'charconvert'	変換するファイル
			'diffexpr'	元のファイル
			'patchexpr'	元のファイル
			'printexpr'	印刷するファイル
		また、オートコマンドイベント|SwapExists|が発生したときスワップ
		ファイル名が代入される。

					*v:fname_out* *fname_out-variable*
v:fname_out	出力ファイルの名前。以下のオプションを評価している最中のみ
		有効:
			オプション	このファイル名の意味 ~
			'charconvert'	変換した結果のファイル (*)
			'diffexpr'	diffの出力
			'patchexpr'	パッチを当てた結果のファイル
		(*) 書き込みコマンド(":w file"など)を実行する際の変換では
		v:fname_inと同じになる。読み込みコマンド(":e file"など)を実行
		する際の変換では一時ファイル名になり、v:fname_inと異なる。

					*v:fname_new* *fname_new-variable*
v:fname_new	新しい方のファイル名。'diffexpr'を評価している最中のみ有効。

					*v:fname_diff* *fname_diff-variable*
v:fname_diff	diff(patch)ファイルの名前。'patchexpr'を評価している最中のみ有
		効。

					*v:folddashes* *folddashes-variable*
v:folddashes	'foldtext'用。閉じた折り畳みのレベルを表すダッシュ。
		サンドボックス|sandbox|の中では読出し専用。|fold-foldtext|

					*v:foldlevel* *foldlevel-variable*
v:foldlevel	'foldtext'用。閉じた折り畳みのレベル。
		サンドボックス|sandbox|の中では読出し専用。|fold-foldtext|

					*v:foldend* *foldend-variable*
v:foldend	'foldtext'用。閉じた折り畳みの最後の行。
		サンドボックス|sandbox|の中では読出し専用。|fold-foldtext|

					*v:foldstart* *foldstart-variable*
v:foldstart	'foldtext'用。閉じた折り畳みの最初の行。
		サンドボックス|sandbox|の中では読出し専用。|fold-foldtext|

					*v:insertmode* *insertmode-variable*
v:insertmode	オートコマンドイベント|InsertEnter|と|InsertChange|用。
		値は次のどれか:
			i	インサートモード
			r	置換モード
			v	ビジュアル置換モード

						*v:key* *key-variable*
v:key		辞書|Dictionary|の現在の要素のキー。|map()|と|filter()|で使わ
		れる式を評価している最中のみ有効。
		読出し専用。

						*v:lang* *lang-variable*
v:lang		メッセージに関する実行環境の現在のロケール設定。これを使えば
		Vimスクリプト内で現在のロケール設定に対応できるようになる。
		技術的な詳細: LC_MESSAGESに等しい。この値はシステムに依存する。
		この変数を設定するには|:language|コマンドを使うこと。直接設定
		することはできない。
		文字エンコーディングに使うのと違う言語でメッセージを表示させた
		い場合は|v:ctype|と異なる値でもよい。|multi-lang|を参照。

						*v:lc_time* *lc_time-variable*
v:lc_time	時刻のメッセージに関する実行環境の現在のロケール設定。これを使
		えばVimスクリプト内で現在のロケール設定に対応できるようになる。
		技術的な詳細: LC_TIMEに等しい。この値はシステムに依存する。こ
		の変数を設定するには|:language|コマンドを使うこと。直接設定す
		ることはできない。

						*v:lnum* *lnum-variable*
v:lnum		'foldexpr'と'indentexpr'に使うための行番号。また'guitablabel'
		と'guitabtooltip'の文脈ではタブページ番号になる。これらの式のど
		れかを評価しているときのみ有効。サンドボックス|sandbox|の中で
		は読出し専用。

					*v:mouse_win* *mouse_win-variable*
v:mouse_win	|getchar()|でマウスクリックイベントを取得したとき、この変数に
		ウィンドウ番号が代入されている。|winnr()|と同じく番号は1から始
		まる。マウスがクリックされなかったときは0となる。

					*v:mouse_lnum* *mouse_lnum-variable*
v:mouse_lnum	|getchar()|でマウスクリックイベントを取得したとき、この変数に
		行番号が代入されている。物理行ではなく論理行。マウスがクリック
		されていないときは0となる。

					*v:mouse_col* *mouse_col-variable*
v:mouse_col	|getchar()|でマウスクリックイベントを取得したとき、この変数に
		桁番号が代入されている。|virtcol()|と同じく画面上の桁番号。マ
		ウスがクリックされていないときは0となる。

					*v:prevcount* *prevcount-variable*
v:prevcount	最後のノーマルモードコマンドに与えられたカウントの値。前のコマ
		ンドのv:countの値である。ビジュアルモードをキャンセルし、その
		後にカウントを使う場合に便利である。例: >
			:vmap % <Esc>:call MyFilter(v:prevcount)<CR>
<		読出し専用。

					*v:profiling* *profiling-variable*
v:profiling	通常時は0。":profile start"を実行すると1が代入される。
		|profiling|を参照。

					*v:progname* *progname-variable*
v:progname	Vimを起動したときのプログラム名(パスは除かれる)。"view"、
		"evim"などの名前やシンボリックリンクなどで起動した場合に特別な
		初期化を行うのに便利。
		読出し専用。

					*v:register* *register-variable*
v:register	最後のノーマルモードコマンドに指定されたレジスタの名前。レジス
		タが指定されなかったときは空。|getreg()| |setreg()|

					*v:scrollstart* *scrollstart-variable*
v:scrollstart	画面のスクロールの原因となったスクリプトや関数を説明する
		文字列。空であるときのみ代入される。よってこの変数には最初の原
		因だけが記録されている。原因がキーボードから入力されたコマンド
		の場合は"Unknown"が代入される。
		スクリプトを実行したとき現れたhit-enterプロンプトの原因を探る
		ために便利。

					*v:servername* *servername-variable*
v:servername	|x11-clientserver|に登録されている名前。
		読出し専用。

			    		*v:shell_error* *shell_error-variable*
v:shell_error	最後に実行したシェルコマンドの結果。シェルコマンドの実行時にな
		にかエラーがあったならば、非零の値を取る。問題がなければ零にな
		る。これはシェルがエラーコードをVimに通知する時のみ働く。コマ
		ンドが実行されなかった時には、値として-1が良く使われる。読出し
		専用。
		例: >
	:!mv foo bar
	:if v:shell_error
	:  echo 'could not rename "foo" to "bar"!'
	:endif
<		また"shell_error"は、以前の版のVimとの互換性の為に動作する。

					*v:statusmsg* *statusmsg-variable*
v:statusmsg	最後に表示されたステータスメッセージ。この変数は代入すること
		が許されている。

					*v:swapname* *swapname-variable*
v:swapname	オートコマンド|SwapExists|を実行している最中のみ有効。見つかっ
		たスワップファイルの名前。読出し専用。

					*v:swapchoice* *swapchoice-variable*
v:swapchoice	イベント|SwapExists|により実行されたオートコマンドが、見つかっ
		たスワップファイルをどう処理するかをこの変数に代入する。
			'o'	読込専用で開く
			'e'	とにかく編集する
			'r'	復活させる
			'd'	スワップファイルを削除する
			'q'	終了する
			'a'	中止する
		この変数の値は1文字の文字列でなければならない。値が空のときは
		オートコマンドSwapExistsが存在しないときと同じようにユーザに問
		い合わせる。既定値は空。

					*v:swapcommand* *swapcommand-variable*
v:swapcommand	ファイルを開いた後に実行するノーマルモードコマンド。オートコマ
		ンド|SwapExists|で、他のVimインスタンスにファイルを開かせ、指
		定位置までジャンプするために使うことができる。例えば、あるタグ
		へジャンプするには、この変数に":tag tagname\r"という値を代入す
		る。":edit +cmd file"を実行させるには":cmd\r"を代入する。

				*v:termresponse* *termresponse-variable*
v:termresponse	termcapのエントリ|t_RV|で端末から返されるエスケープシーケン
		ス。ESC [またはCSIで始まり、途中数字と';'と'.'だけから構成され
		'c'で終わるエスケープシーケンスを受け取ったとき代入される。
		このオプションがセットされるとオートコマンドイベント
		TermResponseが発生し、端末からの応答に反応することができる。
		新しいxtermからの応答は次の形式である:
		 "<Esc>[ Pp ; Pv ; Pc c"。ここでPpは端末のタイプ: 0ならvt100、
		 1ならvt220。Pvはパッチレベル(パッチ95で導入されたため常
		 に95以上)。Pcは常に0。
		{Vi mが|+termresponse|機能付きでコンパイルされたときのみ有効}

				*v:this_session* *this_session-variable*
v:this_session	最後にロードされたか、セーブされたセッションファイルの完全な
		ファイル名。|:mksession|を参照。この変数は代入することが許さ
		れている。それ以前にセーブされたセッションがなければ、この変数
		は空となる。
		また"this_session"は、以前の版のVimとの互換性の為に動作する。

					*v:throwpoint* *throwpoint-variable*
v:throwpoint	最も直近に捕捉されてまだ終了していない例外が発生した位置。キー
		ボードから入力されたコマンドは記録されていない。|v:exception|
		と|throw-variables|も参照。
		例: >
	:try
	:  throw "oops"
	:catch /.*/
	:  echo "Exception from" v:throwpoint
	:endtry
<		出力: "Exception from test.vim, line 2"

						*v:val* *val-variable*
v:val		辞書|Dictionary|の現在の要素の値。|map()|と|filter()|で使わ
		れる式を評価している最中のみ有効。
		読出し専用。

				*v:version* *version-variable*
v:version	Vimのバージョン番号。メジャーバージョン番号は100倍され、マイ
		ナーバージョン番号と足されている。Version 5.0は500。Version
		5.1 (5.01)は501となる。読出し専用。また"version"は、以前の版の
		Vimとの互換性の為に動作する。
		特定のパッチが摘要されているかを調べるには|has()|を使う。例: >
			if has("patch123")
<		5.0と5.1には両方ともパッチ123が存在しているが、バージョンが違
		えば番号は同じでもパッチの内容は全く異なっている。

					*v:warningmsg* *warningmsg-variable*
v:warningmsg	最後に表示された警告メッセージ。この変数は代入することが許され
		ている。

==============================================================================
4. 組み込み関数						*functions*

(関数名の上でCTRL-]を使うことで、詳細な説明へ飛ぶことができる)

使用法				結果	説明		~

add( {list}, {item})		リスト	{item}をリスト{list}に追加する
append( {lnum}, {string})	数値	{string}を{lnum}行目に付け加える
append( {lnum}, {list})		Number	行{list}を{lnum}行目に付け加える
argc()				数値	引数内のファイルの数
argv( {nr})			文字列	引数の第{nr}番目
argv( )				リスト	引数リスト
browse( {save}, {title}, {initdir}, {default})
				文字列	ファイル選択ダイアログを表示
browsedir( {title}, {initdir})  文字列	ディレクトリ選択ダイアログを表示
bufexists( {expr})		数値	バッファ{expr}が存在すればTRUE
buflisted( {expr})		数値	バッファ{expr}がリストにあるならTRUE
bufloaded( {expr})		数値	バッファ{expr}がロード済みならTRUE
bufname( {expr})		文字列	バッファ{expr}の名前
bufnr( {expr})			数値	バッファ{expr}の番号
bufwinnr( {nr})			数値	バッファ{nr}のウィンドウ番号
byte2line( {byte})		数値	{byte}番目のバイトの行番号
byteidx( {expr}, {nr})		数値	{expr}の{nr}文字目のバイトインデックス
call( {func}, {arglist} [, {dict}])
				任意	引数{arglist}をつけて{func}を呼ぶ
changenr()			数値	現在の変更番号
char2nr( {expr})		数値	{expr}の先頭文字のASCIIコード
cindent( {lnum})		数値	{lnum}行目のCインデント量
col( {expr})			数値	カーソルかマークのカラム番号nr
complete({startcol}, {matches})	文字列  インサートモード補完の結果を設定する
complete_add( {expr})		数値	補完候補を追加する
complete_check()		数値	補完中に押されたキーをチェックする
confirm( {msg}, {choices} [, {default} [, {type}]])
				数値	ユーザへの選択肢と番号
copy( {expr})			任意	{expr}の浅いコピーを作る
count( {list}, {expr} [, {start} [, {ic}]])
				数値	 {list}中に{expr}が何個現れるか数える
cscope_connection( [{num} , {dbpath} [, {prepend}]])
				数値	cscope接続の存在を判定する
cursor( {lnum}, {col} [, {coladd}])
				数値	カーソルを{lnum}, {col}, {coladd}へ移動
cursor( {list})			数値	カーソルを{list}の位置へ移動
deepcopy( {expr})		任意	{expr}の完全なコピーを作る
delete( {fname})		数値	ファイル{fname}を消す
did_filetype()			数値	FileTypeのautocommandが実行されたか?
diff_filler( {lnum})		数値	diffモードで{lnum}に挿入された行
diff_hlID( {lnum}, {col})	数値	diffモードで{lnum}/{col}位置の強調
empty( {expr})			数値	{expr}が空ならTRUE
escape( {string}, {chars})	文字列	{string}内の{chars}を'\'でエスケープ
eval( {string})			任意	{string}を評価し、値を得る
eventhandler( )			数値	イベントハンドラの内側ならTRUE
executable( {expr})		数値	実行可能な{expr}が存在するなら1
exists( {var})			数値	変数{var}が存在したらTRUE
extend({expr1}, {expr2} [, {expr3}])
				リスト/辞書 {expr1}に{expr2}の要素を挿入
expand( {expr})			文字列	{expr}内の特別なキーワードを展開
feedkeys( {string} [, {mode}])	数値	先行入力バッファにキーシーケンスを追加
filereadable( {file})		数値	{file}が読みこみ可能ならTRUE
filewritable( {file})		Number	{file}が書き込み可能ならTRUE
filter( {expr}, {string})	リスト/辞書  {string}が0となる要素を{expr}から
					とり除く
finddir( {name}[, {path}[, {count}]])
				文字列	{path}からディレクトリ{name}を探す
findfile( {name}[, {path}[, {count}]])
				文字列	{path}からファイル{name}を探す
fnamemodify( {fname}, {mods})	文字列	ファイル名を変更
foldclosed( {lnum})		数値	{lnum}の折り畳みの最初の行(閉じている
					なら)
foldclosedend( {lnum})		数値	{lnum}の折り畳みの最後の行(閉じている
					なら)
foldlevel( {lnum})		数値	{lnum}の折り畳みレベル
foldtext( )			文字列	閉じた折り畳みに表示されている行
foldtextresult( {lnum})		文字列	{lnum}で閉じている折り畳みのテキスト
foreground( )			数値	Vimウィンドウを前面に移動する
function( {name})		Funcref 関数{name}への参照を取得
garbagecollect()		なし	メモリを解放する。循環参照を断ち切る
get( {list}, {idx} [, {def}])	任意	{list}や{def}から要素{idx}を取得
get( {dict}, {key} [, {def}])	任意	{dict}や{def}から要素{key}を取得
getbufline( {expr}, {lnum} [, {end}])
				リスト	バッファ{expr}の{lnum}から{end}行目
getbufvar( {expr}, {varname})	任意	バッファ{expr}の変数 {varname}
getcmdline()			文字列	現在のコマンドラインを取得
getcmdpos()			数値	コマンドラインのカーソル位置を取得
getcmdtype()			文字列	現在のコマンドラインの種類を取得
getcwd()			文字列	現在の作業ディレクトリ
getfperm( {fname})		文字列	ファイル{fname}の許可属性を取得
getfsize( {fname})		数値	ファイル{fname}のバイト数を取得
getfontname( [{name}])		文字列	使用しているフォントの名前
getftime( {fname})		数値	ファイルの最終更新時間
getftype( {fname})		文字列	ファイル{fname}の種類の説明
getline( {lnum})		文字列	現在のバッファから行の内容を取得
getline( {lnum}, {end})		リスト	カレントバッファの{lnum}から{end}行目
getloclist({nr})		リスト	ロケーションリストの要素のリスト
getpos( {expr})			リスト	カーソル・マークなどの位置を取得
getqflist()			リスト	quickfixリストの要素のリスト
getreg( [{regname} [, 1]])	文字列	レジスタの中身を取得
getregtype( [{regname}])	文字列	レジスタの種類を取得
gettabwinvar( {tabnr}, {winnr}, {name})
				任意	タブページ{tabnr}の{winnr}の{name}
getwinposx()			数値	GUI vim windowのX座標
getwinposy()			数値	GUI vim windowのY座標
getwinvar( {nr}, {varname})	文字列	ウィンドウ{nr}の変数{varname}
glob( {expr} [, {flag}])	文字列	{expr}内のfile wildcardを展開
globpath( {path}, {expr})	文字列	{path}の全ディレクトリに対し
					glob({expr})を行う
has( {feature})			数値	機能{feature}がサポートならばTRUE
has_key( {dict}, {key})		数値	{dict}が要素{key}を持つならTRUE
haslocaldir()			数値	現在のウィンドウで|:lcd|が実行された
					ならTRUE
hasmapto( {what} [, {mode} [, {abbr}]])
				数値	{what}へのマッピングが存在するならTRUE
histadd( {history},{item})	文字列	ヒストリに追加
histdel( {history} [, {item}])	文字列	ヒストリからitemを削除
histget( {history} [, {index}])	文字列	ヒストリから{index}アイテムを取得
histnr( {history})		数値	ヒストリの数
hlexists( {name})		数値	highligth group {name}が存在したらTRUE
hlID( {name})			数値	highlight group {name}のID
hostname()			文字列	vimが動作しているマシンの名前
iconv( {expr}, {from}, {to})	文字列	{expr}のエンコーディングを変換する
indent( {lnum})			文字列	行{lnum}のインデントを取得
index( {list}, {expr} [, {start} [, {ic}]])
				数値	{list}中に{expr}が現れる位置
input( {prompt} [, {text} [, {completion}]])
				文字列	ユーザからの入力を取得
inputdialog( {p} [, {t} [, {c}]]) 文字列  input()と同様。GUIのダイアログを使用
inputlist( {textlist})		数値	ユーザに選択肢から選ばせる
inputrestore()			数値	先行入力を復元する
inputsave()			数値	先行入力を保存し、クリアする
inputsecret( {prompt} [, {text}]) 文字列  input()だがテキストを隠す
insert( {list}, {item} [, {idx}]) リスト  {list}に要素{item}を挿入 [{idx}の前]
isdirectory( {directory})	数値	{directory}がディレクトリならばTRUE
islocked( {expr})		数値	{expr}がロックされているならTRUE
items( {dict})			リスト	{dict}のキーと値のペアを取得
join( {list} [, {sep}])		文字列	{list}の要素を連結して文字列にする
keys( {dict})			リスト	{dict}のキーを取得
len( {expr})			数値	{expr}の長さを取得
libcall( {lib}, {func}, {arg}	文字列	ライブラリ{lib}の関数{func}をコール
libcallnr( {lib}, {func}, {arg})  数値  上と同じ。ただし数値を返す
line( {expr})			数値	行番号の取得
line2byte( {lnum})		数値	行{lnum}のバイトカウント
lispindent( {lnum})		数値	{lnum}行目のLispインデント量を取得
localtime()			数値	現在時刻
map( {expr}, {string})		リスト/辞書  {expr}の各要素を{expr}に変える
maparg( {name}[, {mode} [, {abbr}]])
				文字列	モード{mode}でのマッピング{name}の値
mapcheck( {name}[, {mode} [, {abbr}]])
				文字列	{name}にマッチするマッピングを確認
match( {expr}, {pat}[, {start}[, {count}]])
				数値	{expr}内で{pat}がマッチする位置
matcharg( {nr})			リスト	|:match|の引数
matchend( {expr}, {pat}[, {start}[, {count}]])
				数値	{expr}内で{pat}が終了する位置
matchlist( {expr}, {pat}[, {start}[, {count}]])
				リスト	{expr}内の{pat}のマッチと部分マッチ
matchstr( {expr}, {pat}[, {start}[, {count}]])
				文字列	{expr}内の{count}'番目の{pat}のマッチ
max({list})			数値	{list}内の要素の最大値
min({list})			数値	{list}内の要素の最小値
mkdir({name} [, {path} [, {prot}]])
				数値	ディレクトリ{name}を作成
mode()				文字列	現在の編集モード
nextnonblank( {lnum})		数値	{lnum}行目以降で空行でない行の行番号
nr2char( {expr})		文字列	ASCIIコード{expr}で示されるキャラクタ
pathshorten( {expr})		文字列	path内の短縮したディレクトリ名
prevnonblank( {lnum})		数値	{lnum}行目以前の空行でない行の行番号
printf( {fmt}, {expr1}...)	文字列  文字列を組み立てる
pumvisible()			数値    ポップアップメニューが表示されているか
range( {expr} [, {max} [, {stride}]])
				リスト	{expr}から{max}までの要素のリスト
readfile({fname} [, {binary} [, {max}]])
				リスト	ファイル{fname}から行のリストを取得
reltime( [{start} [, {end}]])	リスト	時刻の値を取得
reltimestr( {time})		文字列	時刻の値を文字列に変換
remote_expr( {server}, {string} [, {idvar}])
				文字列	式を送信する
remote_foreground( {server})	数値	Vimサーバを前面に出す
remote_peek( {serverid} [, {retvar}])
				数値	返信文字列を確認する
remote_read( {serverid})	文字列	返信文字列を読み込む
remote_send( {server}, {string} [, {idvar}])
				文字列	キーシーケンスを送信する
remove( {list}, {idx} [, {end}])  任意	{list}から{idx}〜{end}の要素を削除
remove( {dict}, {key})		任意	{dict}から要素{key}を削除
rename({from}, {to})		数値	{file}から{to}へファイル名変更
repeat( {expr}, {count})	文字列	{expr}を{count}回繰り返す
resolve( {filename})		文字列	ショートカットが指す先のファイル名
reverse( {list})		文字列	{list}をその場で反転させる
search( {pattern} [, {flags}])	数値	{pattern}を検索する
searchdecl({name} [, {global} [, {thisblock}]])
				数値    変数の宣言を検索
searchpair( {start}, {middle}, {end} [, {flags} [, {skip} [, {stopline}]]])
				数値	開始/終端のペアの他方を検索
searchpairpos( {start}, {middle}, {end} [, {flags} [, {skip} [, {stopline}]]])
				リスト	開始/終端のペアの他方を検索
searchpos( {pattern} [, {flags} [, {stopline}]])
				リスト	{pattern}を検索
server2client( {clientid}, {string})
				数値	返信文字列を送信する
serverlist()			文字列	利用可能なサーバのリストを取得
setbufvar( {expr}, {varname}, {val})	バッファ{expr}内の変数{varname}に{val}
					をセット
setcmdpos( {pos})		数値	コマンドライン内のカーソル位置を設定
setline( {lnum}, {line})	数値	行{lnum}に{line}(文字列)をセット
setloclist( {nr}, {list}[, {action}])
				数値	{list}を使ってロケーションリストを変更
setpos( {expr}, {list})		なし	{expr}の位置を{list}にする
setqflist( {list}[, {action}])	数値	{list}を使ってQuickFixリストを変更
setreg( {n}, {v}[, {opt}])	数値	レジスタの値とタイプを設定
settabwinvar( {tabnr}, {winnr}, {varname}, {val})  タブページ{tabnr}内のウィン
					ドウ{nr}の変数{varname}に{val}をセット
					{winnr} in tab page {tabnr} to {val}
setwinvar( {nr}, {varname}, {val})	ウィンドウ{nr}の変数{varname}に{val}を
					セット
shellescape( {string})		文字列	{string}をシェルコマンド引数として使う
					ためにエスケープする。
simplify( {filename})		文字列	ファイル名を可能なかぎり簡略化する
sort( {list} [, {func}])	リスト	比較に{func}を使って{list}をソートする
soundfold( {word})		文字列	{word}のsound-fold
spellbadword()			文字列	カーソル位置のスペルミスした単語
spellsuggest( {word} [, {max} [, {capital}]])
				リスト	スペリング補完
split( {expr} [, {pat} [, {keepempty}]])
				リスト	{expr}を{pat}で区切ってリストを作る
str2nr( {expr} [, {base}])	数値	文字列を数値に変換する
strftime( {format}[, {time}])	文字列	指定されたフォーマットでの時刻
stridx( {haystack}, {needle}[, {start}])
				数値	{haystack}内の{needle}のインデックス
string( {expr})			文字列	{expr}の値の文字列表現
strlen( {expr})			数値	文字列{expr}の長さ
strpart( {src}, {start}[, {len}])
				文字列	{src}内{start}から長さ{len}の部分
strridx( {haystack}, {needle} [, {start}])
				数値	{haystack}内の最後の{needle}のインデッ
					クス
strtrans( {expr})		文字列	文字列を表示可能に変更
submatch( {nr})			文字列	":substitute"における特定のマッチ
substitute( {expr}, {pat}, {sub}, {flags})
				文字列	{expr}の{pat}を{sub}に置換え
synID( {line}, {col}, {trans})	数値	{line}と{col}のsyntax IDを取得
synIDattr( {synID}, {what} [, {mode}])
				文字列	syntax ID{synID}の属性{what}を取得
synIDtrans( {synID})		数値	{synID}の翻訳されたsyntax ID
system( {expr} [, {input}])	文字列	シェルコマンド{expr}の出力結果
tabpagebuflist( [{arg}])	リスト	タブページ内のバッファ番号のリスト
tabpagenr( [{arg}])		数値	現在または最後のタブページの番号
tabpagewinnr( {tabarg}[, {arg}])
				数値	タブページ内の現在のウィンドウの番号
taglist( {expr})		リスト	{expr}にマッチするタグのリスト
tagfiles()			リスト  使用しているタグファイルのリスと
tempname()			文字列	テンポラリファイルの名前
tolower( {expr})		文字列	文字列{expr}を小文字にする
toupper( {expr})		文字列	文字列{expr}を大文字にする
tr( {src}, {fromstr}, {tostr})	文字列	{src}中に現れる文字{fromstr}を{tostr}
					に変換する。
type( {name})			数値	変数{name}の型
values( {dict})			リスト	{dict}の値のリスト
virtcol( {expr})		数値	カーソルのスクリーンカラム位置
visualmode( [expr])		文字列	最後に使われたVisualモード
winbufnr( {nr})			数値	ウィンドウ{nr}のバッファ番号
wincol()			数値	カーソル位置のウィンドウ桁
winheight( {nr})		数値	ウィンドウ{nr}の高さ
winline()			数値	カーソル位置のウィンドウ行
winnr()				数値	現在のウィンドウの番号
winrestcmd()			文字列	ウィンドウサイズを復元するコマンド
winrestview({dict})		なし	現在のウィンドウのビューを復元
winsaveview()			辞書	現在のウィンドウのビューを保存
winwidth( {nr})			数値	ウィンドウ{nr}の幅を取得
writefile({list}, {fname} [, {binary}])
				数値	行のリストをファイル{fname}に書き込む


add({list}, {expr})					*add()*
		Append the item {expr} to |List| {list}.  Returns the
		resulting |List|.  Examples: >
			:let alist = add([1, 2, 3], item)
			:call add(mylist, "woodstock")
<		Note that when {expr} is a |List| it is appended as a single
		item.  Use |extend()| to concatenate |Lists|.
		Use |insert()| to add an item at another position.


append({lnum}, {expr})					*append()*
		When {expr} is a |List|: Append each item of the |List| as a
		text line below line {lnum} in the current buffer.
		Otherwise append {expr} as one text line below line {lnum} in
		the current buffer.
		{lnum} can be zero to insert a line before the first one.
		Returns 1 for failure ({lnum} out of range or out of memory),
		0 for success.  Example: >
			:let failed = append(line('$'), "# THE END")
			:let failed = append(0, ["Chapter 1", "the beginning"])

							*argc()*
argc()		結果は引数のリスト内の、ファイルの数。|arglist|を参照。

							*argv()*
argv([{nr}])	結果は引数リスト内の、{nr}番目のファイル。|arglist|を参照。
		"argv(0)"は一番最初のファイルを示す。例:
>	let i = 0
>	while i < argc()
>	  let f = substitute(argv(i), '\([. ]\)', '\\&', 'g')
>	  exe 'amenu Arg.' . f . ' :e ' . f . '<CR>'
>	  let i = i + 1
>	endwhile
<		Without the {nr} argument a |List| with the whole |arglist| is
		returned.

							*browse()*
browse({save}, {title}, {initdir}, {default})
		ファイル選択ダイアログを起動。これは"has("browser")"が、非零を
		返す時(幾つかのGUIバージョンに限定)にだけ働く。
		入力フィールドの意味は:
		    {save}	非零ならば書込み用ファイルの選択
		    {title}	ダイアログのタイトル
		    {initdir}	ダイアログの始まるディレクトリ
		    {default}	ファイル名の省略値
		ダイアログがキャンセルされるか、何かエラーがあるか、もしくはブ
		ラウジングが不可能ならば、空文字列が戻ってくる。

							*browsedir()*
browsedir({title}, {initdir})
		Put up a directory requester.  This only works when
		"has("browse")" returns non-zero (only in some GUI versions).
		On systems where a directory browser is not supported a file
		browser is used.  In that case: select a file in the directory
		to be used.
		The input fields are:
		    {title}	title for the requester
		    {initdir}	directory to start browsing in
		When the "Cancel" button is hit, something went wrong, or
		browsing is not possible, an empty string is returned.

							*bufexists()*
bufexists({expr})
		結果は数値で、{expr}と呼ばれるバッファが存在すれば非零となる。
		If the {expr} argument is a number, buffer numbers are used.
		{expr}が文字列だった場合、バッファ名に正確にマッチしなければな
		らない。The name can be:
		- Relative to the current directory.
		- A full path.
		- The name of a buffer with 'filetype' set to "nofile".
		- A URL name.
		Unlisted buffers will be found.
		Note that help files are listed by their short name in the
		output of |:buffers|, but bufexists() requires using their
		long name to be able to find them.
		Use "bufexists(0)" to test for the existence of an alternate
		file name.

							*buffer_exists()*
		以前の名前: buffer_exists().

							*bufloaded()*
bufloaded({expr})
		戻り値は数値で、{expr}と呼ばれるバッファが存在しロード済み(
		ウィンドウに表示されているか、隠されているかは問わない)ならば
		結果は非零となる。引数{expr}は|bufexists()|と同じように扱われ
		る。

							*bufname()*
bufname({expr})
		戻り値はバッファの名前。バッファ名はコマンド":ls"で表示される
		ものと同様。
		{expr}が数値ならば、その番号のバッファ名が返される。0は現在の
		ウィンドウの裏バッファを意味する。{expr}が文字列ならば、バッ
		ファ名に対して正規表現マッチングを行なうパターンとなる。この
		マッチングは常に、'magic'をセットし'cpoptions'を空にした状態で
		行なわれる。複数マッチしてしまった場合には空文字列が返される。
		""や"%"は現在のバッファを意味し、"#"は裏バッファを意味する。
		A full match is preferred, otherwise a match at the start, end
		or middle of the buffer name is accepted.  If you only want a
		full match then put "^" at the start and "$" at the end of the
		pattern.
		Listed buffers are found first.  If there is a single match
		with a listed buffer, that one is returned.  Next unlisted
		buffers are searched for.
		{expr}が文字列のときに、それをバッファ番号として使いたいなら
		ば、0を足すことによって強制的に数値にすることができる:
>			echo bufname("3" + 0)
		バッファが存在しないか名前を持っていない場合には、空文字列が返
		される。
>  bufname("#")			alternate buffer name
>  bufname(3)			name of buffer 3
>  bufname("%")			name of current buffer
>  bufname("file2")		name of buffer where "file2" matches.
							*buffer_name()*
		以前の名前: buffer_name().

							*bufnr()*
bufnr({expr} [, {create}])
		結果はバッファの番号。バッファ番号はコマンド":ls"で表示される
		ものと同様。{expr}の使い方は前述のbufname()を参照。バッファが
		存在しない場合-1が返される。  Or, if the
		{create} argument is present and not zero, a new, unlisted,
		buffer is created and its number is returned.
		bufnr("$")は最後のバッファを意味する:
>  :let last_buffer = bufnr("$")
		結果は存在しているバッファのうちで、もっとも大きなバッファ番号
		となる。 Note そのバッファ番号より小さいバッファ番号を持つ(ハ
		ズの)バッファが、必ずしも総て存在するとは限らない。なぜなら
		":bdel"がバッファを消すことができるからだ。バッファが存在する
		かテストするにはbufexists()を使う。
		以前の名前: buffer_number().
							*last_buffer_nr()*
		bufnr("$")の以前の名前: last_buffer_nr().

							*bufwinnr()*
bufwinnr({expr})
		結果は数値で、バッファ{expr}に関連付けられた最初のウィンドウの
		番号。{expr}の使い方は前述のbufname()を参照。バッファ{expr}が
		存在しないか、ウィンドウが無い場合には-1が返される。例: >

	echo "A window containing buffer 1 is " . (bufwinnr(1))

<		The number can be used with |CTRL-W_w| and ":wincmd w"
		|:wincmd|.
		Only deals with the current tab page.
							*byte2line()*
byte2line({byte})
		現在のバッファの先頭から{byte}番目のキャラクタが、何行目に含ま
		れるかを返す。これには現在のバッファの'fileformat'に依存した、
		改行文字も含まれる。先頭の文字にはバイトカウント1が与えられ
		る。
		|line2byte()|と|go|と|:goto|も参照。
		{|+byte_offset|機能を有効にしてコンパイルしなければ利用できな
		い}

byteidx({expr}, {nr})					*byteidx()*
		Return byte index of the {nr}'th character in the string
		{expr}.  Use zero for the first character, it returns zero.
		This function is only useful when there are multibyte
		characters, otherwise the returned value is equal to {nr}.
		Composing characters are counted as a separate character.
		Example : >
			echo matchstr(str, ".", byteidx(str, 3))
<		will display the fourth character.  Another way to do the
		same: >
			let s = strpart(str, byteidx(str, 3))
			echo strpart(s, 0, byteidx(s, 1))
<		If there are less than {nr} characters -1 is returned.
		If there are exactly {nr} characters the length of the string
		is returned.

call({func}, {arglist} [, {dict}])			*call()* *E699*
		Call function {func} with the items in |List| {arglist} as
		arguments.
		{func} can either be a |Funcref| or the name of a function.
		a:firstline and a:lastline are set to the cursor line.
		Returns the return value of the called function.
		{dict} is for functions with the "dict" attribute.  It will be
		used to set the local variable "self". |Dictionary-function|

changenr()						*changenr()*
		Return the number of the most recent change.  This is the same
		number as what is displayed with |:undolist| and can be used
		with the |:undo| command.
		When a change was made it is the number of that change.  After
		redo it is the number of the redone change.  After undo it is
		one less than the number of the undone change.

							*char2nr()*
char2nr({expr})
		{expr}の最初の文字のASCIIコードを返す。例:
>			char2nr(" ")		returns 32
>			char2nr("ABC")		returns 65
<		The current 'encoding' is used.  Example for "utf-8": >
			char2nr("á")		returns 225
			char2nr("á"[0])		returns 195
<		nr2char() does the opposite.

cindent({lnum})						*cindent()*
		Get the amount of indent for line {lnum} according the C
		indenting rules, as with 'cindent'.
		The indent is counted in spaces, the value of 'tabstop' is
		relevant.  {lnum} is used just like in |getline()|.
		When {lnum} is invalid or Vim was not compiled the |+cindent|
		feature, -1 is returned.
		See |C-indenting|.

							*col()*
col({expr})	
		戻り値は数値で、{expr}で与えられるファイル上でのカラム番号。有
		効な位置は:
		    .	    現在の位置
		    $	    the end of the cursor line (the result is the
			    number of characters in the cursor line plus one)
		    'x	    マークxの位置(マークが設定されていない場合0)
		To get the line number use |line()|.  To get both use
		|getpos()|.
		For the screen column position use |virtcol()|.
		Note 現在のファイルのマークしか使えないことに注意。
		例:
>			col(".")		カーソルのカラム
			col("$")		length of cursor line plus one
>			col("'t")		マークtのカラム
>			col("'" . markname)	マークmarknameのカラム
		先頭のカラムは1になる。返された0はエラーを示す。
		For an uppercase mark the column may actually be in another
		buffer.
		For the cursor position, when 'virtualedit' is active, the
		column is one higher if the cursor is after the end of the
		line.  This can be used to obtain the column in Insert mode: >
			:imap <F2> <C-O>:let save_ve = &ve<CR>
				\<C-O>:set ve=all<CR>
				\<C-O>:echo col(".") . "\n" <Bar>
				\let &ve = save_ve<CR>
<
complete({startcol}, {matches})			*complete()* *E785*
		Set the matches for Insert mode completion.
		Can only be used in Insert mode.  You need to use a mapping
		with CTRL-R = |i_CTRL-R|.  It does not work after CTRL-O or
		with an expression mapping.
		{startcol} is the byte offset in the line where the completed
		text start.  The text up to the cursor is the original text
		that will be replaced by the matches.  Use col('.') for an
		empty string.  "col('.') - 1" will replace one character by a
		match.
		{matches} must be a |List|.  Each |List| item is one match.
		See |complete-items| for the kind of items that are possible.
		Note that the after calling this function you need to avoid
		inserting anything that would completion to stop.
		The match can be selected with CTRL-N and CTRL-P as usual with
		Insert mode completion.  The popup menu will appear if
		specified, see |ins-completion-menu|.
		Example: >
	inoremap <F5> <C-R>=ListMonths()<CR>

	func! ListMonths()
	  call complete(col('.'), ['January', 'February', 'March',
		\ 'April', 'May', 'June', 'July', 'August', 'September',
		\ 'October', 'November', 'December'])
	  return ''
	endfunc
<		This isn't very useful, but it shows how it works.  Note that
		an empty string is returned to avoid a zero being inserted.

complete_add({expr})				*complete_add()*
		Add {expr} to the list of matches.  Only to be used by the
		function specified with the 'completefunc' option.
		Returns 0 for failure (empty string or out of memory),
		1 when the match was added, 2 when the match was already in
		the list.
		See |complete-functions| for an explanation of {expr}.  It is
		the same as one item in the list that 'omnifunc' would return.

complete_check()				*complete_check()*
		Check for a key typed while looking for completion matches.
		This is to be used when looking for matches takes some time.
		Returns non-zero when searching for matches is to be aborted,
		zero otherwise.
		Only to be used by the function specified with the
		'completefunc' option.


							*confirm()*
confirm({msg}, {choices} [, {default} [, {type}]])
		confirm()はユーザに選択させるためのダイアログを提供する。戻り
		値は選択した番号になる。最初の選択肢が1である。
		Note: confirm()は、ダイアログサポートを有効にしてコンパイルし
		た時にだけ動作する。|+dialog_con|と|+dialog_gui|を参照。
		ダイアログには{msg}に加えて{choices}の選択肢が表示される。
		{msg}は文字列で'\n'を改行として使用できる。幾つかのシステムで
		は、長すぎる行は自動的に折り返される。
		{choices}は文字列で、個々の選択肢は'\n'によって区切られる。
		例:
>			confirm("Save changes?", "&Yes\n&No\n&Cancel")
		'&'の後の文字は選択肢のショートカットキーになる。この場合
		"Cancel"を選択するのに'c'をタイプすることができる。ショート
		カットキーは最初の文字である必要は無い:
>			confirm("file has been modified", "&Save\nSave &All")
		コンソールでは、デフォルトのショートカットキーとして、各選択肢
		の最初の文字が使われる。
		オプションの引数{default}は<CR>キーを叩いた時に選択される選択
		肢の番号を指定する。最初の選択肢をデフォルトにするならば1を使
		用する。デフォルトを設定したくないのならば0を使用する。
		{default}を省略した場合、0が使用される。
		オプションの引数{type}はダイアログのタイプを与える。これは
		Win32 GUI版でアイコンを指定するのに使う。"Error", "Question",
		"Info", "Warning", "Generic"のうちどれか一つを指定する。以上の
		うちの先頭の文字だけで指定できる。{type}が省略された場合、
		"Generic"が使用される。
		ユーザが<Esc>やCTRL-Cや、その他の割りこみキーでダイアログを中
		断した場合、confirm()は0を返す。

		例:
>   :let choice = confirm("What do you want?", "&Apples\n&Oranges\n&Bananas", 2)
>   :if choice == 0
>   :	echo "make up your mind!"
>   :elseif choice == 3
>   :	echo "tasteful"
>   :else
>   :	echo "I prefer bananas myself."
>   :endif
		GUIのダイアログではボタンが使用される。ボタンの配置は
		'guioptions'の'v'フラグに依存する。もしも'v'フラグが含まれてい
		るのなら、ボタンは常に垂直に配置される。そうでなければ水平に配
		置しようと試みられる。水平配置がうまくマッチしない場合は、垂直
		配置が使われる。幾つかのシステムでは常に水平配置が使われる。

							*copy()*
copy({expr})	Make a copy of {expr}.  For Numbers and Strings this isn't
		different from using {expr} directly.
		When {expr} is a |List| a shallow copy is created.  This means
		that the original |List| can be changed without changing the
		copy, and vise versa.  But the items are identical, thus
		changing an item changes the contents of both |Lists|.  Also
		see |deepcopy()|.

count({comp}, {expr} [, {ic} [, {start}]])			*count()*
		Return the number of times an item with value {expr} appears
		in |List| or |Dictionary| {comp}.
		If {start} is given then start with the item with this index.
		{start} can only be used with a |List|.
		When {ic} is given and it's non-zero then case is ignored.


							*cscope_connection()*
cscope_connection([{num} , {dbpath} [, {prepend}]])
		Checks for the existence of a |cscope| connection.  If no
		parameters are specified, then the function returns:
			0, if cscope was not available (not compiled in), or
			   if there are no cscope connections;
			1, if there is at least one cscope connection.

		If parameters are specified, then the value of {num}
		determines how existence of a cscope connection is checked:

		{num}	Description of existence check
		-----	------------------------------
		0	Same as no parameters (e.g., "cscope_connection()").
		1	Ignore {prepend}, and use partial string matches for
			{dbpath}.
		2	Ignore {prepend}, and use exact string matches for
			{dbpath}.
		3	Use {prepend}, use partial string matches for both
			{dbpath} and {prepend}.
		4	Use {prepend}, use exact string matches for both
			{dbpath} and {prepend}.

		Note: All string comparisons are case sensitive!

		Examples.  Suppose we had the following (from ":cs show"): >

  # pid    database name			prepend path
  0 27664  cscope.out				/usr/local
<
		Invocation					Return Val ~
		----------					---------- >
		cscope_connection()					1
		cscope_connection(1, "out")				1
		cscope_connection(2, "out")				0
		cscope_connection(3, "out")				0
		cscope_connection(3, "out", "local")			1
		cscope_connection(4, "out")				0
		cscope_connection(4, "out", "local")			0
		cscope_connection(4, "cscope.out", "/usr/local")	1
<
cursor({lnum}, {col} [, {off}])				*cursor()*
cursor({list})
		Positions the cursor at the column (byte count) {col} in the
		line {lnum}.  The first column is one.
		When there is one argument {list} this is used as a |List|
		with two or three items {lnum}, {col} and {off}.  This is like
		the return value of |getpos()|, but without the first item.
		Does not change the jumplist.
		If {lnum} is greater than the number of lines in the buffer,
		the cursor will be positioned at the last line in the buffer.
		If {lnum} is zero, the cursor will stay in the current line.
		If {col} is greater than the number of bytes in the line,
		the cursor will be positioned at the last character in the
		line.
		If {col} is zero, the cursor will stay in the current column.
		When 'virtualedit' is used {off} specifies the offset in
		screen columns from the start of the character.  E.g., a
		position within a <Tab> or after the last character.


deepcopy({expr}[, {noref}])				*deepcopy()* *E698*
		Make a copy of {expr}.  For Numbers and Strings this isn't
		different from using {expr} directly.
		When {expr} is a |List| a full copy is created.  This means
		that the original |List| can be changed without changing the
		copy, and vise versa.  When an item is a |List|, a copy for it
		is made, recursively.  Thus changing an item in the copy does
		not change the contents of the original |List|.
		When {noref} is omitted or zero a contained |List| or
		|Dictionary| is only copied once.  All references point to
		this single copy.  With {noref} set to 1 every occurrence of a
		|List| or |Dictionary| results in a new copy.  This also means
		that a cyclic reference causes deepcopy() to fail.
								*E724*
		Nesting is possible up to 100 levels.  When there is an item
		that refers back to a higher level making a deep copy with
		{noref} set to 1 will fail.
		Also see |copy()|.

							*delete()*
delete({fname})	{fname}という名前のファイルを削除する。戻り値は数値で、削除に
		成功したら0、失敗したら1が返る。
		Use |remove()| to delete an item from a |List|.

							*did_filetype()*
did_filetype()	autocommandが実行されFileTypeイベントが一度でも起こっていれ
		ば、非零が返る。スクリプトのFileTypeイベントが、複数回呼び出さ
		れるのを回避するのに使える。 |FileType|

diff_filler({lnum})					*diff_filler()*
		Returns the number of filler lines above line {lnum}.
		These are the lines that were inserted at this point in
		another diff'ed window.  These filler lines are shown in the
		display but don't exist in the buffer.
		{lnum} is used like with |getline()|.  Thus "." is the current
		line, "'m" mark m, etc.
		Returns 0 if the current window is not in diff mode.

diff_hlID({lnum}, {col})				*diff_hlID()*
		Returns the highlight ID for diff mode at line {lnum} column
		{col} (byte index).  When the current line does not have a
		diff change zero is returned.
		{lnum} is used like with |getline()|.  Thus "." is the current
		line, "'m" mark m, etc.
		{col} is 1 for the leftmost column, {lnum} is 1 for the first
		line.
		The highlight ID can be used with |synIDattr()| to obtain
		syntax information about the highlighting.

empty({expr})						*empty()*
		Return the Number 1 if {expr} is empty, zero otherwise.
		A |List| or |Dictionary| is empty when it does not have any
		items.  A Number is empty when its value is zero.
		For a long |List| this is much faster then comparing the
		length with zero.

escape({string}, {chars})				*escape()*
		{string}内に現れる{chars}のキャラクタをバックスラッシュでエス
		ケープする。例:
>			:echo escape('c:\program files\vim', ' \')
		結果:
>			c:\\program\ files\\vim

<							*eval()*
eval({string})	Evaluate {string} and return the result.  Especially useful to
		turn the result of |string()| back into the original value.
		This works for Numbers, Strings and composites of them.
		Also works for |Funcref|s that refer to existing functions.

eventhandler()						*eventhandler()*
		Returns 1 when inside an event handler.  That is that Vim got
		interrupted while waiting for the user to type a character,
		e.g., when dropping a file on Vim.  This means interactive
		commands cannot be used.  Otherwise zero is returned.

executable({expr})					*executable()*
		This function checks if an executable with the name {expr}
		exists.  {expr} must be the name of the program without any
		arguments.
		executable() uses the value of $PATH and/or the normal
		searchpath for programs.		*PATHEXT*
		On MS-DOS and MS-Windows the ".exe", ".bat", etc. can
		optionally be included.  Then the extensions in $PATHEXT are
		tried.  Thus if "foo.exe" does not exist, "foo.exe.bat" can be
		found.  If $PATHEXT is not set then ".exe;.com;.bat;.cmd" is
		used.  A dot by itself can be used in $PATHEXT to try using
		the name without an extension.  When 'shell' looks like a
		Unix shell, then the name is also tried without adding an
		extension.
		On MS-DOS and MS-Windows it only checks if the file exists and
		is not a directory, not if it's really executable.
		On MS-Windows an executable in the same directory as Vim is
		always found.  Since this directory is added to $PATH it
		should also work to execute it |win32-PATH|.
		The result is a Number:
			1	exists
			0	does not exist
			-1	not implemented on this system

							*exists()*
exists({expr})	結果は数値で、変数{expr}が存在すれば1となり、そうでなければ0と
		なる。引数{expr}は文字列で次のうちいずれかである。
			&option-name	Vimオプション
			$ENVNAME	環境変数(空文字列と比較することで、判
					定が成される)
			*funcname	組み込み関数(|functions|参照)かユーザ
					が定義した関数(|user-functions|参照)
			varname		内部変数(|internal-variables|)
					Also works
					for |curly-braces-names|, |Dictionary|
					entries, |List| items, etc.  Beware
					that this may cause functions to be
					invoked cause an error message for an
					invalid expression.  
			:cmdname	Ex command: built-in command, user
					command or command modifier |:command|.
					Returns:
					1  for match with start of a command
					2  full match with a command
					3  matches several user commands
					To check for a supported command
					always check the return value to be 2.
			:2match		The |:2match| command.
			:3match		The |:3match| command.
			#event		autocommand defined for this event
			#event#pattern	autocommand defined for this event and
					pattern (the pattern is taken
					literally and compared to the
					autocommand patterns character by
					character)
			#group		autocommand group exists
			#group#event	autocommand defined for this group and
					event.
			#group#event#pattern
					autocommand defined for this group,
					event and pattern.
			##event		autocommand for this event is
					supported.
		For checking for a supported feature use |has()|.

		例:
			exists("&shortname")
			exists("$HOSTNAME")
			exists("*strftime")
			exists("*s:MyFunc")
			exists("bufcount")
			exists(":Make")
			exists("#CursorHold")
			exists("#BufReadPre#*.gz")
			exists("#filetypeindent")
			exists("#filetypeindent#FileType")
			exists("#filetypeindent#FileType#*")
			exists("##ColorScheme")
		シンボルである&/$/*と名前の間には、空白文字があってはならな
		い。That may become more strict in
		the future, thus don't count on it!
		Working example: >
			exists(":make")
<		NOT working example: >
			exists(":make install")

<		Note that the argument must be a string, not the name of the
		variable itself.  For example: >
			exists(bufcount)
<		This doesn't check for existence of the "bufcount" variable,
		but gets the value of "bufcount", and checks if that exists.

							*expand()*
expand({expr} [, {flag}])
		ワイルドカードと{expr}内の特殊なキーワードを展開する。戻り値は
		文字列。

		複数の候補があった場合、それらは文字<NL>で区切られる。[注意:
		バージョン5.0では空白文字が用いられ、スペースを含むファイル名
		について問題を引き起こしていた]

		展開が失敗した場合、結果は空文字列となる。また存在しないファイ
		ル名というのは、結果の文字列には含まれない。

		{expr}が'%'か'#'か'<'で始まる場合には、展開は|cmdline-special|
		のように、変換子を受け付け、それらに関連付けられた変換が施され
		る。ここに簡単な概略を示す:

			%		現在のファイル名
			#		裏バッファのファイル名
			#n		n番の裏バッファのファイル名
			<cfile>		カーソルのしたのファイル名
			<afile>		autocmdのファイル名
			<abuf>		autocmdのバッファ名
			<sfile>		取り込み(source)中のファイル名
			<cword>		カーソル下の単語(word)
			<cWORD>		カーソル下の単語(WORD)
		変換子:
			:p		フルパス名を展開
			:h		ヘッド(ディレクトリ)
			:t		テイル(ファイル名だけ)
			:r		拡張子が削除される
			:e		拡張子だけ

		例:
>			:let &tags = expand("%:p:h") . "/tags"
		'%'や'#'や'<'で始まる文字列を展開する時には、それに続くテキス
		トは無視されることに注意。従ってこれは正しくない:
>			:let doesntwork = expand("%:h.bak")
		こうすると良い:
>			:let doeswork = expand("%:h") . ".bak"
		"<cfile>"やそれらを展開する時には、戻り値が完全な展開をされな
		い参照名であることにも注意が必要。もしも"<cfile>"が"~/.cshrc"
		であった場合、"~/"を展開してホームディレクトリにするために、も
		う一度expand()を呼び出す必要がある:
>			:echo expand(expand("<cfile>"))

		変数と変換子の間には空白文字があってはならない。関数
		|fnamemodify()|が通常のファイル名の変換には使用可能である。

		'%'や'#'を名前が未定義の現在や裏バッファのファイルに適用した場
		合、空文字列が使用される。"%:p"を名無しのバッファに使用した場
		合、結果はカレントディレクトリに'/'が付加されたものになる。

		'%'や'#'や'<'で始まらない{expr}は、コマンドラインのファイル名
		と同じように展開される。オプションの{flag}が使用され、その値が
		非ゼロでない時以外は'suffixes'と'wildignore'が使用される。
		The "**" item can be used to
		search in a directory tree.  For example, to find all "README"
		files in the current directory and below: >
			:echo expand("**/README")
< 
		Expand()は、シェルの持っている変数や環境変数を展開することがで
		きる。しかしシェルが起動されなければならないので、遅くなる。
		|expr-env-expand|を参照。

		存在するファイルを探すには|glob()|を参照。外部コマンドの「生
		の」実行結果を扱うには|system()|を参照。

extend({expr1}, {expr2} [, {expr3}])			*extend()*
		{expr1} and {expr2} must be both |Lists| or both
		|Dictionaries|.

		If they are |Lists|: Append {expr2} to {expr1}.
		If {expr3} is given insert the items of {expr2} before item
		{expr3} in {expr1}.  When {expr3} is zero insert before the
		first item.  When {expr3} is equal to len({expr1}) then
		{expr2} is appended.
		Examples: >
			:echo sort(extend(mylist, [7, 5]))
			:call extend(mylist, [2, 3], 1)
<		Use |add()| to concatenate one item to a list.  To concatenate
		two lists into a new list use the + operator: >
			:let newlist = [1, 2, 3] + [4, 5]
<
		If they are |Dictionaries|:
		Add all entries from {expr2} to {expr1}.
		If a key exists in both {expr1} and {expr2} then {expr3} is
		used to decide what to do:
		{expr3} = "keep": keep the value of {expr1}
		{expr3} = "force": use the value of {expr2}
		{expr3} = "error": give an error message		*E737*
		When {expr3} is omitted then "force" is assumed.

		{expr1} is changed when {expr2} is not empty.  If necessary
		make a copy of {expr1} first.
		{expr2} remains unchanged.
		Returns {expr1}.


feedkeys({string} [, {mode}])				*feedkeys()*
		Characters in {string} are queued for processing as if they
		come from a mapping or were typed by the user.  They are added
		to the end of the typeahead buffer, thus if a mapping is still
		being executed these characters come after them.
		The function does not wait for processing of keys contained in
		{string}.
		To include special keys into {string}, use double-quotes
		and "\..." notation |expr-quote|. For example,
		feedkeys("\<CR>") simulates pressing of the <Enter> key. But
		feedkeys('\<CR>') pushes 5 characters.
		If {mode} is absent, keys are remapped.
		{mode} is a String, which can contain these character flags:
		'm'	Remap keys. This is default.
		'n'	Do not remap keys.
		't'	Handle keys as if typed; otherwise they are handled as
			if coming from a mapping.  This matters for undo,
			opening folds, etc.
		Return value is always 0.

							*filereadable()*
filereadable({file})
		結果は数値で、{file}というファイルが存在し、読みこむことが可能
		ならばTRUEとなる。ファイル{file}が存在しないかディレクトリだっ
		た場合には、結果はFALSEとなる。引数{file}は文字列として使えれ
		ばどのような表現でもよい。
		If you don't care about the file being readable you can use
		|glob()|.
							*file_readable()*
		以前の名前: file_readable().

filewritable({file})					*filewritable()*
		The result is a Number, which is 1 when a file with the
		name {file} exists, and can be written.  If {file} doesn't
		exist, or is not writable, the result is 0.  If (file) is a
		directory, and we can write to it, the result is 2.


filter({expr}, {string})					*filter()*
		{expr} must be a |List| or a |Dictionary|.
		For each item in {expr} evaluate {string} and when the result
		is zero remove the item from the |List| or |Dictionary|.
		Inside {string} |v:val| has the value of the current item.
		For a |Dictionary| |v:key| has the key of the current item.
		Examples: >
			:call filter(mylist, 'v:val !~ "OLD"')
<		Removes the items where "OLD" appears. >
			:call filter(mydict, 'v:key >= 8')
<		Removes the items with a key below 8. >
			:call filter(var, 0)
<		Removes all the items, thus clears the |List| or |Dictionary|.

		Note that {string} is the result of expression and is then
		used as an expression again.  Often it is good to use a
		|literal-string| to avoid having to double backslashes.

		The operation is done in-place.  If you want a |List| or
		|Dictionary| to remain unmodified make a copy first: >
			:let l = filter(copy(mylist), 'v:val =~ "KEEP"')

<		Returns {expr}, the |List| or |Dictionary| that was filtered.
		When an error is encountered while evaluating {string} no
		further items in {expr} are processed.


finddir({name}[, {path}[, {count}]])				*finddir()*
		Find directory {name} in {path}.  Supports both downwards and
		upwards recursive directory searches.  See |file-searching|
		for the syntax of {path}.
		Returns the path of the first found match.  When the found
		directory is below the current directory a relative path is
		returned.  Otherwise a full path is returned.
		If {path} is omitted or empty then 'path' is used.
		If the optional {count} is given, find {count}'s occurrence of
		{name} in {path} instead of the first one.
		When {count} is negative return all the matches in a |List|.
		This is quite similar to the ex-command |:find|.
		{only available when compiled with the +file_in_path feature}

findfile({name}[, {path}[, {count}]])				*findfile()*
		Just like |finddir()|, but find a file instead of a directory.
		Uses 'suffixesadd'.
		Example: >
			:echo findfile("tags.vim", ".;")
<		Searches from the directory of the current file upwards until
		it finds the file "tags.vim".

							*fnamemodify()*
fnamemodify({fname}, {mods})
		ファイル名{fname}を{mods}にしたがって変更する。{mods}はコマン
		ドラインで使われるのと同様な文字列である。詳細は
		|filename-modifiers|を参照。
		例:
>			:echo fnamemodify("main.c", ":p:h")
		結果:
>			/home/mool/vim/vim/src/
<		Note: Environment variables and "~" don't work in {fname}, use
		|expand()| first then.


foldclosed({lnum})					*foldclosed()*
		The result is a Number.  If the line {lnum} is in a closed
		fold, the result is the number of the first line in that fold.
		If the line {lnum} is not in a closed fold, -1 is returned.

foldclosedend({lnum})					*foldclosedend()*
		The result is a Number.  If the line {lnum} is in a closed
		fold, the result is the number of the last line in that fold.
		If the line {lnum} is not in a closed fold, -1 is returned.

foldlevel({lnum})					*foldlevel()*
		The result is a Number, which is the foldlevel of line {lnum}
		in the current buffer.  For nested folds the deepest level is
		returned.  If there is no fold at line {lnum}, zero is
		returned.  It doesn't matter if the folds are open or closed.
		When used while updating folds (from 'foldexpr') -1 is
		returned for lines where folds are still to be updated and the
		foldlevel is unknown.  As a special case the level of the
		previous line is usually available.

							*foldtext()*
foldtext()	Returns a String, to be displayed for a closed fold.  This is
		the default function used for the 'foldtext' option and should
		only be called from evaluating 'foldtext'.  It uses the
		|v:foldstart|, |v:foldend| and |v:folddashes| variables.
		The returned string looks like this: >
			+-- 45 lines: abcdef
<		The number of dashes depends on the foldlevel.  The "45" is
		the number of lines in the fold.  "abcdef" is the text in the
		first non-blank line of the fold.  Leading white space, "//"
		or "/*" and the text from the 'foldmarker' and 'commentstring'
		options is removed.
		{not available when compiled without the |+folding| feature}

foldtextresult({lnum})					*foldtextresult()*
		Returns the text that is displayed for the closed fold at line
		{lnum}.  Evaluates 'foldtext' in the appropriate context.
		When there is no closed fold at {lnum} an empty string is
		returned.
		{lnum} is used like with |getline()|.  Thus "." is the current
		line, "'m" mark m, etc.
		Useful when exporting folded text, e.g., to HTML.
		{not available when compiled without the |+folding| feature}

							*foreground()*
foreground()	Move the Vim window to the foreground.  Useful when sent from
		a client to a Vim server. |remote_send()|
		On Win32 systems this might not work, the OS does not always
		allow a window to bring itself to the foreground.  Use
		|remote_foreground()| instead.
		{only in the Win32, Athena, Motif and GTK GUI versions and the
		Win32 console version}


function({name})					*function()* *E700*
		Return a |Funcref| variable that refers to function {name}.
		{name} can be a user defined function or an internal function.


garbagecollect()					*garbagecollect()*
		Cleanup unused |Lists| and |Dictionaries| that have circular
		references.  There is hardly ever a need to invoke this
		function, as it is automatically done when Vim runs out of
		memory or is waiting for the user to press a key after
		'updatetime'.  Items without circular references are always
		freed when they become unused.
		This is useful if you have deleted a very big |List| and/or
		|Dictionary| with circular references in a script that runs
		for a long time.

get({list}, {idx} [, {default}])			*get()*
		Get item {idx} from |List| {list}.  When this item is not
		available return {default}.  Return zero when {default} is
		omitted.
get({dict}, {key} [, {default}])
		Get item with key {key} from |Dictionary| {dict}.  When this
		item is not available return {default}.  Return zero when
		{default} is omitted.

							*getbufline()*
getbufline({expr}, {lnum} [, {end}])
		Return a |List| with the lines starting from {lnum} to {end}
		(inclusive) in the buffer {expr}.  If {end} is omitted, a
		|List| with only the line {lnum} is returned.

		For the use of {expr}, see |bufname()| above.

		For {lnum} and {end} "$" can be used for the last line of the
		buffer.  Otherwise a number must be used.

		When {lnum} is smaller than 1 or bigger than the number of
		lines in the buffer, an empty |List| is returned.

		When {end} is greater than the number of lines in the buffer,
		it is treated as {end} is set to the number of lines in the
		buffer.  When {end} is before {lnum} an empty |List| is
		returned.

		This function works only for loaded buffers.  For unloaded and
		non-existing buffers, an empty |List| is returned.

		Example: >
			:let lines = getbufline(bufnr("myfile"), 1, "$")

getbufvar({expr}, {varname})				*getbufvar()*
		The result is the value of option or local buffer variable
		{varname} in buffer {expr}.  Note that the name without "b:"
		must be used.
		This also works for a global or buffer-local option, but it
		doesn't work for a global variable, window-local variable or
		window-local option.
		For the use of {expr}, see |bufname()| above.
		When the buffer or variable doesn't exist an empty string is
		returned, there is no error message.
		Examples: >
			:let bufmodified = getbufvar(1, "&mod")
			:echo "todo myvar = " . getbufvar("todo", "myvar")
<
getchar([expr])						*getchar()*
		Get a single character from the user or input stream.
		If [expr] is omitted, wait until a character is available.
		If [expr] is 0, only get a character when one is available.
			Return zero otherwise.
		If [expr] is 1, only check if a character is available, it is
			not consumed.  Return zero if no character available.

		Without {expr} and when {expr} is 0 a whole character or
		special key is returned.  If it is an 8-bit character, the
		result is a number.  Use nr2char() to convert it to a String.
		Otherwise a String is returned with the encoded character.
		For a special key it's a sequence of bytes starting with 0x80
		(decimal: 128).  This is the same value as the string
		"\<Key>", e.g., "\<Left>".  The returned value is also a
		String when a modifier (shift, control, alt) was used that is
		not included in the character.

		When {expr} is 1 only the first byte is returned.  For a
		one-byte character it is the character itself as a number.
		Use nr2char() to convert it to a String.

		When the user clicks a mouse button, the mouse event will be
		returned.  The position can then be found in |v:mouse_col|,
		|v:mouse_lnum| and |v:mouse_win|.  This example positions the
		mouse as it would normally happen: >
			let c = getchar()
		  	if c == "\<LeftMouse>" && v:mouse_win > 0
			  exe v:mouse_win . "wincmd w"
			  exe v:mouse_lnum
			  exe "normal " . v:mouse_col . "|"
			endif
<
		There is no prompt, you will somehow have to make clear to the
		user that a character has to be typed.
		There is no mapping for the character.
		Key codes are replaced, thus when the user presses the <Del>
		key you get the code for the <Del> key, not the raw character
		sequence.  Examples: >
			getchar() == "\<Del>"
			getchar() == "\<S-Left>"
<		This example redefines "f" to ignore case: >
			:nmap f :call FindChar()<CR>
			:function FindChar()
			:  let c = nr2char(getchar())
			:  while col('.') < col('$') - 1
			:    normal l
			:    if getline('.')[col('.') - 1] ==? c
			:      break
			:    endif
			:  endwhile
			:endfunction

getcharmod()						*getcharmod()*
		The result is a Number which is the state of the modifiers for
		the last obtained character with getchar() or in another way.
		These values are added together:
			2	shift
			4	control
			8	alt (meta)
			16	mouse double click
			32	mouse triple click
			64	mouse quadruple click
			128	Macintosh only: command
		Only the modifiers that have not been included in the
		character itself are obtained.  Thus Shift-a results in "A"
		with no modifier.

getcmdline()						*getcmdline()*
		Return the current command-line.  Only works when the command
		line is being edited, thus requires use of |c_CTRL-\_e| or
		|c_CTRL-R_=|.
		Example: >
			:cmap <F7> <C-\>eescape(getcmdline(), ' \')<CR>
<		Also see |getcmdtype()|, |getcmdpos()| and |setcmdpos()|.

getcmdpos()						*getcmdpos()*
		Return the position of the cursor in the command line as a
		byte count.  The first column is 1.
		Only works when editing the command line, thus requires use of
		|c_CTRL-\_e| or |c_CTRL-R_=|.  Returns 0 otherwise.
		Also see |getcmdtype()|, |setcmdpos()| and |getcmdline()|.

getcmdtype()						*getcmdtype()*
		Return the current command-line type. Possible return values
		are:
		    :	normal Ex command
		    >	debug mode command |debug-mode|
		    /	forward search command
		    ?	backward search command
		    @	|input()| command
		    -	|:insert| or |:append| command
		Only works when editing the command line, thus requires use of
		|c_CTRL-\_e| or |c_CTRL-R_=|.  Returns an empty string
		otherwise.
		Also see |getcmdpos()|, |setcmdpos()| and |getcmdline()|.

							*getcwd()*
getcwd()	結果は文字列で、現在のディレクトリ名。

getfsize({fname})					*getfsize()*
		The result is a Number, which is the size in bytes of the
		given file {fname}.
		If {fname} is a directory, 0 is returned.
		If the file {fname} can't be found, -1 is returned.

getfontname([{name}])					*getfontname()*
		Without an argument returns the name of the normal font being
		used.  Like what is used for the Normal highlight group
		|hl-Normal|.
		With an argument a check is done whether {name} is a valid
		font name.  If not then an empty string is returned.
		Otherwise the actual font name is returned, or {name} if the
		GUI does not support obtaining the real name.
		Only works when the GUI is running, thus not in your vimrc or
		gvimrc file.  Use the |GUIEnter| autocommand to use this
		function just after the GUI has started.
		Note that the GTK 2 GUI accepts any font name, thus checking
		for a valid name does not work.

getfperm({fname})					*getfperm()*
		The result is a String, which is the read, write, and execute
		permissions of the given file {fname}.
		If {fname} does not exist or its directory cannot be read, an
		empty string is returned.
		The result is of the form "rwxrwxrwx", where each group of
		"rwx" flags represent, in turn, the permissions of the owner
		of the file, the group the file belongs to, and other users.
		If a user does not have a given permission the flag for this
		is replaced with the string "-".  Example: >
			:echo getfperm("/etc/passwd")
<		This will hopefully (from a security point of view) display
		the string "rw-r--r--" or even "rw-------".

							*getftime()*
getftime({fname})
		結果は{fname}で与えられたファイルの、最終更新時間を示す数値。
		1970年1月1日からの経過時間(病)で、strftime()に渡すことができる
		だろう。|localtime()|と|strftime()|も参照。
		ファイル{fname}が見つからなかった場合には-1を返す。

getftype({fname})					*getftype()*
		The result is a String, which is a description of the kind of
		file of the given file {fname}.
		If {fname} does not exist an empty string is returned.
		Here is a table over different kinds of files and their
		results:
			Normal file		"file"
			Directory		"dir"
			Symbolic link		"link"
			Block device		"bdev"
			Character device	"cdev"
			Socket			"socket"
			FIFO			"fifo"
			All other		"other"
		Example: >
			getftype("/home")
<		Note that a type such as "link" will only be returned on
		systems that support it.  On some systems only "dir" and
		"file" are returned.

							*getline()*
getline({lnum} [, {end}])
		結果は現在のバッファの{lnum}行目の内容(文字列)。例:
>			getline(1)
		{lnum}が数字ではない文字で始まる文字列であった場合、line()に
		よってその文字列が数字に変換される。よって、カーソルのある行の
		文字列を取得するには:
>			getline(".")
		{lnum}が1より小さいかバッファの行数よりも大きい数値の場合、空
		文字列が返される。

		When {end} is given the result is a |List| where each item is
		a line from the current buffer in the range {lnum} to {end},
		including line {end}.
		{end} is used in the same way as {lnum}.
		Non-existing lines are silently omitted.
		When {end} is before {lnum} an empty |List| is returned.
		Example: >
			:let start = line('.')
			:let end = search("^$") - 1
			:let lines = getline(start, end)

<		To get lines from another buffer see |getbufline()|

getloclist({nr})					*getloclist()*
		Returns a list with all the entries in the location list for
		window {nr}. When {nr} is zero the current window is used.
		For a location list window, the displayed location list is
		returned.  For an invalid window number {nr}, an empty list is
		returned. Otherwise, same as getqflist().

getqflist()						*getqflist()*
		Returns a list with all the current quickfix errors.  Each
		list item is a dictionary with these entries:
			bufnr	number of buffer that has the file name, use
				bufname() to get the name
			lnum	line number in the buffer (first line is 1)
			col	column number (first column is 1)
			vcol	non-zero: "col" is visual column
				zero: "col" is byte index
			nr	error number
			pattern	search pattern used to locate the error
			text	description of the error
			type	type of the error, 'E', '1', etc.
			valid	non-zero: recognized error message

		When there is no error list or it's empty an empty list is
		returned. Quickfix list entries with non-existing buffer
		number are returned with "bufnr" set to zero.

		Useful application: Find pattern matches in multiple files and
		do something with them: >
			:vimgrep /theword/jg *.c
			:for d in getqflist()
			:   echo bufname(d.bufnr) ':' d.lnum '=' d.text
			:endfor

getreg([{regname} [, 1]])				*getreg()*
		The result is a String, which is the contents of register
		{regname}.  Example: >
			:let cliptext = getreg('*')
<		getreg('=') returns the last evaluated value of the expression
		register.  (For use in maps.)
		getreg('=', 1) returns the expression itself, so that it can
		be restored with |setreg()|.  For other registers the extra
		argument is ignored, thus you can always give it.
		If {regname} is not specified, |v:register| is used.


getregtype([{regname}])					*getregtype()*
		The result is a String, which is type of register {regname}.
		The value will be one of:
		    "v"			for |characterwise| text
		    "V"			for |linewise| text
		    "<CTRL-V>{width}"	for |blockwise-visual| text
		    0			for an empty or unknown register
		<CTRL-V> is one character with value 0x16.
		If {regname} is not specified, |v:register| is used.

gettabwinvar({tabnr}, {winnr}, {varname})		*gettabwinvar()*
		Get the value of window-local variable {varname} in window
		{winnr} in tab page {tabnr}.
		When {varname} starts with "&" get the value of a window-local
		option.
		Tabs are numbered starting with one.  For the current tabpage
		use |getwinvar()|.
		When {winnr} is zero the current window is used.
		This also works for a global option, buffer-local option and
		window-local option, but it doesn't work for a global variable
		or buffer-local variable.
		When {varname} is empty a dictionary with all window-local
		variables is returned.
		Note that {varname} must be the name without "w:".
		Examples: >
			:let list_is_on = gettabwinvar(1, 2, '&list')
			:echo "myvar = " . gettabwinvar(3, 1, 'myvar')
<

							*getwinposx()*
getwinposx()	結果はGUIのVimウィンドウの左端の、デスクトップ上でのX座標値(数
		値)。情報が存在しない(コンソールの)場合は-1となる。

							*getwinposy()*
getwinposy()	結果はGUIのVimウィンドウの上端の、デスクトップ上でのY座標値(数
		値)。情報が存在しない(コンソールの)場合は-1となる。

getwinvar({winnr}, {varname})				*getwinvar()*
		Like |gettabwinvar()| for the current tabpage.
		Examples: >
			:let list_is_on = getwinvar(2, '&list')
			:echo "myvar = " . getwinvar(1, 'myvar')

							*glob()*
glob({expr})	Expand the file wildcards in {expr}.  See |wildcards| for the
		use of special characters.
		The result is a String.
		{expr}内のファイル名のワイルドカードを展開する。結果は文字列。
		結果が複数存在する場合、各々が文字<NL>によって区切られる。
		展開が失敗した場合、結果は空文字列。結果には、存在しないファイ
		ル名は含まれない。

		多くのシステムではbackticks(「`」という文字のこと)を、外部コマ
		ンドの実行結果からファイル名を取得するために使用できる。例:
>			:let tagfiles = glob("`find . -name tags -print`")
>			:let &tags = substitute(tagfiles, "\n", ",", "g")
		backticks内のプログラムの実行結果は、一行に一つずつの項目が含
		まれてなければならない。項目内のスペースは許容される。
		
		特殊なVimの変数を展開するためには|expand()|を参照。外部コマン
		ドの生の出力を得るためには|system()|を参照。

globpath({path}, {expr})				*globpath()*
		Perform glob() on all directories in {path} and concatenate
		the results.  Example: >
			:echo globpath(&rtp, "syntax/c.vim")
<		{path} is a comma-separated list of directory names.  Each
		directory name is prepended to {expr} and expanded like with
		glob().  A path separator is inserted when needed.
		To add a comma inside a directory name escape it with a
		backslash.  Note that on MS-Windows a directory may have a
		trailing backslash, remove it if you put a comma after it.
		If the expansion fails for one of the directories, there is no
		error message.
		The 'wildignore' option applies: Names matching one of the
		patterns in 'wildignore' will be skipped.

		The "**" item can be used to search in a directory tree.
		For example, to find all "README.txt" files in the directories
		in 'runtimepath' and below: >
			:echo globpath(&rtp, "**/README.txt")
<
							*has()*
has({feature})	結果は機能{feature}がサポートされる場合1、されない場合0とな
		る。引数{feature}は文字列。下記の|feature-list|を参照。

has_key({dict}, {key})					*has_key()*
		The result is a Number, which is 1 if |Dictionary| {dict} has
		an entry with key {key}.  Zero otherwise.

haslocaldir()						*haslocaldir()*
		The result is a Number, which is 1 when the current
                window has set a local path via |:lcd|, and 0 otherwise.

hasmapto({what} [, {mode} [, {abbr}]])			*hasmapto()*
		The result is a Number, which is 1 if there is a mapping that
		contains {what} in somewhere in the rhs (what it is mapped to)
		and this mapping exists in one of the modes indicated by
		{mode}.
		When {abbr} is there and it is non-zero use abbreviations
		instead of mappings.  Don't forget to specify Insert and/or
		Command-line mode.
		Both the global mappings and the mappings local to the current
		buffer are checked for a match.
		If no matching mapping is found 0 is returned.
		The following characters are recognized in {mode}:
			n	Normal mode
			v	Visual mode
			o	Operator-pending mode
			i	Insert mode
			l	Language-Argument ("r", "f", "t", etc.)
			c	Command-line mode
		When {mode} is omitted, "nvo" is used.

		This function is useful to check if a mapping already exists
		to a function in a Vim script.  Example: >
			:if !hasmapto('\ABCdoit')
			:   map <Leader>d \ABCdoit
			:endif
<		This installs the mapping to "\ABCdoit" only if there isn't
		already a mapping to "\ABCdoit".
							*histadd()*
histadd({history}, {item})
		文字列{item}を履歴{history}に追加する。履歴{history}は以下のう
		ちどれか一つから選択:			*hist-names*
			"cmd"	 or ":"	  コマンドライン履歴
			"search" or "/"   検索パターン履歴
			"expr"   or "="   タイプされた表現の履歴
			"input"  or "@"	  input()の履歴
		{item}が履歴内に既に存在する場合、それが最新の項目の位置へシフ
		トされる。結果は数値:操作が成功した場合1、そうでなければ0

		例:
>			:call histadd("input", strftime("%Y %b %d"))
>			:let date=input("Enter date: ")

							*histdel()*
histdel({history} [, {item}])
		{history}の内容を削除する。例えば総てのエントリを消すこともで
		きる。{history}の部分に可能な値は|hist-names|を参照。

		パラメータ{item}が文字列として与えられた場合、これは正規表現と
		して扱われる。その表現にマッチする総てのエントリがhistoryから
		削除される(複数あっても)。
		{item}が数値ならば、インデックスとして解釈される。インデックス
		については|:history-indexing|を参照。関連するエントリ(訳注:The
		respective entry)も、存在すれば削除される。

		結果は数値: 削除に成功すれば1を、そうでなければ0が返る。

		例:
		式レジスタの履歴を削除する:
>			:call histdel("expr")

		検索履歴から、"*"で始まるエントリを総て削除する:
>			:call histdel("/", '^\*')

		次の3つは等価である:
>			:call histdel("search", histnr("search"))
>			:call histdel("search", -1)
>			:call histdel("search", '^'.histget("search", -1).'$')

		最後の検索パターンを削除し、一つ前のパターンを"n"コマンド(次の
		マッチへ移動)と'hlsearch'の為に設定する:
>			:call histdel("search", -1)
>			:let @/ = histget("search", -1)


							*histget()*
histget({history} [, {index}])
		結果は{history}の第{index}エントリーを表わす文字列。{history}
		の部分に可能な値は|hist-names|を、{index}については
		|:history-indexing|を参照。指定されたエントリが存在しない場合
		は空文字列が返される。{index}が省略された場合には、履歴中の最
		新のエントリが戻り値として使用される。

		例:
			2つ前に行なわれた検索をやり直す:
>			:execute '/' . histget("search", -2)

			|:history|によって出力される{num}番目のエントリを、再
			度実行するための":H {num}"というコマンドを定義する。
>			:command -nargs=1 H execute histget("cmd",0+<args>)

							*histnr()*
histnr({history})
		結果は数値で{history}の現在のエントリー数。{history}の部分に可
		能な値は|hist-names|を参照。エラーが起こった場合、-1が返され
		る。

		例:
>			:let inp_index = histnr("expr")

							*hlexists()*
hlexists({name})
		結果は数値で、{name}という名のハイライトグループが存在すれば、
		非ゼロの値が返される。これはなんらかの方法でそのグループが既に
		定義されている時にのみ起こる。これの為に実際に何らかのハイライ
		ティングアイテムが設定されている必要はなく、単にシンタックスの
		アイテムとしても使われるだろう。
							*highlight_exists()*
		以前の名前: highlight_exists().

							*hlID()*
hlID({name})	結果は数値で、{name}という名前のハイライトグループのID番号。そ
		のハイライトグループが存在しない場合は0が返される。
		これはハイライトグループについての情報を獲得するために使用され
		る。例えば"Comment"グループの背景色を取得するにはこのようにす
		る:
>	:echo synIDattr(synIDtrans(hlID("Comment")), "bg")
							*highlightID()*
		以前の名前: highlightID()

							*hostname()*
hostname()
		結果は文字列で、現在Vimが実行されているマシンの名前。名前が256
		文字を超える場合、超えた部分は切り捨てられる。

iconv({expr}, {from}, {to})				*iconv()*
		The result is a String, which is the text {expr} converted
		from encoding {from} to encoding {to}.
		When the conversion fails an empty string is returned.
		The encoding names are whatever the iconv() library function
		can accept, see ":!man 3 iconv".
		Most conversions require Vim to be compiled with the |+iconv|
		feature.  Otherwise only UTF-8 to latin1 conversion and back
		can be done.
		This can be used to display messages with special characters,
		no matter what 'encoding' is set to.  Write the message in
		UTF-8 and use: >
			echo iconv(utf8_str, "utf-8", &enc)
<		Note that Vim uses UTF-8 for all Unicode encodings, conversion
		from/to UCS-2 is automatically changed to use UTF-8.  You
		cannot use UCS-2 in a string anyway, because of the NUL bytes.
		{only available when compiled with the +multi_byte feature}

							*indent()*
indent({lnum})	The result is a Number, which is indent of line {lnum} in the
		current buffer.  The indent is counted in spaces, the value
		of 'tabstop' is relevant.  {lnum} is used just like in
		|getline()|.
		When {lnum} is invalid -1 is returned.


index({list}, {expr} [, {start} [, {ic}]])			*index()*
		Return the lowest index in |List| {list} where the item has a
		value equal to {expr}.
		If {start} is given then start looking at the item with index
		{start} (may be negative for an item relative to the end).
		When {ic} is given and it is non-zero, ignore case.  Otherwise
		case must match.
		-1 is returned when {expr} is not found in {list}.
		Example: >
			:let idx = index(words, "the")
			:if index(numbers, 123) >= 0


input({prompt} [, {text} [, {completion}]])		*input()*
		結果は文字列で、ユーザがコマンドラインに入力したものが返され
		る。引数はプロンプト用文字列であり、プロンプトが必要なければ空
		文字列でかまわない。新しい行から入力させるために'\n'をプロンプ
		トに使用することができる。ハイライトセット|:echohl|はプロンプ
		トにも適用される。入力はコマンドラインと同様に行え、幾つかの編
		集コマンドやキーマップもそのまま使用できる。input()に入力され
		た文字列には、他の履歴とは独立した履歴が与えられる。
		NOTE: この関数はGUIモードしか持たないバージョン(例、Win32 GUI)
		のVimでは、スタートアップファイルの中で使用することはできな
		い。

		例:
>	:if input("Coffee or beer? ") == "beer"
>	:  echo "Cheers!"
>	:endif

inputlist({textlist})					*inputlist()*
		{textlist} must be a |List| of strings.  This |List| is
		displayed, one string per line.  The user will be prompted to
		enter a number, which is returned.
		The user can also select an item by clicking on it with the
		mouse.  For the first string 0 is returned.  When clicking
		above the first item a negative number is returned.  When
		clicking on the prompt one more than the length of {textlist}
		is returned.
		Make sure {textlist} has less then 'lines' entries, otherwise
		it won't work.  It's a good idea to put the entry number at
		the start of the string.  And put a prompt in the first item.
		Example: >
			let color = inputlist(['Select color:', '1. red',
				\ '2. green', '3. blue'])

inputrestore()						*inputrestore()*
		Restore typeahead that was saved with a previous inputsave().
		Should be called the same number of times inputsave() is
		called.  Calling it more often is harmless though.
		Returns 1 when there is nothing to restore, 0 otherwise.

inputsave()						*inputsave()*
		Preserve typeahead (also from mappings) and clear it, so that
		a following prompt gets input from the user.  Should be
		followed by a matching inputrestore() after the prompt.  Can
		be used several times, in which case there must be just as
		many inputrestore() calls.
		Returns 1 when out of memory, 0 otherwise.

inputsecret({prompt} [, {text}])			*inputsecret()*
		This function acts much like the |input()| function with but
		two exceptions:
		a) the user's response will be displayed as a sequence of
		asterisks ("*") thereby keeping the entry secret, and
		b) the user's response will not be recorded on the input
		|history| stack.
		The result is a String, which is whatever the user actually
		typed on the command-line in response to the issued prompt.
		NOTE: Command-line completion is not supported.

insert({list}, {item} [, {idx}])			*insert()*
		Insert {item} at the start of |List| {list}.
		If {idx} is specified insert {item} before the item with index
		{idx}.  If {idx} is zero it goes before the first item, just
		like omitting {idx}.  A negative {idx} is also possible, see
		|list-index|.  -1 inserts just before the last item.
		Returns the resulting |List|.  Examples: >
			:let mylist = insert([2, 3, 5], 1)
			:call insert(mylist, 4, -1)
			:call insert(mylist, 6, len(mylist))
<		The last example can be done simpler with |add()|.
		Note that when {item} is a |List| it is inserted as a single
		item.  Use |extend()| to concatenate |Lists|.

							*isdirectory()*
isdirectory({directory})
		結果は数値で、{directory}という名前のディレクトリが存在すれば
		TRUEとなる。{directory}が存在しないか、存在したとしてもディレ
		クトリではなかった場合には、FALSEが返される。文字列として解釈
		できるのならば{directory}の表現はどのようなものであってもかま
		わない。

islocked({expr})					*islocked()* *E786*
		The result is a Number, which is non-zero when {expr} is the
		name of a locked variable.
		{expr} must be the name of a variable, |List| item or
		|Dictionary| entry, not the variable itself!  Example: >
			:let alist = [0, ['a', 'b'], 2, 3]
			:lockvar 1 alist
			:echo islocked('alist')		" 1
			:echo islocked('alist[1]')	" 0

<		When {expr} is a variable that does not exist you get an error
		message.  Use |exists()| to check for existence.

items({dict})						*items()*
		Return a |List| with all the key-value pairs of {dict}.  Each
		|List| item is a list with two items: the key of a {dict}
		entry and the value of this entry.  The |List| is in arbitrary
		order.


join({list} [, {sep}])					*join()*
		Join the items in {list} together into one String.
		When {sep} is specified it is put in between the items.  If
		{sep} is omitted a single space is used.
		Note that {sep} is not added at the end.  You might want to
		add it there too: >
			let lines = join(mylist, "\n") . "\n"
<		String items are used as-is.  |Lists| and |Dictionaries| are
		converted into a string like with |string()|.
		The opposite function is |split()|.

keys({dict})						*keys()*
		Return a |List| with all the keys of {dict}.  The |List| is in
		arbitrary order.

							*len()* *E701*
len({expr})	The result is a Number, which is the length of the argument.
		When {expr} is a String or a Number the length in bytes is
		used, as with |strlen()|.
		When {expr} is a |List| the number of items in the |List| is
		returned.
		When {expr} is a |Dictionary| the number of entries in the
		|Dictionary| is returned.
		Otherwise an error is given.

							*libcall()*
libcall({libname}, {funcname}, {argument})
		ランタイムライブラリ{libname}の関数{funcname}を、引数
		{argument}として呼び出す。結果には、呼び出した関数から返された
		文字列が返される。もしも引数が数値ならば、関数にはint型の引数
		が1つ渡される。引数が文字列の場合には、関数にはヌル終端記号を
		持つ文字列が引数として渡される。呼び出した関数がNULLを返した場
		合には、Vimには空文字列""が戻される。

		libcall()によってVimを最コンパイルすることなく'plug-in'と呼ば
		れる独自の拡張を行なうことができる用になる。それは(直接)システ
		ムの関数を呼ぶ、ということではない。システム関数を呼んだらVim
		がクラッシュするかもしれない。

		Win32では、あなたが書いた関数をDLLに置かなければならず、また通
		常のC呼出し規約を使用しなければならない(WindowsのシステムDLLが
		使うPascalではない)。関数は正確に1つのパラメータ、char型ポイン
		タもしくはint型を取らなければならず、戻り値としてchar型ポイン
		タかNULLを返さなければならない。返されるchar型ポインタは、関数
		終了後も有効なポインタ(例えばDLL内の静的なデータ)を指さなけれ
		ばならない。(malloc等で)割り当てられたメモリを保持していた場
		合、それはリークしてしまう。DLL内のスタティックバッファを用い
		る方法は動くかもしれないが、使用済みDLLがメモリから削除される
		と同時に解放されてしまう。

		警告: もしも関数が有効ではないポインタを返すと、Vimはクラッ
		シュしてしまう。関数が数値を返してしまった場合、Vimはそれをポ
		インタとして扱ってしまうので、やはりクラッシュが起こる。
		Win32のシステムでは、{libname}はDLLのファイル名の拡張子".DLL"
		を付けてはならない。通常の(パスの通った)場所にDLLがない場合に
		は、フルパスで指定する必要がある。
		{Win32バージョン限定の機能}

							*libcallnr()*
libcallnr({libname}, {funcname}, {argument})
		Just like libcall(), but used for a function that returns an
		int instead of a string.
		{only in Win32 on some Unix versions, when the |+libcall|
		feature is present}
		Example (not very useful...): >
			:call libcallnr("libc.so", "printf", "Hello World!\n")
			:call libcallnr("libc.so", "sleep", 10)
<
							*line()*
line({expr})	結果は数値で、{expr}で与えられた位置のファイル内での行番号。受
		け付けられる位置指定は次の通り:
		    .	    カーソルの位置
		    $	    現在のバッファの最後の位置
		    'x	    マークxの位置(マークが設定されていない場合、0が返
			    る)
		    w0	    first line visible in current window
		    w$	    last line visible in current window
		Note that a mark in another file can be used.  The line number
		then applies to another buffer.
		To get the column number use |col()|.  To get both use
		|getpos()|.
		例:
>			line(".")		カーソルの行番号
>			line("'t")		マークtの位置の行番号
>			line("'" . marker)	マークmarkerの位置の行番号
							*last-position-jump*
		このautocommandはファイルを開いた時に、最後に開かれていた時の
		行へ自動的にジャンプするものである。これは'"マークがセットされ
		ている時にのみ有効である:
>	:au BufReadPost * if line("'\"") | exe "normal '\"" | endif

							*line2byte()*
line2byte({lnum})
		バッファの先頭から、{lnum}行目までのバイト数を返す。これには現
		在のバッファのオプション'fileformat'に従った、end-of-line(行終
		端)文字も含まれている。最初の行においては1が返る。
		次のようにすることで最終行を含むバイトサイズを獲得することがで
		きる:
>			line2byte(line("$") + 1)
		これはファイルの大きさプラス1になる。
		{lnum}が無効であるか、|+byte_offset|機能がコンパイル時に無効に
		されている場合、-1が返される。
		|byte2line()|、|go|及び|:goto|も参照。

lispindent({lnum})					*lispindent()*
		Get the amount of indent for line {lnum} according the lisp
		indenting rules, as with 'lisp'.
		The indent is counted in spaces, the value of 'tabstop' is
		relevant.  {lnum} is used just like in |getline()|.
		When {lnum} is invalid or Vim was not compiled the
		|+lispindent| feature, -1 is returned.

							*localtime()*
localtime()
		現在の時刻、1970年1月1日からの経過秒数を返す。|strftime()|と
		|getftime()|も参照。

map({expr}, {string})					*map()*
		{expr} must be a |List| or a |Dictionary|.
		Replace each item in {expr} with the result of evaluating
		{string}.
		Inside {string} |v:val| has the value of the current item.
		For a |Dictionary| |v:key| has the key of the current item.
		Example: >
			:call map(mylist, '"> " . v:val . " <"')
<		This puts "> " before and " <" after each item in "mylist".

		Note that {string} is the result of an expression and is then
		used as an expression again.  Often it is good to use a
		|literal-string| to avoid having to double backslashes.  You
		still have to double ' quotes

		The operation is done in-place.  If you want a |List| or
		|Dictionary| to remain unmodified make a copy first: >
			:let tlist = map(copy(mylist), ' & . "\t"')

<		Returns {expr}, the |List| or |Dictionary| that was filtered.
		When an error is encountered while evaluating {string} no
		further items in {expr} are processed.


maparg({name}[, {mode} [, {abbr}]])			*maparg()*
		モード{mode}におけるキーマップ{name}のrhsを返す。{name}という
		キーマップが存在しない場合、空文字列が返される。{mode}には次の
		文字が使用可能:
			"n"	ノーマル
			"v"	ビジュアル
			"o"	モーション待ち (Operator-pending)
			"i"	インサート
			"c"	コマンドライン
			""	ノーマル、ビジュアル、及びモーション待ち
		{mode}が省略された場合、""が使用される。
		When {abbr} is there and it is non-zero use abbreviations
		instead of mappings.
		{name}には":map"コマンドで使用可能な、特殊なキー名が指定でき
		る。結果の文字列内の特殊文字は、":map"コマンドでリスト表示した
		時のように変換される。
		The mappings local to the current buffer are checked first,
		then the global mappings.  
		This function can be used to map a key even when it's already
		mapped, and have it do the original mapping too.  Sketch: >
			exe 'nnoremap <Tab> ==' . maparg('<Tab>', 'n')


mapcheck({name}[, {mode} [, {abbr}]])			*mapcheck()*
		モード{mode}におけるキーマップ{name}が存在するかチェックする。
		{name}に指定できる特殊文字は|maparg()|を参照。
		When {abbr} is there and it is non-zero use abbreviations
		instead of mappings.
		{name}に対応するキーマップが存在しない時には、空文字列が返され
		る。結果が一つならばマップされたrhsが返される。複数見つかった
		場合には、それらのうちどれか一つのrhsが返される。
		この関数はマッピングが曖昧にならないかチェックするために使うこ
		とができる。例:
>	if mapcheck("_vv") == ""
>	   map _vv :set guifont=7x13<CR>
>	endif
		"_vv"というマッピングは"_v"とか"_vvv"といったマッピングと衝突
		する可能性がある。


match({expr}, {pat}[, {start}[, {count}]])			*match()*
		When {expr} is a |List| then this returns the index of the
		first item where {pat} matches.  Each item is used as a
		String, |Lists| and |Dictionaries| are used as echoed.
		Otherwise, {expr} is used as a String.  The result is a
		Number, which gives the index (byte offset) in {expr} where
		{pat} matches.
		A match at the first character or |List| item returns zero.
		If there is no match -1 is returned.
		Example: >
			:echo match("testing", "ing")	" results in 4
			:echo match([1, 'x'], '\a')	" results in 1
<		See |string-match| for how {pat} is used.
								*strpbrk()*
		Vim doesn't have a strpbrk() function.  But you can do: >
			:let sepidx = match(line, '[.,;: \t]')
<								*strcasestr()*
		Vim doesn't have a strcasestr() function.  But you can add
		"\c" to the pattern to ignore case: >
			:let idx = match(haystack, '\cneedle')
<
		If {start} is given, the search starts from byte index
		{start} in a String or item {start} in a |List|.
		The result, however, is still the index counted from the
		first character/item.  Example: >
			:echo match("testing", "ing", 2)
<		result is again "4". >
			:echo match("testing", "ing", 4)
<		result is again "4". >
			:echo match("testing", "t", 2)
<		result is "3".
		For a String, if {start} > 0 then it is like the string starts
		{start} bytes later, thus "^" will match at {start}.  Except
		when {count} is given, then it's like matches before the
		{start} byte are ignored (this is a bit complicated to keep it
		backwards compatible).
		For a String, if {start} < 0, it will be set to 0.  For a list
		the index is counted from the end.
		If {start} is out of range ({start} > strlen({expr}) for a
		String or {start} > len({expr}) for a |List|) -1 is returned.

		When {count} is given use the {count}'th match.  When a match
		is found in a String the search for the next one starts one
		character further.  Thus this example results in 1: >
			echo match("testing", "..", 0, 2)
<		In a |List| the search continues in the next item.
		Note that when {count} is added the way {start} works changes,
		see above.

		See |pattern| for the patterns that are accepted.
		The 'ignorecase' option is used to set the ignore-caseness of
		the pattern.  'smartcase' is NOT used.  The matching is always
		done like 'magic' is set and 'cpoptions' is empty.


matcharg({nr})							*matcharg()*
		Selects the {nr} match item, as set with a |:match|,
		|:2match| or |:3match| command.
		Return a |List| with two elements:
			The name of the highlight group used
			The pattern used.
		When {nr} is not 1, 2 or 3 returns an empty |List|.
		When there is no match item set returns ['', ''].
		This is usef to save and restore a |:match|.


							*matchend()*
matchend({expr}, {pat})
		match()と同じだが、返されるのはマッチした部分文字列の終了後の
		インデックスである。例:
>			:echo matchend("testing", "ing")
		結果は"7"。
							*strspn()* *strcspn()*
		Vim doesn't have a strspn() or strcspn() function, but you can
		do it with matchend(): >
			:let span = matchend(line, '[a-zA-Z]')
			:let span = matchend(line, '[^a-zA-Z]')
<		Except that -1 is returned when there are no matches.

		The {start}, if given, has the same meaning as for match(). >
			:echo matchend("testing", "ing", 2)
<		results in "7". >
			:echo matchend("testing", "ing", 5)
<		result is "-1".
		When {expr} is a |List| the result is equal to match().

matchlist({expr}, {pat}[, {start}[, {count}]])			*matchlist()*
		Same as match(), but return a |List|.  The first item in the
		list is the matched string, same as what matchstr() would
		return.  Following items are submatches, like "\1", "\2", etc.
		in |:substitute|.  When an optional submatch didn't match an
		empty string is used.  Example: >
			echo matchlist('acd', '\(a\)\?\(b\)\?\(c\)\?\(.*\)')
<		Results in: ['acd', 'a', '', 'c', 'd', '', '', '', '', '']
		When there is no match an empty list is returned.

matchstr({expr}, {pat}[, {start}[, {count}]])			*matchstr()*
		match()と同じだが、返されるのはマッチした文字列。例:
>			:echo matchstr("testing", "ing")
		結果は"ing"。
		マッチしなければ""が返される。
		The {start}, if given, has the same meaning as for match(). >
			:echo matchstr("testing", "ing", 2)
<		results in "ing". >
			:echo matchstr("testing", "ing", 5)
<		result is "".
		When {expr} is a |List| then the matching item is returned.
		The type isn't changed, it's not necessarily a String.

							*max()*
max({list})	Return the maximum value of all items in {list}.
		If {list} is not a list or one of the items in {list} cannot
		be used as a Number this results in an error.
		An empty |List| results in zero.

							*min()*
min({list})	Return the minimum value of all items in {list}.
		If {list} is not a list or one of the items in {list} cannot
		be used as a Number this results in an error.
		An empty |List| results in zero.

							*mkdir()* *E739*
mkdir({name} [, {path} [, {prot}]])
		Create directory {name}.
		If {path} is "p" then intermediate directories are created as
		necessary.  Otherwise it must be "".
		If {prot} is given it is used to set the protection bits of
		the new directory.  The default is 0755 (rwxr-xr-x: r/w for
		the user readable for others).  Use 0700 to make it unreadable
		for others.
		This function is not available in the |sandbox|.
		Not available on all systems.  To check use: >
			:if exists("*mkdir")
<
							*mode()*
mode()		Return a string that indicates the current mode:
			n	Normal
			v	Visual by character
			V	Visual by line
			CTRL-V	Visual blockwise
			s	Select by character
			S	Select by line
			CTRL-S	Select blockwise
			i	Insert
			R	Replace
			c	Command-line
			r	Hit-enter prompt
		This is useful in the 'statusline' option.  In most other
		places it always returns "c" or "n".

nextnonblank({lnum})					*nextnonblank()*
		Return the line number of the first line at or below {lnum}
		that is not blank.  Example: >
			if getline(nextnonblank(1)) =~ "Java"
<		When {lnum} is invalid or there is no non-blank line at or
		below it, zero is returned.
		See also |prevnonblank()|.

							*nr2char()*
nr2char({expr})
		結果はアスキーコード{expr}を持つ1文字からなる文字列となる。例:
>			nr2char(64)		"@"が返される
>			nr2char(32)		" "が返される
<		The current 'encoding' is used.  Example for "utf-8": >
			nr2char(300)		returns I with bow character
<		Note that a NUL character in the file is specified with
		nr2char(10), because NULs are represented with newline
		characters.  nr2char(0) is a real NUL and terminates the
		string, thus results in an empty string.

							*getpos()*
getpos({expr})	Get the position for {expr}.  For possible values of {expr}
		see |line()|.
		The result is a |List| with four numbers:
		    [bufnum, lnum, col, off]
		"bufnum" is zero, unless a mark like '0 or 'A is used, then it
		is the buffer number of the mark.
		"lnum" and "col" are the position in the buffer.  The first
		column is 1.
		The "off" number is zero, unless 'virtualedit' is used.  Then
		it is the offset in screen columns from the start of the
		character.  E.g., a position within a <Tab> or after the last
		character.
		This can be used to save and restore the cursor position: >
			let save_cursor = getpos(".")
			MoveTheCursorAround
			call setpos('.', save_cursor)
<		Also see |setpos()|.

pathshorten({expr})					*pathshorten()*
		パス{expr}におけるディレクトリ名を短縮して返す。拡張子、ファイ
		ル名はそのまま保たれる。パスのその他の構成要素は1文字に縮めら
		れる。1文字目の'~'と'.'はそのまま保たれる。例: >
			:echo pathshorten('~/.vim/autoload/myfile.vim')
<			~/.v/a/myfile.vim ~
		パスが実際に存在するかどうかは関係ない。

prevnonblank({lnum})					*prevnonblank()*
		Return the line number of the first line at or above {lnum}
		that is not blank.  Example: >
			let ind = indent(prevnonblank(v:lnum - 1))
<		When {lnum} is invalid or there is no non-blank line at or
		above it, zero is returned.
		Also see |nextnonblank()|.


printf({fmt}, {expr1} ...)				*printf()*
		Return a String with {fmt}, where "%" items are replaced by
		the formatted form of their respective arguments.  Example: >
			printf("%4d: E%d %.30s", lnum, errno, msg)
<		May result in:
			"  99: E42 asdfasdfasdfasdfasdfasdfasdfas" ~

		Often used items are:
		  %s	string
		  %6s	string right-aligned in 6 bytes
		  %.9s  string truncated to 9 bytes
		  %c    single byte
		  %d    decimal number
		  %5d   decimal number padded with spaces to 5 characters
		  %x    hex number
		  %04x  hex number padded with zeros to at least 4 characters
		  %X    hex number using upper case letters
		  %o    octal number
		  %%    the % character itself

		Conversion specifications start with '%' and end with the
		conversion type.  All other characters are copied unchanged to
		the result.

		The "%" starts a conversion specification.  The following
		arguments appear in sequence:

			%  [flags]  [field-width]  [.precision]  type

		flags
			Zero or more of the following flags:

		    #	      The value should be converted to an "alternate
			      form".  For c, d, and s conversions, this option
			      has no effect.  For o conversions, the precision
			      of the number is increased to force the first
			      character of the output string to a zero (except
			      if a zero value is printed with an explicit
			      precision of zero).
			      For x and X conversions, a non-zero result has
			      the string "0x" (or "0X" for X conversions)
			      prepended to it.

		    0 (zero)  Zero padding.  For all conversions the converted
			      value is padded on the left with zeros rather
			      than blanks.  If a precision is given with a
			      numeric conversion (d, o, x, and X), the 0 flag
			      is ignored.

		    -	      A negative field width flag; the converted value
			      is to be left adjusted on the field boundary.
			      The converted value is padded on the right with
			      blanks, rather than on the left with blanks or
			      zeros.  A - overrides a 0 if both are given.

		    ' ' (space)  A blank should be left before a positive
			      number produced by a signed conversion (d).

		    +	      A sign must always be placed before a number
			      produced by a signed conversion.  A + overrides
			      a space if both are used.

		field-width
			An optional decimal digit string specifying a minimum
			field width.  If the converted value has fewer bytes
			than the field width, it will be padded with spaces on
			the left (or right, if the left-adjustment flag has
			been given) to fill out the field width.

		.precision
			An optional precision, in the form of a period '.'
			followed by an optional digit string.  If the digit
			string is omitted, the precision is taken as zero.
			This gives the minimum number of digits to appear for
			d, o, x, and X conversions, or the maximum number of
			bytes to be printed from a string for s conversions.

		type
			A character that specifies the type of conversion to
			be applied, see below.

		A field width or precision, or both, may be indicated by an
		asterisk '*' instead of a digit string.  In this case, a
		Number argument supplies the field width or precision.  A
		negative field width is treated as a left adjustment flag
		followed by a positive field width; a negative precision is
		treated as though it were missing.  Example: >
			:echo printf("%d: %.*s", nr, width, line)
<		This limits the length of the text used from "line" to
		"width" bytes.

		The conversion specifiers and their meanings are:

		doxX    The Number argument is converted to signed decimal
			(d), unsigned octal (o), or unsigned hexadecimal (x
			and X) notation.  The letters "abcdef" are used for
			x conversions; the letters "ABCDEF" are used for X
			conversions.
			The precision, if any, gives the minimum number of
			digits that must appear; if the converted value
			requires fewer digits, it is padded on the left with
			zeros.
			In no case does a non-existent or small field width
			cause truncation of a numeric field; if the result of
			a conversion is wider than the field width, the field
			is expanded to contain the conversion result.

		c	The Number argument is converted to a byte, and the
			resulting character is written.

		s	The text of the String argument is used.  If a
			precision is specified, no more bytes than the number
			specified are used.

		%	A '%' is written.  No argument is converted.  The
			complete conversion specification is "%%".

		Each argument can be Number or String and is converted
		automatically to fit the conversion specifier.  Any other
		argument type results in an error message.

							*E766* *E767*
		The number of {exprN} arguments must exactly match the number
		of "%" items.  If there are not sufficient or too many
		arguments an error is given.  Up to 18 arguments can be used.


pumvisible()						*pumvisible()*
		Returns non-zero when the popup menu is visible, zero
		otherwise.  See |ins-completion-menu|.
		This can be used to avoid some things that would remove the
		popup menu.

							*E726* *E727*
range({expr} [, {max} [, {stride}]])				*range()*
		Returns a |List| with Numbers:
		- If only {expr} is specified: [0, 1, ..., {expr} - 1]
		- If {max} is specified: [{expr}, {expr} + 1, ..., {max}]
		- If {stride} is specified: [{expr}, {expr} + {stride}, ...,
		  {max}] (increasing {expr} with {stride} each time, not
		  producing a value past {max}).
		When the maximum is one before the start the result is an
		empty list.  When the maximum is more than one before the
		start this is an error.
		Examples: >
			range(4)		" [0, 1, 2, 3]
			range(2, 4)		" [2, 3, 4]
			range(2, 9, 3)		" [2, 5, 8]
			range(2, -2, -1)	" [2, 1, 0, -1, -2]
			range(0)		" []
			range(2, 0)		" error!
<
							*readfile()*
readfile({fname} [, {binary} [, {max}]])
		Read file {fname} and return a |List|, each line of the file
		as an item.  Lines broken at NL characters.  Macintosh files
		separated with CR will result in a single long line (unless a
		NL appears somewhere).
		When {binary} is equal to "b" binary mode is used:
		- When the last line ends in a NL an extra empty list item is
		  added.
		- No CR characters are removed.
		Otherwise:
		- CR characters that appear before a NL are removed.
		- Whether the last line ends in a NL or not does not matter.
		All NUL characters are replaced with a NL character.
		When {max} is given this specifies the maximum number of lines
		to be read.  Useful if you only want to check the first ten
		lines of a file: >
			:for line in readfile(fname, '', 10)
			:  if line =~ 'Date' | echo line | endif
			:endfor
<		When {max} is negative -{max} lines from the end of the file
		are returned, or as many as there are.
		When {max} is zero the result is an empty list.
		Note that without {max} the whole file is read into memory.
		Also note that there is no recognition of encoding.  Read a
		file into a buffer if you need to.
		When the file can't be opened an error message is given and
		the result is an empty list.
		Also see |writefile()|.

reltime([{start} [, {end}]])				*reltime()*
		Return an item that represents a time value.  The format of
		the item depends on the system.  It can be passed to
		|reltimestr()| to convert it to a string.
		Without an argument it returns the current time.
		With one argument is returns the time passed since the time
		specified in the argument.
		With two arguments it returns the time passed between {start}
		and {end}.
		The {start} and {end} arguments must be values returned by
		reltime().
		{only available when compiled with the +reltime feature}

reltimestr({time})				*reltimestr()*
		Return a String that represents the time value of {time}.
		This is the number of seconds, a dot and the number of
		microseconds.  Example: >
			let start = reltime()
			call MyFunction()
			echo reltimestr(reltime(start))
<		Note that overhead for the commands will be added to the time.
		The accuracy depends on the system.
		Leading spaces are used to make the string align nicely.  You
		can use split() to remove it. >
			echo split(reltimestr(reltime(start)))[0]
<		Also see |profiling|.
		{only available when compiled with the +reltime feature}

							*remote_expr()* *E449*
remote_expr({server}, {string} [, {idvar}])
		Send the {string} to {server}.  The string is sent as an
		expression and the result is returned after evaluation.
		The result must be a String or a |List|.  A |List| is turned
		into a String by joining the items with a line break in
		between (not at the end), like with join(expr, "\n").
		If {idvar} is present, it is taken as the name of a
		variable and a {serverid} for later use with
		remote_read() is stored there.
		See also |clientserver| |RemoteReply|.
		This function is not available in the |sandbox|.
		{only available when compiled with the |+clientserver| feature}
		Note: Any errors will cause a local error message to be issued
		and the result will be the empty string.
		Examples: >
			:echo remote_expr("gvim", "2+2")
			:echo remote_expr("gvim1", "b:current_syntax")
<

remote_foreground({server})				*remote_foreground()*
		Move the Vim server with the name {server} to the foreground.
		This works like: >
			remote_expr({server}, "foreground()")
<		Except that on Win32 systems the client does the work, to work
		around the problem that the OS doesn't always allow the server
		to bring itself to the foreground.
		Note: This does not restore the window if it was minimized,
		like foreground() does.
		This function is not available in the |sandbox|.
		{only in the Win32, Athena, Motif and GTK GUI versions and the
		Win32 console version}


remote_peek({serverid} [, {retvar}])		*remote_peek()*
		Returns a positive number if there are available strings
		from {serverid}.  Copies any reply string into the variable
		{retvar} if specified.  {retvar} must be a string with the
		name of a variable.
		Returns zero if none are available.
		Returns -1 if something is wrong.
		See also |clientserver|.
		This function is not available in the |sandbox|.
		{only available when compiled with the |+clientserver| feature}
		Examples: >
			:let repl = ""
			:echo "PEEK: ".remote_peek(id, "repl").": ".repl

remote_read({serverid})				*remote_read()*
		Return the oldest available reply from {serverid} and consume
		it.  It blocks until a reply is available.
		See also |clientserver|.
		This function is not available in the |sandbox|.
		{only available when compiled with the |+clientserver| feature}
		Example: >
			:echo remote_read(id)
<
							*remote_send()* *E241*
remote_send({server}, {string} [, {idvar}])
		Send the {string} to {server}.  The string is sent as input
		keys and the function returns immediately.  At the Vim server
		the keys are not mapped |:map|.
		If {idvar} is present, it is taken as the name of a variable
		and a {serverid} for later use with remote_read() is stored
		there.
		See also |clientserver| |RemoteReply|.
		This function is not available in the |sandbox|.
		{only available when compiled with the |+clientserver| feature}
		Note: Any errors will be reported in the server and may mess
		up the display.
		Examples: >
		:echo remote_send("gvim", ":DropAndReply ".file, "serverid").
		 \ remote_read(serverid)

		:autocmd NONE RemoteReply *
		 \ echo remote_read(expand("<amatch>"))
		:echo remote_send("gvim", ":sleep 10 | echo ".
		 \ 'server2client(expand("<client>"), "HELLO")<CR>')
<
remove({list}, {idx} [, {end}])				*remove()*
		Without {end}: Remove the item at {idx} from |List| {list} and
		return it.
		With {end}: Remove items from {idx} to {end} (inclusive) and
		return a list with these items.  When {idx} points to the same
		item as {end} a list with one item is returned.  When {end}
		points to an item before {idx} this is an error.
		See |list-index| for possible values of {idx} and {end}.
		Example: >
			:echo "last item: " . remove(mylist, -1)
			:call remove(mylist, 0, 9)
remove({dict}, {key})
		Remove the entry from {dict} with key {key}.  Example: >
			:echo "removed " . remove(dict, "one")
<		If there is no {key} in {dict} this is an error.

		Use |delete()| to remove a file.


rename({from}, {to})					*rename()*
		ファイルの名前を{from}から{to}へ変える。ファイルシステムを越え
		てファイルを移動するのにも使用できる。結果は数値で、成功すれば
		0、失敗すれば非ゼロになる。
		This function is not available in the |sandbox|.

repeat({expr}, {count})					*repeat()*
		Repeat {expr} {count} times and return the concatenated
		result.  Example: >
			:let separator = repeat('-', 80)
<		When {count} is zero or negative the result is empty.
		When {expr} is a |List| the result is {expr} concatenated
		{count} times.  Example: >
			:let longlist = repeat(['a', 'b'], 3)
<		Results in ['a', 'b', 'a', 'b', 'a', 'b'].


resolve({filename})					*resolve()* *E655*
		On MS-Windows, when {filename} is a shortcut (a .lnk file),
		returns the path the shortcut points to in a simplified form.
		On Unix, repeat resolving symbolic links in all path
		components of {filename} and return the simplified result.
		To cope with link cycles, resolving of symbolic links is
		stopped after 100 iterations.
		On other systems, return the simplified {filename}.
		The simplification step is done as by |simplify()|.
		resolve() keeps a leading path component specifying the
		current directory (provided the result is still a relative
		path name) and also keeps a trailing path separator.

							*reverse()*
reverse({list})	Reverse the order of items in {list} in-place.  Returns
		{list}.
		If you want a list to remain unmodified make a copy first: >
			:let revlist = reverse(copy(mylist))

search({pattern} [, {flags} [, {stopline}]])			*search()*
		Search for regexp pattern {pattern}.  The search starts at the
		cursor position (you can use |cursor()| to set it).

		{flags} is a String, which can contain these character flags:
		'b'	search backward instead of forward
		'c'     accept a match at the cursor position
		'e'	move to the End of the match
		'n'	do Not move the cursor
		'p'	return number of matching sub-pattern (see below)
		's'	set the ' mark at the previous location of the cursor
		'w'	wrap around the end of the file
		'W'	don't wrap around the end of the file
		If neither 'w' or 'W' is given, the 'wrapscan' option applies.

		If the 's' flag is supplied, the ' mark is set, only if the
		cursor is moved. The 's' flag cannot be combined with the 'n'
		flag.

		'ignorecase', 'smartcase' and 'magic' are used.

		When the {stopline} argument is given then the search stops
		after searching this line.  This is useful to restrict the
		search to a range of lines.  Examples: >
			let match = search('(', 'b', line("w0"))
			let end = search('END', '', line("w$"))
<		When {stopline} is used and it is not zero this also implies
		that the search does not wrap around the end of the file.

		If there is no match a 0 is returned and the cursor doesn't
		move.  No error message is given.
		When a match has been found its line number is returned.
							*search()-sub-match*
		With the 'p' flag the returned value is one more than the
		first sub-match in \(\).  One if none of them matched but the
		whole pattern did match.
		To get the column number too use |searchpos()|.

		The cursor will be positioned at the match, unless the 'n'
		flag is used.

		Example (goes over all files in the argument list): >
		    :let n = 1
		    :while n <= argc()	    " loop over all files in arglist
		    :  exe "argument " . n
		    :  " start at the last char in the file and wrap for the
		    :  " first search to find match at start of file
		    :  normal G$
		    :  let flags = "w"
		    :  while search("foo", flags) > 0
		    :    s/foo/bar/g
		    :	 let flags = "W"
		    :  endwhile
		    :  update		    " write the file if modified
		    :  let n = n + 1
		    :endwhile
<
		Example for using some flags: >
		    :echo search('\<if\|\(else\)\|\(endif\)', 'ncpe')
<		This will search for the keywords "if", "else", and "endif"
		under or after the cursor.  Because of the 'p' flag, it
		returns 1, 2, or 3 depending on which keyword is found, or 0
		if the search fails.  With the cursor on the first word of the
		line:
		    if (foo == 0) | let foo = foo + 1 | endif ~
		the function returns 1.  Without the 'c' flag, the function
		finds the "endif" and returns 3.  The same thing happens
		without the 'e' flag if the cursor is on the "f" of "if".
		The 'n' flag tells the function not to move the cursor.


searchdecl({name} [, {global} [, {thisblock}]])			*searchdecl()*
		Search for the declaration of {name}.

		With a non-zero {global} argument it works like |gD|, find
		first match in the file.  Otherwise it works like |gd|, find
		first match in the function.

		With a non-zero {thisblock} argument matches in a {} block
		that ends before the cursor position are ignored.  Avoids
		finding variable declarations only valid in another scope.

		Moves the cursor to the found match.
		Returns zero for success, non-zero for failure.
		Example: >
			if searchdecl('myvar') == 0
			   echo getline('.')
			endif
<
							*searchpair()*
searchpair({start}, {middle}, {end} [, {flags} [, {skip} [, {stopline}]]])
		Search for the match of a nested start-end pair.  This can be
		used to find the "endif" that matches an "if", while other
		if/endif pairs in between are ignored.
		The search starts at the cursor.  The default is to search
		forward, include 'b' in {flags} to search backward.
		If a match is found, the cursor is positioned at it and the
		line number is returned.  If no match is found 0 or -1 is
		returned and the cursor doesn't move.  No error message is
		given.

		{start}, {middle} and {end} are patterns, see |pattern|.  They
		must not contain \( \) pairs.  Use of \%( \) is allowed.  When
		{middle} is not empty, it is found when searching from either
		direction, but only when not in a nested start-end pair.  A
		typical use is: >
			searchpair('\<if\>', '\<else\>', '\<endif\>')
<		By leaving {middle} empty the "else" is skipped.

		{flags} 'b', 'c', 'n', 's', 'w' and 'W' are used like with
		|search()|.  Additionally:
		'r'	Repeat until no more matches found; will find the
			outer pair
		'm'	return number of Matches instead of line number with
			the match; will be > 1 when 'r' is used.

		When a match for {start}, {middle} or {end} is found, the
		{skip} expression is evaluated with the cursor positioned on
		the start of the match.  It should return non-zero if this
		match is to be skipped.  E.g., because it is inside a comment
		or a string.
		When {skip} is omitted or empty, every match is accepted.
		When evaluating {skip} causes an error the search is aborted
		and -1 returned.

		For {stopline} see |search()|.

		The value of 'ignorecase' is used.  'magic' is ignored, the
		patterns are used like it's on.

		The search starts exactly at the cursor.  A match with
		{start}, {middle} or {end} at the next character, in the
		direction of searching, is the first one found.  Example: >
			if 1
			  if 2
			  endif 2
			endif 1
<		When starting at the "if 2", with the cursor on the "i", and
		searching forwards, the "endif 2" is found.  When starting on
		the character just before the "if 2", the "endif 1" will be
		found.  That's because the "if 2" will be found first, and
		then this is considered to be a nested if/endif from "if 2" to
		"endif 2".
		When searching backwards and {end} is more than one character,
		it may be useful to put "\zs" at the end of the pattern, so
		that when the cursor is inside a match with the end it finds
		the matching start.

		Example, to find the "endif" command in a Vim script: >

	:echo searchpair('\<if\>', '\<el\%[seif]\>', '\<en\%[dif]\>', 'W',
			\ 'getline(".") =~ "^\\s*\""')

<		The cursor must be at or after the "if" for which a match is
		to be found.  Note that single-quote strings are used to avoid
		having to double the backslashes.  The skip expression only
		catches comments at the start of a line, not after a command.
		Also, a word "en" or "if" halfway a line is considered a
		match.
		Another example, to search for the matching "{" of a "}": >

	:echo searchpair('{', '', '}', 'bW')

<		This works when the cursor is at or before the "}" for which a
		match is to be found.  To reject matches that syntax
		highlighting recognized as strings: >

	:echo searchpair('{', '', '}', 'bW',
	     \ 'synIDattr(synID(line("."), col("."), 0), "name") =~? "string"')
<
							*searchpairpos()*
searchpairpos({start}, {middle}, {end} [, {flags} [, {skip} [, {stopline}]]])
		Same as searchpair(), but returns a |List| with the line and
		column position of the match. The first element of the |List|
		is the line number and the second element is the byte index of
		the column position of the match.  If no match is found,
		returns [0, 0].
>
			:let [lnum,col] = searchpairpos('{', '', '}', 'n')
<
		See |match-parens| for a bigger and more useful example.

searchpos({pattern} [, {flags} [, {stopline}]])		*searchpos()*
		Same as |search()|, but returns a |List| with the line and
		column position of the match. The first element of the |List|
		is the line number and the second element is the byte index of
		the column position of the match. If no match is found,
		returns [0, 0].
		Example: >
	:let [lnum, col] = searchpos('mypattern', 'n')

<		When the 'p' flag is given then there is an extra item with
		the sub-pattern match number |search()-sub-match|.  Example: >
	:let [lnum, col, submatch] = searchpos('\(\l\)\|\(\u\)', 'np')
<		In this example "submatch" is 2 when a lowercase letter is
		found |/\l|, 3 when an uppercase letter is found |/\u|.

server2client( {clientid}, {string})			*server2client()*
		Send a reply string to {clientid}.  The most recent {clientid}
		that sent a string can be retrieved with expand("<client>").
		{only available when compiled with the |+clientserver| feature}
		Note:
		This id has to be stored before the next command can be
		received.  I.e. before returning from the received command and
		before calling any commands that waits for input.
		See also |clientserver|.
		Example: >
			:echo server2client(expand("<client>"), "HELLO")
<
serverlist()					*serverlist()*
		Return a list of available server names, one per line.
		When there are no servers or the information is not available
		an empty string is returned.  See also |clientserver|.
		{only available when compiled with the |+clientserver| feature}
		Example: >
			:echo serverlist()
<
setbufvar({expr}, {varname}, {val})			*setbufvar()*
		Set option or local variable {varname} in buffer {expr} to
		{val}.
		This also works for a global or local window option, but it
		doesn't work for a global or local window variable.
		For a local window option the global value is unchanged.
		For the use of {expr}, see |bufname()| above.
		Note that the variable name without "b:" must be used.
		Examples: >
			:call setbufvar(1, "&mod", 1)
			:call setbufvar("todo", "myvar", "foobar")
<		This function is not available in the |sandbox|.

setcmdpos({pos})					*setcmdpos()*
		Set the cursor position in the command line to byte position
		{pos}.  The first position is 1.
		Use |getcmdpos()| to obtain the current position.
		Only works while editing the command line, thus you must use
		|c_CTRL-\_e|, |c_CTRL-R_=| or |c_CTRL-R_CTRL-R| with '='.  For
		|c_CTRL-\_e| and |c_CTRL-R_CTRL-R| with '=' the position is
		set after the command line is set to the expression.  For
		|c_CTRL-R_=| it is set after evaluating the expression but
		before inserting the resulting text.
		When the number is too big the cursor is put at the end of the
		line.  A number smaller than one has undefined results.
		Returns 0 when successful, 1 when not editing the command
		line.

setline({lnum}, {line})					*setline()*
		Set line {lnum} of the current buffer to {line}.
		{lnum} is used like with |getline()|.
		When {lnum} is just below the last line the {line} will be
		added as a new line.
		If this succeeds, 0 is returned.  If this fails (most likely
		because {lnum} is invalid) 1 is returned.  Example: >
			:call setline(5, strftime("%c"))
<		When {line} is a |List| then line {lnum} and following lines
		will be set to the items in the list.  Example: >
			:call setline(5, ['aaa', 'bbb', 'ccc'])
<		This is equivalent to: >
			:for [n, l] in [[5, 6, 7], ['aaa', 'bbb', 'ccc']]
			:  call setline(n, l)
			:endfor
<		Note: The '[ and '] marks are not set.

setloclist({nr}, {list} [, {action}])			*setloclist()*
		Create or replace or add to the location list for window {nr}.
		When {nr} is zero the current window is used. For a location
		list window, the displayed location list is modified.  For an
		invalid window number {nr}, -1 is returned.
		Otherwise, same as setqflist().

							*setpos()*
setpos({expr}, {list})
		Set the position for {expr}.  Possible values:
			.	the cursor
			'x	mark x

		{list} must be a |List| with four numbers:
		    [bufnum, lnum, col, off]

		"bufnum" is the buffer number.  Zero can be used for the
		current buffer.  Setting the cursor is only possible for
		the current buffer.  To set a mark in another buffer you can
		use the |bufnr()| function to turn a file name into a buffer
		number.
		Does not change the jumplist.

		"lnum" and "col" are the position in the buffer.  The first
		column is 1.  Use a zero "lnum" to delete a mark.

		The "off" number is only used when 'virtualedit' is set. Then
		it is the offset in screen columns from the start of the
		character.  E.g., a position within a <Tab> or after the last
		character.

		Also see |getpos()|

		This does not restore the preferred column for moving
		vertically.  See |winrestview()| for that.


setqflist({list} [, {action}])				*setqflist()*
		Create or replace or add to the quickfix list using the items
		in {list}.  Each item in {list} is a dictionary.
		Non-dictionary items in {list} are ignored.  Each dictionary
		item can contain the following entries:

		    bufnr	buffer number; must be the number of a valid
		    		buffer
		    filename	name of a file; only used when "bufnr" is not
		    		present or it is invalid.
		    lnum	line number in the file
		    pattern	search pattern used to locate the error
		    col		column number
		    vcol	when non-zero: "col" is visual column
				when zero: "col" is byte index
		    nr		error number
		    text	description of the error
		    type	single-character error type, 'E', 'W', etc.

		The "col", "vcol", "nr", "type" and "text" entries are
		optional.  Either "lnum" or "pattern" entry can be used to
		locate a matching error line.
		If the "filename" and "bufnr" entries are not present or
		neither the "lnum" or "pattern" entries are present, then the
		item will not be handled as an error line.
		If both "pattern" and "lnum" are present then "pattern" will
		be used.
		Note that the list is not exactly the same as what
		|getqflist()| returns.

		If {action} is set to 'a', then the items from {list} are
		added to the existing quickfix list. If there is no existing
		list, then a new list is created. If {action} is set to 'r',
		then the items from the current quickfix list are replaced
		with the items from {list}. If {action} is not present or is
		set to ' ', then a new list is created.

		Returns zero for success, -1 for failure.

		This function can be used to create a quickfix list
		independent of the 'errorformat' setting.  Use a command like
		":cc 1" to jump to the first position.


							*setreg()*
setreg({regname}, {value} [,{options}])
		Set the register {regname} to {value}.
		If {options} contains "a" or {regname} is upper case,
		then the value is appended.
		{options} can also contains a register type specification:
		    "c" or "v"	      |characterwise| mode
		    "l" or "V"	      |linewise| mode
		    "b" or "<CTRL-V>" |blockwise-visual| mode
		If a number immediately follows "b" or "<CTRL-V>" then this is
		used as the width of the selection - if it is not specified
		then the width of the block is set to the number of characters
		in the longest line (counting a <Tab> as 1 character).

		If {options} contains no register settings, then the default
		is to use character mode unless {value} ends in a <NL>.
		Setting the '=' register is not possible.
		Returns zero for success, non-zero for failure.

		Examples: >
			:call setreg(v:register, @*)
			:call setreg('*', @%, 'ac')
			:call setreg('a', "1\n2\n3", 'b5')

<		This example shows using the functions to save and restore a
		register. >
			:let var_a = getreg('a', 1)
			:let var_amode = getregtype('a')
			    ....
			:call setreg('a', var_a, var_amode)

<		You can also change the type of a register by appending
		nothing: >
			:call setreg('a', '', 'al')

settabwinvar({tabnr}, {winnr}, {varname}, {val})	*settabwinvar()*
		Set option or local variable {varname} in window {winnr} to
		{val}.
		Tabs are numbered starting with one.  For the current tabpage
		use |setwinvar()|.
		When {winnr} is zero the current window is used.
		This also works for a global or local buffer option, but it
		doesn't work for a global or local buffer variable.
		For a local buffer option the global value is unchanged.
		Note that the variable name without "w:" must be used.
		Vim briefly goes to the tab page {tabnr}, this may trigger
		TabLeave and TabEnter autocommands.
		Examples: >
			:call settabwinvar(1, 1, "&list", 0)
			:call settabwinvar(3, 2, "myvar", "foobar")
<		This function is not available in the |sandbox|.

setwinvar({nr}, {varname}, {val})			*setwinvar()*
		Like |settabwinvar()| for the current tab page.
		Examples: >
			:call setwinvar(1, "&list", 0)
			:call setwinvar(2, "myvar", "foobar")

shellescape({string})					*shellescape()*
		Escape {string} for use as shell command argument.
		On MS-Windows and MS-DOS, when 'shellslash' is not set, it
		will enclose {string} double quotes and double all double
		quotes within {string}.
		For other systems, it will enclose {string} in single quotes
		and replace all "'" with "'\''".
		Example: >
			:echo shellescape('c:\program files\vim')
<		results in:
			"c:\program files\vim" ~
		Example usage: >
			:call system("chmod +x -- " . shellescape(expand("%")))


simplify({filename})					*simplify()*
		Simplify the file name as much as possible without changing
		the meaning.  Shortcuts (on MS-Windows) or symbolic links (on
		Unix) are not resolved.  If the first path component in
		{filename} designates the current directory, this will be
		valid for the result as well.  A trailing path separator is
		not removed either.
		Example: >
			simplify("./dir/.././/file/") == "./file/"
<		Note: The combination "dir/.." is only removed if "dir" is
		a searchable directory or does not exist.  On Unix, it is also
		removed when "dir" is a symbolic link within the same
		directory.  In order to resolve all the involved symbolic
		links before simplifying the path name, use |resolve()|.


sort({list} [, {func}])					*sort()* *E702*
		Sort the items in {list} in-place.  Returns {list}.  If you
		want a list to remain unmodified make a copy first: >
			:let sortedlist = sort(copy(mylist))
<		Uses the string representation of each item to sort on.
		Numbers sort after Strings, |Lists| after Numbers.
		For sorting text in the current buffer use |:sort|.
		When {func} is given and it is one then case is ignored.
		When {func} is a |Funcref| or a function name, this function
		is called to compare items.  The function is invoked with two
		items as argument and must return zero if they are equal, 1 if
		the first one sorts after the second one, -1 if the first one
		sorts before the second one.  Example: >
			func MyCompare(i1, i2)
			   return a:i1 == a:i2 ? 0 : a:i1 > a:i2 ? 1 : -1
			endfunc
			let sortedlist = sort(mylist, "MyCompare")
<

							*soundfold()*
soundfold({word})
		Return the sound-folded equivalent of {word}.  Uses the first
		language in 'spellang' for the current window that supports
		soundfolding.  'spell' must be set.  When no sound folding is
		possible the {word} is returned unmodified.
		This can be used for making spelling suggestions.  Note that
		the method can be quite slow.

							*spellbadword()*
spellbadword([{sentence}])
		Without argument: The result is the badly spelled word under
		or after the cursor.  The cursor is moved to the start of the
		bad word.  When no bad word is found in the cursor line the
		result is an empty string and the cursor doesn't move.

		With argument: The result is the first word in {sentence} that
		is badly spelled.  If there are no spelling mistakes the
		result is an empty string.

		The return value is a list with two items:
		- The badly spelled word or an empty string.
		- The type of the spelling error:
			"bad"		spelling mistake
			"rare"		rare word
			"local"		word only valid in another region
			"caps"		word should start with Capital
		Example: >
			echo spellbadword("the quik brown fox")
<			['quik', 'bad'] ~

		The spelling information for the current window is used.  The
		'spell' option must be set and the value of 'spelllang' is
		used.

							*spellsuggest()*
spellsuggest({word} [, {max} [, {capital}]])
		Return a |List| with spelling suggestions to replace {word}.
		When {max} is given up to this number of suggestions are
		returned.  Otherwise up to 25 suggestions are returned.

		When the {capital} argument is given and it's non-zero only
		suggestions with a leading capital will be given.  Use this
		after a match with 'spellcapcheck'.

		{word} can be a badly spelled word followed by other text.
		This allows for joining two words that were split.  The
		suggestions also include the following text, thus you can
		replace a line.

		{word} may also be a good word.  Similar words will then be
		returned.  {word} itself is not included in the suggestions,
		although it may appear capitalized.

		The spelling information for the current window is used.  The
		'spell' option must be set and the values of 'spelllang' and
		'spellsuggest' are used.


split({expr} [, {pattern} [, {keepempty}]])			*split()*
		Make a |List| out of {expr}.  When {pattern} is omitted or
		empty each white-separated sequence of characters becomes an
		item.
		Otherwise the string is split where {pattern} matches,
		removing the matched characters.
		When the first or last item is empty it is omitted, unless the
		{keepempty} argument is given and it's non-zero.
		Other empty items are kept when {pattern} matches at least one
		character or when {keepempty} is non-zero.
		Example: >
			:let words = split(getline('.'), '\W\+')
<		To split a string in individual characters: >
			:for c in split(mystring, '\zs')
<		If you want to keep the separator you can also use '\zs': >
			:echo split('abc:def:ghi', ':\zs')
<			['abc:', 'def:', 'ghi'] ~
		Splitting a table where the first element can be empty: >
			:let items = split(line, ':', 1)
<		The opposite function is |join()|.


str2nr( {expr} [, {base}])				*str2nr()*
		Convert string {expr} to a number.
		{base} is the conversion base, it can be 8, 10 or 16.
		When {base} is omitted base 10 is used.  This also means that
		a leading zero doesn't cause octal conversion to be used, as
		with the default String to Number conversion.
		When {base} is 16 a leading "0x" or "0X" is ignored.  With a
		different base the result will be zero.
		Text after the number is silently ignored.

							*strftime()*
strftime({format} [, {time}])
		結果は文字列で、{format}に従って日付や時間がフォーマットされた
		ものになる。{time}が与えられた場合にはそれを使うが、省略された
		場合には現在時刻を使用する。受け付け可能な文字列{format}は使用
		するシステムに依存するので、ポータブルとは言えない。フォーマッ
		トについてはCの関数strftime()のマニュアルを参照。結果は最大80
		文字に制限される。|localtime()|と|getftime()|も参照。例:
>		  :echo strftime("%c")		   Sun Apr 27 11:49:23 1997
>		  :echo strftime("%Y %b %d %X")	   1997 Apr 27 11:53:25
>		  :echo strftime("%y%m%d %T")	   970427 11:53:55
>		  :echo strftime("%H:%M")	   11:55
>		  :echo strftime("%c", getftime("file.c"))
>						   file.cの更新時刻を表示

<		Not available on all systems.  To check use: >
			:if exists("*strftime")

stridx({haystack}, {needle} [, {start}])		*stridx()*
		The result is a Number, which gives the byte index in
		{haystack} of the first occurrence of the String {needle}.
		If {start} is specified, the search starts at index {start}.
		This can be used to find a second match: >
			:let comma1 = stridx(line, ",")
			:let comma2 = stridx(line, ",", comma1 + 1)
<		The search is done case-sensitive.
		For pattern searches use |match()|.
		-1 is returned if the {needle} does not occur in {haystack}.
		See also |strridx()|.
		Examples: >
		  :echo stridx("An Example", "Example")	     3
		  :echo stridx("Starting point", "Start")    0
		  :echo stridx("Starting point", "start")   -1
<						*strstr()* *strchr()*
		stridx() works similar to the C function strstr().  When used
		with a single character it works similar to strchr().

							*string()*
string({expr})	Return {expr} converted to a String.  If {expr} is a Number,
		String or a composition of them, then the result can be parsed
		back with |eval()|.
			{expr} type	result ~
			String		'string'
			Number		123
			Funcref		function('name')
			List		[item, item]
			Dictionary	{key: value, key: value}
		Note that in String values the ' character is doubled.
		Also see |strtrans()|.

							*strlen()*
strlen({expr})	結果は数値で、文字列{expr}の長さ。
		If you want to count the number of multi-byte characters (not
		counting composing characters) use something like this: >

			:let len = strlen(substitute(str, ".", "x", "g"))
<
		If the argument is a Number it is first converted to a String.
		For other types an error is given.
		Also see |len()|.


							*strpart()*
strpart({src}, {start}, {len})
		結果は文字列で、{src}の{start}番目の文字から始まる、長さ{len}
		の部分文字列。存在しない文字を含むように範囲を指定しても、エ
		ラーにはならない。単に文字が省略されるだけである。
>			strpart("abcdefg", 3, 2)    == "de"
>			strpart("abcdefg", -2, 4)   == "ab"
>			strpart("abcdefg", 5, 4)    == "fg"
		注意: 文字列の最初の文字を指定するためには、{start}は0でなけれ
		ばならない。カーソルのある位置から3文字を取得する例:
>			strpart(getline("."), col(".") - 1, 3)

strridx({haystack}, {needle} [, {start}])			*strridx()*
		The result is a Number, which gives the byte index in
		{haystack} of the last occurrence of the String {needle}.
		When {start} is specified, matches beyond this index are
		ignored.  This can be used to find a match before a previous
		match: >
			:let lastcomma = strridx(line, ",")
			:let comma2 = strridx(line, ",", lastcomma - 1)
<		The search is done case-sensitive.
		For pattern searches use |match()|.
		-1 is returned if the {needle} does not occur in {haystack}.
		If the {needle} is empty the length of {haystack} is returned.
		See also |stridx()|.  Examples: >
		  :echo strridx("an angry armadillo", "an")	     3
<							*strrchr()*
		When used with a single character it works similar to the C
		function strrchr().

							*strtrans()*
strtrans({expr})
		結果は文字列で、{expr}内の表示不可能な文字を|'isprint'|で指定
		される、表示可能な文字に変換したもの。ウィンドウに表示すること
		ができるようになる。例:
>			echo strtrans(@a)
		これはレジスタの中の改行を、改行として表示する変わりに"^@"と表
		示する。

submatch({nr})						*submatch()*
		Only for an expression in a |:substitute| command.  Returns
		the {nr}'th submatch of the matched text.  When {nr} is 0
		the whole matched text is returned.
		Example: >
			:s/\d\+/\=submatch(0) + 1/
<		This finds the first number in the line and adds one to it.
		A line break is included as a newline character.

							*substitute()*
substitute({expr}, {pat}, {sub}, {flags})
		結果は文字列で、{expr}内で最初に{pat}にマッチした部分を{sub}に
		置換えたコピーになる。これはコマンド":substitute"(一切のフラグ
		無し)のように働く。しかしマッチングは常にオプション'magic'が設
		定され、オプション'cpoptions'は空にして実行される(スクリプトを
		ポータブルにするため)。加えて{sub}内の"~"は前回の{sub}に置換さ
		れることはない。
		{sub}内の幾つかのコードには|sub-replaced-special|の特殊な意味
		があることに注意。例えば、何かの文字列をリテラルの"\n"に置換え
		るためには、"\\\\n"か'\\n'を使う必要がある。
		{pat}が{expr}の何処にもマッチしなければ、{expr}が何の変更も受
		けずに返される。
		{flags}が"g"であれば{expr}内の{pat}にマッチする総ての部分が置
		換される。それを希望しない場合には{flags}は""にすべきである。
		例:
>			:let &path = substitute(&path, ",\\=[^,]*$", "", "")
		これはオプション'path'の最後のコンポーネントを削除する。
>			:echo substitute("testing", ".*", "\\U\\0", "")
		結果は"TESTING"。

synID({lnum}, {col}, {trans})				*synID()*
		結果は数値で、現在のウィンドウ内での位置{lnum}と{col}の位置の
		シンタックスID。
		シンタックスIDは|synIDattr()|と|synIDtrans()|に渡すことで、テ
		キストについてのシンタックス情報を取得するのに使用できる。
		
		最左のカラムを指定するには{col}に1を、最初の行を指定するには
		{line}に1を指定する。'synmaxcol' applies, in a longer line
		zero is returned.

		{trans}が非ゼロならば、透過属性のアイテムは省略され、実際に表
		示されているアイテムが評価対象になる。これは実際に有効になって
		いるカラーを知りたい時に役に立つ。{trans}がゼロならば、透過属
		性のアイテムが返される。これはどのシンタックスアイテムが有効に
		なっているかを知りたい時に役に立つ(例:カッコの中とか)。
		警告: この関数は非常に遅い。ファイルを順方向に走査する時にだけ
		ベストなスピードが得られる。

		例(カーソルの下のシンタックスアイテムの名前を表示する):
>			:echo synIDattr(synID(line("."), col("."), 1), "name")

							*synIDattr()*
synIDattr({synID}, {what} [, {mode}])
		結果は文字列で、{synID}の属性{what}の内容を示す。これはシン
		タックスアイテムの情報を取得するのに使用できる。
		{mode}には取得したいモードの属性に応じて、"gui"か"cterm"か
		"term"が指定できる。{mode}が省略されるか、無効な値が指定された
		場合、現在有効になっているハイライトモードが使用される(GUI、
		cterm、termのどれか)
		ハイライトグループにリンクされた属性を取得するにはsynIDtrans()
		を使用する。
		{what}		結果
		"name"		シンタックスアイテムの名前
		"fg"		前景色(GUI:カラー名、cterm:文字列としてのカ
				ラー番号、term空文字列)
		"bg"		背景色("fg"同様)
		"fg#"		"fg"同様だが、"#RRGGBB"のフォーマットで
		"bg#"		"bg"同様だが、"#RRGGBB"のフォーマットで
		"bold"		太字なら"1"
		"italic"	斜体なら"1"
		"reverse"	反転なら"1"
		"inverse"	反転(原文inverse)なら"1"(reverseと等価)
		"underline"	下線付きなら"1"
		"undercurl"	"1" if undercurled

		GUIではなく、ctermモードが要求されていない場合、"fg#"は"fg"と
		同じに、"bg#"は"bg"と同じになる。

		例(カーソルの下のシンタックスアイテムの名前を表示する):
>	:echo synIDattr(synIDtrans(synID(line("."), col("."), 1)), "fg")

							*synIDtrans()*
synIDtrans({synID})
		結果は数値で、{synID}をシンタックスIDに変換したもの。キャラク
		タをハイライト表示しているシンタックスグループのIDである。
		":highlight link"によって与えられるハイライトのリンクはこれに
		従っている。

system({expr} [, {input}])				*system()* *E677*
		シェルコマンド{expr}の実行結果を得る。
		{input}が与えられた場合は、この文字列はファイルに書き出され、
		コマンドの標準入力として渡される。この文字列はそのまま(as-is)
		書き出され、正しい改行文字を使うよう自分自身で気を付けなければ
		ならない。パイプは使われない。
		注意: {expr}内の改行はコマンドを失敗させるだろう。
		'shellquote'と'shellxquote'に入っている文字は問題を引き起こす
		かもしれない。
		対話的なコマンドを使用することはできない。
		結果は文字列。例: >

			:let files = system("ls")

<		システムに依存しないような結果にするために、シェルの出力にはマッ
		キントッシュにおいては<CR>を<NL>に変換し、DOS系のシステムにお
		いては<CR><NL>を<NL>に変換するフィルタを作用させている。
		実行されるコマンドはいくつかのオプションを適用して構成される:
	'shell' 'shellcmdflag' 'shellxquote' {expr} 'shellredir' {tmp} 'shellxquote'
		({tmp}は自動的に生成されるファイル名)
		UnixとOS/2ではコマンドの連結ができるように{expr}の両側に波括弧
		が置かれる。

		コマンドは「coocked」モードで実行される。そのためCTRL-Cでコマ
		ンドを中断できる(少なくともUnixでは)。

		エラーコードは|v:shell_error|に格納される。
		この関数は|restrict-mode|では失敗する。

		Note that any wrong value in the options mentioned above may
		make the function fail.  It has also been reported to fail
		when using a security agent application.
		Unlike ":!cmd" there is no automatic check for changed files.
		Use |:checktime| to force a check.

tabpagebuflist([{arg}])					*tabpagebuflist()*
		The result is a |List|, where each item is the number of the
		buffer associated with each window in the current tab page.
		{arg} specifies the number of tab page to be used.  When
		omitted the current tab page is used.
		When {arg} is invalid the number zero is returned.
		To get a list of all buffers in all tabs use this: >
			tablist = []
			for i in range(tabpagenr('$'))
			   call extend(tablist, tabpagebuflist(i + 1))
			endfor
<		Note that a buffer may appear in more than one window.


tabpagenr([{arg}])					*tabpagenr()*
		The result is a Number, which is the number of the current
		tab page.  The first tab page has number 1.
		When the optional argument is "$", the number of the last tab
		page is returned (the tab page count).
		The number can be used with the |:tab| command.


tabpagewinnr({tabarg}, [{arg}])				*tabpagewinnr()*
		Like |winnr()| but for tab page {arg}.
		{tabarg} specifies the number of tab page to be used.
		{arg} is used like with |winnr()|:
		- When omitted the current window number is returned.  This is
		  the window which will be used when going to this tab page.
		- When "$" the number of windows is returned.
		- When "#" the previous window nr is returned.
		Useful examples: >
		    tabpagewinnr(1)	    " current window of tab page 1
		    tabpagewinnr(4, '$')    " number of windows in tab page 4
<		When {tabarg} is invalid zero is returned.

							*tagfiles()*
tagfiles()	Returns a |List| with the file names used to search for tags
		for the current buffer.  This is the 'tags' option expanded.


taglist({expr})							*taglist()*
		Returns a list of tags matching the regular expression {expr}.
		Each list item is a dictionary with at least the following
		entries:
			name		Name of the tag.
			filename	Name of the file where the tag is
					defined.  It is either relative to the
					current directory or a full path.
			cmd		Ex command used to locate the tag in
					the file.
			kind		Type of the tag.  The value for this
					entry depends on the language specific
					kind values.  Only available when
					using a tags file generated by
					Exuberant ctags or hdrtag.
			static		A file specific tag.  Refer to
					|static-tag| for more information.
		More entries may be present, depending on the content of the
		tags file: access, implementation, inherits and signature.
		Refer to the ctags documentation for information about these
		fields.  For C code the fields "struct", "class" and "enum"
		may appear, they give the name of the entity the tag is
		contained in.

		The ex-command 'cmd' can be either an ex search pattern, a
		line number or a line number followed by a byte number.

		If there are no matching tags, then an empty list is returned.

		To get an exact tag match, the anchors '^' and '$' should be
		used in {expr}.  Refer to |tag-regexp| for more information
		about the tag search regular expression pattern.

		Refer to |'tags'| for information about how the tags file is
		located by Vim. Refer to |tags-file-format| for the format of
		the tags file generated by the different ctags tools.

						*tempname()* *temp-file-name*
tempname()
		結果は文字列で、存在しないファイルのファイル名を示す。これはテ
		ンポラリファイルの名前として使用可能である。少なくとも連続26回
		の呼出しまでは違う名前を生成することが保証される。例:
>			let tmpfile = tempname()
>			exe "redir > " . tmpfile

tolower({expr})						*tolower()*
		The result is a copy of the String given, with all uppercase
		characters turned into lowercase (just like applying |gu| to
		the string).

toupper({expr})						*toupper()*
		The result is a copy of the String given, with all lowercase
		characters turned into uppercase (just like applying |gU| to
		the string).

tr({src}, {fromstr}, {tostr})				*tr()*
		The result is a copy of the {src} string with all characters
		which appear in {fromstr} replaced by the character in that
		position in the {tostr} string.  Thus the first character in
		{fromstr} is translated into the first character in {tostr}
		and so on.  Exactly like the unix "tr" command.
		This code also deals with multibyte characters properly.

		Examples: >
			echo tr("hello there", "ht", "HT")
<		returns "Hello THere" >
			echo tr("<blob>", "<>", "{}")
<		returns "{blob}"

							*type()*
type({expr})	The result is a Number, depending on the type of {expr}:
			Number:	    0
			String:	    1
			Funcref:    2
			List:	    3
			Dictionary: 4
		To avoid the magic numbers it should be used this way: >
			:if type(myvar) == type(0)
			:if type(myvar) == type("")
			:if type(myvar) == type(function("tr"))
			:if type(myvar) == type([])
			:if type(myvar) == type({})

values({dict})						*values()*
		Return a |List| with all the values of {dict}.  The |List| is
		in arbitrary order.


							*virtcol()*
virtcol({expr})
		結果は数値で、{expr}で与えられるファイルの位置の、スクリーン上
		での列の位置を示す。返る値は、指定された位置にあるキャラクタの
		末尾が、スクリーン座標(の列)でどこに存在するかである。<Tab>(タ
		ブ文字)が指定した位置にあった場合には、戻り値はそのタブの最後
		のカラム(列)位置になる。具体的に、'ts'が8に設定された状態でカ
		ラム1に<Tab>があった場合、戻ってくる値は8になる。
		For the use of {expr} see |col()|.  Additionally you can use
		[lnum, col]: a |List| with the line and column number.  When
		"lnum" or "col" is out of range then virtcol() returns zero.
		When 'virtualedit' is used it can be [lnum, col, off], where
		"off" is the offset in screen columns from the start of the
		character.  E.g., a position within a <Tab> or after the last
		character.
		可能な位置指定:
		    .	    カーソルの位置
		    'x	    マークxの位置(マークが設定されていない場合、0が返
			    る)
		現在のファイルに対して設定されているマークだけが使用可能なこと
		に注意。
		例: >
  virtcol(".")	    "foo^Lbar"の"^L"の位置にカーソル、戻り値5
  virtcol("$")	   with text "foo^Lbar", returns 9
  virtcol("'t")    "    there"の'h'に'tを設定、戻り値6
<		最初の列は1となる。0はエラーとして返される。
		A more advanced example that echoes the maximum length of
		all lines: >
		    echo max(map(range(1, line('$')), "virtcol([v:val, '$'])"))

							*visualmode()*
visualmode()
		結果は文字列で、最後に使われたVisualモードを教えてくれる。初期
		状態では単に空文字列を返すだけだが、一度でもVisualモードが使わ
		れた場合、その種類によって"v"か"V"か"<CTRL-V>"(CTRL-Vのキャラ
		クタが1文字で)返される。これはそれぞれキャラクタ選択、行選択、
		ブロック選択を意味している。
		例:
>			exe "normal " . visualmode()
		これは最後に使われたのと同じVisualモードに入る。また、スクリプ
		トの動作を、最後に使われたVisualモードに応じて変更したい場合に
		も便利だろう。

							*winbufnr()*
winbufnr({nr})	結果は数値で、{nr}番目のウィンドウに関連付けられているバッファ
		の番号。{nr}が0の場合、現在のウィンドウに関連付けられている
		バッファの番号が返る。{nr}で存在しないウィンドウを指定した場合
		には-1が返る。
		例:
>  echo "The file in the current window is " . bufname(winbufnr(0))

							*wincol()*
wincol()	The result is a Number, which is the virtual column of the
		cursor in the window.  This is counting screen cells from the
		left side of the window.  The leftmost column is one.

							*winheight()*
winheight({nr})
		結果は数値で、{nr}で示されるウィンドウの高さ(行数)を示す。{nr}
		が0ならば、現在のウィンドウの高さが返る。{nr}というウィンドウ
		が存在しない場合、-1が返る。存在しているウィンドウは、絶対に0
		かそれ以上の高さを持っている。
		例:
>  echo "The current window has " . winheight(0) . " lines."

							*winline()*
winline()	The result is a Number, which is the screen line of the cursor
		in the window.  This is counting screen lines from the top of
		the window.  The first line is one.
		If the cursor was moved the view on the file will be updated
		first, this may cause a scroll.

							*winnr()*
winnr()		結果は現在のウィンドウを示す数値。最上位のウィンドウは1であ
		る。
		When the optional argument is "$", the number of the
		last window is returned (the window count).
		When the optional argument is "#", the number of the last
		accessed window is returned (where |CTRL-W_p| goes to).
		If there is no previous window or it is in another tab page 0
		is returned.
		The number can be used with |CTRL-W_w| and ":wincmd w"
		|:wincmd|.
		Also see |tabpagewinnr()|.

							*winrestcmd()*
winrestcmd()	Returns a sequence of |:resize| commands that should restore
		the current window sizes.  Only works properly when no windows
		are opened or closed and the current window and tab page is
		unchanged.
		Example: >
			:let cmd = winrestcmd()
			:call MessWithWindowSizes()
			:exe cmd
<
							*winrestview()*
winrestview({dict})
		Uses the |Dictionary| returned by |winsaveview()| to restore
		the view of the current window.
		If you have changed the values the result is unpredictable.
		If the window size changed the result won't be the same.

							*winsaveview()*
winsaveview()	Returns a |Dictionary| that contains information to restore
		the view of the current window.  Use |winrestview()| to
		restore the view.
		This is useful if you have a mapping that jumps around in the
		buffer and you want to go back to the original view.
		This does not save fold information.  Use the 'foldenable'
		option to temporarily switch off folding, so that folds are
		not opened when moving around.
		The return value includes:
			lnum		cursor line number
			col		cursor column
			coladd		cursor column offset for 'virtualedit'
			curswant	column for vertical movement
			topline		first line in the window
			topfill		filler lines, only in diff mode
			leftcol		first column displayed
			skipcol		columns skipped
		Note that no option values are saved.


winwidth({nr})						*winwidth()*
		The result is a Number, which is the width of window {nr}.
		When {nr} is zero, the width of the current window is
		returned.  When window {nr} doesn't exist, -1 is returned.
		An existing window always has a width of zero or more.
		Examples: >
  :echo "The current window has " . winwidth(0) . " columns."
  :if winwidth(0) <= 50
  :  exe "normal 50\<C-W>|"
  :endif
<
							*writefile()*
writefile({list}, {fname} [, {binary}])
		Write |List| {list} to file {fname}.  Each list item is
		separated with a NL.  Each list item must be a String or
		Number.
		When {binary} is equal to "b" binary mode is used: There will
		not be a NL after the last list item.  An empty item at the
		end does cause the last line in the file to end in a NL.
		All NL characters are replaced with a NUL character.
		Inserting CR characters needs to be done before passing {list}
		to writefile().
		An existing file is overwritten, if possible.
		When the write fails -1 is returned, otherwise 0.  There is an
		error message if the file can't be created or when writing
		fails.
		Also see |readfile()|.
		To copy a file byte for byte: >
			:let fl = readfile("foo", "b")
			:call writefile(fl, "foocopy", "b")
<
							*feature-list*
機能は大別して3つの系統に分けられる:
1.  コンパイル時に|+feature-list|とした時にだけサポートされる機能。例: >
		:if has("cindent")
2.  ある状態の時にだけサポートされる機能。例: >
		:if has("gui_running")
<							*has-patch*
3.  Included patches.  First check |v:version| for the version of Vim.
    Then the "patch123" feature means that patch 123 has been included for
    this version.  Example (checking version 6.2.148 or later): >
	:if v:version > 602 || v:version == 602 && has("patch148")
<   Note that it's possible for patch 147 to be omitted even though 148 is
    included.


all_builtin_terms	総ての組込みターミナルを有効にしてコンパイル
amiga			AMIGAバージョン
arabic			Compiled with Arabic support |Arabic|.
arp			ARPをサポート (Amiga)
autocmd			autocommandsをサポート。|autocommand|
balloon_eval		Compiled with |balloon-eval| support.
balloon_multiline	GUI supports multiline balloons.
beos			BeOSバージョン
browse			|:browse|をサポートし、browseが恐らく動作する
builtin_terms		幾つかの組込みターミナルが有効
byte_offset		'statusline'において'o'がサポートされる
cindent			'cindent'をサポート
clientserver		Compiled with remote invocation support |clientserver|.
clipboard		'clipboard'をサポート
cmdline_compl		|cmdline-completion| コマンドライン補完をサポート
cmdline_hist		Compiled with |cmdline-history| support.
cmdline_info		'showcmd'と'ruler'をサポート
comments		|'comments'|をサポート
cryptv			暗号化をサポート |encryption|
cscope			|cscope|をサポート
compatible		Vi互換度を非常に高めてコンパイルされている
debug			デバッグバージョンである
dialog_con		コンソールダイアログのサポート
dialog_gui		GUIダイアログのサポート
diff			Compiled with |vimdiff| and 'diff' support.
digraphs		digraphsをサポート
dnd			Compiled with support for the "~ register |quote_~|.
dos32			32ビットDOSバージョン (DJGPP)
dos16			16ビットDOSバージョン
ebcdic			Compiled on a machine with ebcdic character set.
emacs_tags		Emacs式のタグファイルをサポート
eval			式評価をサポート。もちろん常に真。
ex_extra		拡張EXコマンドをサポート |+ex_extra|.
extra_search		|'incsearch'|と|'hlsearch'|をサポート
farsi			|farsi|をサポート
file_in_path		|gf|と|<cfile>|をサポート
filterpipe		When 'shelltemp' is off pipes are used for shell
			read/write/filter commands
find_in_path		includeファイル内の検索をサポート |+find_in_path|
fname_case		ファイル名の大文字小文字が区別される(Amiga,MS-DOS,
			そしてWindowsでは区別されないので偽)
folding			Compiled with |folding| support.
footer			Compiled with GUI footer support. |gui-footer|
fork			system()の代わりにfork()/exec()を用いている
gettext			Compiled with message translation |multi-lang|
gui			GUIが有効である
gui_athena		AthenaのGUIが有効である
gui_gtk			GTK+のGUIが有効である
gui_gtk2		Compiled with GTK+ 2 GUI (gui_gtk is also defined).
gui_mac			マッキントッシュのGUIが有効である
gui_motif		MotifのGUIが有効である
gui_photon		Compiled with Photon GUI.
gui_win32		Win32のGUIが有効である
gui_win32s		Win32sのGUIが有効である (Windows 3.1)
gui_running		VimがGUIモードで起動している、もしくは間もなくする
hangul_input		ハングル入力サポート
insert_expand		インサートモード時にCTRL-Xの展開がサポートされる
jumplist		Compiled with |jumplist| support.
keymap			Compiled with 'keymap' support.
langmap			'langmap'サポート
libcall			Compiled with |libcall()| support.
linebreak		'linebreak', 'breakat'そして'showbreak'をサポート
lispindent		lisp式のインデントをサポート
listcmds		Compiled with commands for the buffer list |:files|
			and the argument list |arglist|.
localmap		Compiled with local mappings and abbr. |:map-local|
mac			マッキントッシュバージョン
macunix			Macintosh version of Vim, using Unix files (OS-X).
menu			|:menu|をサポート
mksession		|:mksession|をサポート
modify_fname		ファイル名変換子をサポート |filename-modifiers|
mouse			マウスをサポート
mouseshape		Compiled with support for 'mouseshape'.
mouse_dec		DECのターミナルマウスをサポート
mouse_gpm		gpmをサポート (Linuxのコンソールマウス)
mouse_netterm		nettermのマウスをサポート
mouse_pterm		Compiled with support for qnx pterm mouse.
mouse_xterm		xtermのマウスをサポート
multi_byte		中国語・日本語・韓国語その他の言語をサポート
multi_byte_ime		IMEによる入力をサポート
multi_lang		Compiled with support for multiple languages.
mzscheme		Compiled with MzScheme interface |mzscheme|.
netbeans_intg		Compiled with support for |netbeans|.
netbeans_enabled	Compiled with support for |netbeans| and it's used.
ole			Win32にてOLEオートメーションをサポート
os2			OS/2バージョン
osfiletype		osfiletypesをサポート |+osfiletype|
path_extra		Compiled with up/downwards search in 'path' and 'tags'
perl			Perlインターフェースをサポート
postscript		Compiled with PostScript file printing.
python			Pythonインターフェースをサポート
qnx			QNX version of Vim.
quickfix		|quickfix|をサポート
reltime			Compiled with |reltime()| support.
rightleft		'rightleft'をサポート
ruby			Compiled with Ruby interface |ruby|.
scrollbind		'scrollbind'をサポート
showcmd			'showcmd'をサポート
signs			Compiled with |:sign| support.
smartindent		'smartindent'をサポート
sniff			SniFFインターフェースをサポート
statusline		'statusline', 'rulerformat'そして'titlestring'と
			'iconstring'の特殊フォーマットをサポート
sun_workshop		Compiled with support for Sun |workshop|.
spell			Compiled with spell checking support |spell|.
syntax			シンタックスハイライティングをサポート
syntax_items		現在のバッファに有効なシンタックスが設定されている
system			fork()/exec()の代わりにsystem()が使用されている
tag_binary		タグファイル内のバイナリサーチ |tag-binary-search|
tag_old_static		旧式の静的tagsをサポート |tag-old-static|
tag_any_white		タグファイル内の空白文字をサポート
			files |tag-any-white|.
tcl			TCLインターフェースをサポート
terminfo		termcapの代わりにterminfoをサポート
termresponse		Compiled with support for |t_RV| and |v:termresponse|.
textobjects		|text-objects|をサポート
tgetent			tgetentをサポート。termcapかterminfoファイルが使用可能
title			ウィンドウタイトルをサポート |'title'|.
toolbar			Compiled with support for |gui-toolbar|.
unix			UNIXバージョン
user_commands		ユーザ定義コマンドをサポート
viminfo			viminfoをサポート
vim_starting            Vimの初期化プロセス中は真となる
vertsplit		Compiled with vertically split windows |:vsplit|.
virtualedit		Compiled with 'virtualedit' option.
visual			Compiled with Visual mode.
visualextra		拡張Visualモードをサポート |blockwise-operators|
vms			VMSバージョン
vreplace		Compiled with |gR| and |gr| commands.
wildignore		Compiled with 'wildignore' option.
wildmenu		オプション'wildmenu'を指定してコンパイル
wildignore		オプション'wildignore'を指定してコンパイル
windows			Compiled with support for more than one window.
winaltkeys		オプション'winaltkeys'を指定してコンパイル
win16			Win16バージョン(Windows 3.1)
win32			Win32バージョン(Windows 95/NT)
win32unix		Win32 version of Vim, using Unix files (Cygwin)
win95			Win32 version for MS-Windows 95/98/ME.
writebackup		オプション'writebackup'が起動時にonになる
xfontset		X fontsetをサポート |xfontset|
xim			XIMをサポート |xim|
xsmp			Compiled with X session management support.
xsmp_interact		Compiled with interactive X session management support.
xterm_clipboard		xtermのクリップボードサポート
xterm_save		xtermのスクリーンの保存復帰をサポート
x11			X11をサポート

							*string-match*
Matching a pattern in a String

A regexp pattern as explained at |pattern| is normally used to find a match in
the buffer lines.  When a pattern is used to find a match in a String, almost
everything works in the same way.  The difference is that a String is handled
like it is one line.  When it contains a "\n" character, this is not seen as a
line break for the pattern.  It can be matched with a "\n" in the pattern, or
with ".".  Example: >
	:let a = "aaaa\nxxxx"
	:echo matchstr(a, "..\n..")
	aa
	xx
	:echo matchstr(a, "a.x")
	a
	x

Don't forget that "^" will only match at the first character of the String and
"$" at the last character of the string.  They don't match after or before a
"\n".

==============================================================================
5. 関数定義						*user-functions*

ユーザは自分で新しい関数を定義することができる。その関数は組込み関数とまったく
同じように呼び出せる。関数は一連のExコマンドを実行する。ノーマルモードコマンド
はコマンド|:normal|によって実行できる。

関数名は組込み関数との混同を避ける為、大文字で始まらなければならない。他のスク
リプトで同じ関数名を使用してしまうことを避ける為に、露骨に短い名前は避けるべき
である。関数名を例えば"HTMLcolor()"のように、スクリプトの名前から始めるという
のは良い習慣である。

波括弧変数というものもある(|curly-braces-names|を参照)。また、オートロード
|autoload|機構を使うと、関数が呼ばれたときだけ定義することができる。

							*local-function*
スクリプトローカルな関数の名前は"s:"で始めなければならない。スクリプトローカル
な関数は、そのスクリプトの中の関数から、またはそのスクリプト内で定義されたユー
ザ定義コマンド、オートコマンドからしか呼ぶことができない。そのスクリプト内で定
義されたマッピングにより呼ぶこともできるが、スクリプトの外部でマッピングが展開
された場合は"s:"の代わりに|<SID>|をつけなければならない。

					*:fu* *:function* *E128* *E129* *E123*
:fu[nction]		総ての関数と、その引数を表示する。

:fu[nction] {name}	関数{name}の定義を表示する。
			{name}は辞書|Dictionary|の要素の|Funcref|であってもよ
			い: >
				:function dict.init

:fu[nction] /{pattern}	{pattern}にマッチする名前の関数を表示する。"File"で終
			わる関数を全て表示する例: >
				:function /File$
<
							*:function-verbose*
'verbose'が 0 でないとき、これらのコマンドで関数を表示すると、それがどこで定義
されたかも表示する。例: >

    :verbose function SetFileTypeSH
	function SetFileTypeSH(name)
	    Last set from /usr/share/vim/vim-7.0/filetype.vim
<
より詳しくは|:verbose-cmd|を参照。

							*E124* *E125*
:fu[nction][!] {name}([arguments]) [range] [abort] [dict]
			{name}という名前で新しい関数を定義する。関数名はアル
			ファベットと数字と'_'からなり、通常の関数はアルファベッ
			トの大文字、スクリプトローカル関数は"s:"で始まらなけれ
			ばならない。

			{name}は辞書|Dictionary|の要素の|Funcref|であってもよ
			い: >
				:function dict.init(arg)
<			"dict"は既に定義されている辞書でなければならない。その
			要素"init"がまだ存在しないならば追加される。存在する場
			合は、既存の関数を上書きするためには[!]をつけなければ
			ならない。この値は番号つきの関数を指す|Funcref|である。
			この関数は|Funcref|を通してのみ呼ぶことができ、そこへの
			参照がなくなると削除される。
								*E127* *E122*
			この名前で定義される関数が既に定義済みで[!]が使用され
			なかった場合、エラーとなる。[!]が使用されていれば、そ
			れまで存在していた関数は、速やかに新しいものへ置換えら
			れる。

			引数{arguments}については|function-argument|を参照。

						*a:firstline* *a:lastline*
			引数[range]を追加した場合、関数は「範囲」を管理するこ
			とができる。「範囲」は"a:firstline"と"a:lastline"に
			よって渡される。[range]がなかった場合、":{range}call"
			が「範囲」を指定されて実行されると、1行1行について、カー
			ソルをその行の先頭に置いた状態で関数を呼び出すことにな
			る。|function-range-example|を参照。

			引数[abort]を追加すると、関数の実行中にエラーに遭遇し
			次第、即関数は中断される。

			引数[dict]を追加すると、この関数は辞書|Dictionary|の要
			素を通してしか呼べなくなる。そしてその辞書にローカル変
			数"self"が定義される。|Dictionary-function|を参照。

			関数の実行によって、最後に使用されたサーチパターン、及
			びredoコマンドの"."の内容は変更されない。

					*:endf* *:endfunction* *E126* *E193*
:endf[unction]		関数定義の終了。このコマンド1つで1行とすること。他のコ
			マンドをいっしょに書いてはならない。

					*:delf* *:delfunction* *E130* *E131*
:delf[unction] {name}	関数{name}を削除する。
			{name}は辞書|Dictionary|の要素の|Funcref|であってもよ
			い: >
				:delfunc dict.init
<			この例は"dict"から要素"init"を削除する。この関数への参
			照がなくなると、関数は削除される。
							*:retu* *:return* *E133*
:retu[rn] [expr]	関数から戻る。"[expr]"が与えられた場合、それは評価され
			関数の戻り値として呼出し側に渡される。"[expr]"が与えら
			れない場合、数値0が呼出し側に渡される。
			関数内に実行されない命令があるかどうかはチェックされな
			いことに留意すること。つまり、たとえ":return"命令の後
			に何か命令があったとしても、警告も何も与えられない。

			|:try|と|:finally|の間で":return"が実行された場合、
			":finally"から対応する|:endtry|までのコマンドがまず実
			行される。":try"がネストしている場合、それらの全てに対
			してこのプロセスが適用される。そして最も外側の
			":endtry"にて関数を抜ける。

						*function-argument* *a:var*
引数は、与えられた名前によって定義される。関数のなかでは"a:name"("a:"を引数に
接頭)のようにして参照することができる。
					*a:0* *a:1* *a:000* *E740* *...*
引数はカンマで区切ることで、最大20まで与えることができる。最後の引数を"..."に
することで、可変長の引数を使用できる。関数の中では"a:1"や"a:2"のようにして可変
長の引数にアクセスできる。"a:0"は可変長引数が幾つあるかを示している(0であるこ
と、つまり引数がそれ以上ないこともある)。"a:000"は全引数を持つリスト|List|を示
している。Note "a:1"は"a:000[0]"と同じである。
								*E742*
a: のスコープとこの変数は固定されており、変更できない。
しかしリスト|List|か辞書|Dictionary|の場合は、その要素を変更できる。よって関数
にリスト|List|を渡し、そこに要素を追加させることができる。関数にリストや辞書を
変更させたくない場合は|:lockvar|を使うこと。

"..."が使われていない時は、引数の数は名前付きの引数の個数を示す。"..."を使った
時には引数の数は大きくなるだろう。

関数を引数無しで定義することも可能である。その時でも()は付けなければならない。
関数の本体は、宣言の次の行から始まり、対応する|:endfunction|までになる。関数の
中で別の関数を定義することも可能である。


							*local-variables*
関数の中で変数を使うこともできる。これらは関数から戻ると消滅するローカル変数と
して振舞う。グローバル変数にアクセスするためには"g:"を付ける必要がある。

例: >
  :function Table(title, ...)
  :  echohl Title
  :  echo a:title
  :  echohl None
  :  echo a:0 . " items:"
  :  for s in a:000
  :    echon ' ' . s
  :  endfor
  :endfunction 

この関数は次のように呼ぶことが出きる: >
  let lines = Table("Table", "line1", "line2")
  let lines = Table("Empty Table")

一つ以上の値を返したい場合には、グローバル変数の名前を渡すようにする: >
  :function Compute(n1, n2)
  :  if a:n2 == 0
  :    return ["fail", 0]
  :  endif
  :  return ["ok", a:n1 / a:n2]
  :endfunction

この関数は次のように呼ぶことができる: >
  :let [success, div] = Compute(102, 6)
  :if success == "ok"
  :  echo div
  :endif
<

						*:cal* *:call* *E107* *E117*
:[range]cal[l] {name}([arguments])
		関数を呼び出す。関数の名前と引数は|:function|によって指定され
		るものである。引数は最大20まで使用可能。戻り値は破棄される。
		「範囲」を受け付ける関数に「範囲」を指定しなかった場合、関数は
		カーソルの現在位置について一度だけ呼び出される。
		「範囲」を受け付けない関数に「範囲」を指定した場合、その範囲の
		一行ずつについて関数が呼び出される。その時カーソルは当該行の先
		頭に設定される。カーソルは「範囲」の最下行の左端になる(恐らく
		最後の関数呼出しの結果、動いた先である)。引数は各呼出しについ
		て繰り返し評価される。それは次の例で確かめることができる:
						*function-range-example*  >
	:function Mynumber(arg)
	:  echo line(".") . " " . a:arg
	:endfunction
	:1,5call Mynumber(getline("."))
<
		"a:firstline"と"a:lastline"はとにかく定義されるので、「範囲」
		の最初や最後で何か違った事をするのにも用いることができる。

		「範囲」自身を扱っている関数の例: >

	:function Cont() range
	:  execute (a:firstline + 1) . "," . a:lastline . 's/^/\t\\ '
	:endfunction
	:4,8call Cont()
< 
		この関数は「範囲」の最初の行を除いた総ての行の先頭に、継続のた
		めの文字"\"を挿入する。

		この関数の戻り値からさらに間接参照が行われる場合、その参照先に
		は範囲が渡されない。例: >
	:4,8call GetDict().method()
<		GetDict()には範囲が渡されるが、method()には渡されない。

								*E132*
関数の再帰的な使用はオプション|'maxfuncdepth'|によって制限することができる。

自動的に読み込まれる関数 ~
							*autoload-functions*
たくさんの関数または巨大な関数を使うときは、それらが使用されたときだけ自動的に
定義されるようにすることができる。これには2つの方法がある: オートコマンドによ
る方法と、'runtimepath'内の"autoload"ディレクトリによる方法である。


オートコマンドを使う方法 ~

これはユーザマニュアルのセクション|41.14|で説明されている。

オートコマンドは、長いVimスクリプトファイルのプラグインに対して有用である。自動
コマンドを定義し、すぐに|:finish|でそのスクリプトを抜ける。こうするとVimの起動
が速くなる。その後オートコマンドにより|:finish|コマンドをスキップする変数を定義
し、そのファイルが再び読み込まれる。

定義すべき関数名にマッチするパターンを指定してオートコマンドイベント
FuncUndefinedを使う。例: >

	:au FuncUndefined BufNet* source ~/vim/bufnetfuncs.vim

ファイル"~/vim/bufnetfuncs.vim"は"BufNet"で始まる関数を定義しなければならない。
|FuncUndefined|も参照。


オートロードスクリプトの使い方 ~
							*autoload* *E746*
これはユーザマニュアルのセクション|41.15|で説明されている。

"autoload"ディレクトリのスクリプトを使う方法はより簡単である。しかし完全に正し
いファイル名を使う必要がある。オートロードされる関数は次のような名前を持つ: >

	:call filename#funcname()

このような関数が呼ばれ、それがまだ定義されていなかった場合、Vimは'runtimepath'
内の"autoload"ディレクトリから"filename.vim"というスクリプトファイルを探す。
例えば"~/.vim/autoload/filename.vim"のように。そしてこのファイルは次のような関
数を定義していなければならない: >

	function filename#funcname()
	   echo "Done!"
	endfunction

このファイル名と関数の # の前の部分は完全に一致しなければならない。そして定義
された関数は呼ばれた関数と完全に同じ名前でなければならない。

サブディレクトリを使うこともできる。関数名の中の # はパスのセパレータのように
解釈される。つまり、次の関数を呼ぶと: >

	:call foo#bar#func()

Vimは'runtimepath'からファイル"autoload/foo/bar.vim"を探す。

これはまだ定義されていない変数を参照するときにも使える: >

	:let l = foo#bar#lvar

しかしこのオートロードスクリプトがすでに読み込まれている場合、未知の変数があっ
てもこのスクリプトは再読み込みされない。

この変数に値を代入するときは、何も特別なことはない。この方法は、オートロードス
クリプトが読み込まれる前に設定を渡すために使うことができる: >

	:let foo#bar#toggle = 1
	:call foo#bar#func()

オートロードスクリプト内で定義されるはずの関数を呼んだがスクリプト内で関数が定
義されなかった場合、その関数を呼ぶたびにそのスクリプトがsourceされる。そして毎
回エラーメッセージが表示される。

また、2つのスクリプト間で、互いに自分が定義される前に相手を呼ぶような関数があ
ると、これは動作しない。
トップレベルでオートロード機能を使うのは避けること。

Hint: たくさんのファイルからなるスクリプトを配布する場合には、|vimball|ユーティ
リティを使うとそれらをまとめることができる。ユーザマニュアルの
|distribute-script|も参照。

==============================================================================
6. 波括弧変数						*curly-braces-names*

変数を使える文脈ではいつでも「波括弧」変数を使うことができる。これは有効な変数
名であり、次のように、1個以上の式を波括弧{}で囲む: >
	my_{adjective}_variable

Vimはこれを見つけると、まず波括弧の中の式を評価し、その値をもとの位置に置きか
え、全体を変数名として再解釈する。よって上の例では、変数"adjective"に"noisy"が
代入されていたとすると、この変数は"my_noisy_variable"となる。あるいは、
"adjective"に"quiet"が代入されていたとすれば"my_quiet_variable"となる。

これの応用の1つは、オプション値によって支配される変数の集合を作ることである。
例えば次の文 >
	echo my_{&background}_message

は現在の'background'の値に応じて"my_dark_message"か"my_light_message"の中身を
表示する。

波括弧を複数使うこともできる: >
	echo my_{adverb}_{adjective}_message
ネストさせることもできる: >
	echo my_{ad{end_of_word}}_message
ここで"end_of_word"は"verb"か"jective"のどちらかである。

しかし、波括弧の中の式を評価した結果が有効な変数名とならなければならない。
つまり、次は無効である: >
	:let foo='a + b'
	:echo c{foo}d
というのは、展開の結果が"ca + bd"となるからで、これは有効な名前ではない。

						*curly-braces-function-names*
同様の方法で評価した名前により関数を定義したり呼び出したりできる。
例: >
	:let func_end='whizz'
	:call my_func_{func_end}(parameter)

この例は関数"my_func_whizz(parameter)"を呼びだす。

==============================================================================
7. コマンド						*expression-commands*

:let {var-name} = {expr1}				*:let*
			内部変数{var-name}に式{expr1}の結果をセットする。変数
			の型は{expr1}によって決定される。{var-name}という変数
			がまだ存在しない場合、新たに作成される。

:let {var-name}[{idx}] = {expr1}			*E689*
			リストの要素に式{expr1}の結果をセットする。{var-name}
			はリストを参照し、{idx}はそのリストの有効なインデック
			スでなければならない。ネストしたリストに対してはインデ
			ックスを繰り返すことができる。
			このコマンドはリストに要素を追加するためには使えない。

							*E711* *E719*
:let {var-name}[{idx1}:{idx2}] = {expr1}		*E708* *E709* *E710*
			リスト|List|の一部を式{expr}の値で置き換える。{expr}の
			値は正しい個数の要素を持つリストでなければならない。
			{idx1}を省略すると0となる。
			{idx2}を省略するとリストの末尾となる。
			指定された範囲の一部がリストの末尾を越える場合、要素が
			追加される。

					*:let+=* *:let-=* *:let.=* *E734*
:let {var} += {expr1}	":let {var} = {var} + {expr1}"と同様。
:let {var} -= {expr1}	":let {var} = {var} - {expr1}"と同様。
:let {var} .= {expr1}	":let {var} = {var} . {expr1}"と同様。
			{var}がセットされていないときや、{var}と{expr1}の型が
			演算子に合わないときは失敗する。


:let ${env-name} = {expr1}			*:let-environment* *:let-$*
			環境変数{env-name}に式{expr1}の結果をセットする。型は
			常に文字列。
:let ${env-name} .= {expr1}
			環境変数{env-name}に{expr1}を付け加える。その環境変数
			が存在しないときは"="と同様にはたらく。

:let @{reg-name} = {expr1}			*:let-register* *:let-@*
			式{expr1}の結果をレジスタ{reg-name}に書きこむ。
			{reg-name}は単一の文字でかつ、書きこむことのできるレジ
			スタでなければならない(|registers|を参照)。"@@"は名前
			無しレジスタとして使用でき、"@/"はサーチパターンとして
			使用できる。
			{expr1}の結果が<CR>か<NL>で終了していた場合、レジスタ
			は行単位で設定され、そうでなければキャラクタ単位で設定
			される。
			次のコマンドにより最後に検索したパターンをクリアするこ
			とができる: >
				:let @/ = ""
<			これは空文字列を検索するのとは異なる。空文字列を検索す
			ると、いたるところでマッチする。

:let @{reg-name} .= {expr1}
			レジスタ{reg-name}に{expr1}を付け加える。このレジスタ
			が空のときは、そこに{expr1}をセットする。

:let &{option-name} = {expr1}			*:let-option* *:let-&*
			オプション{option-name}に式{expr}の値をセットする。文
			字列や数値の値はそのオプションの型に変換される。
			ウィンドウやバッファについてローカルなオプションに対し
			ては、その効果は|:set|コマンドを使ったときと同様で、ロー
			カルな値とグローバルな値の両方が変更される。
			例: >
				:let &path = &path . ',/usr/local/include'

:let &{option-name} .= {expr1}
			文字列のオプションの場合: その値に{expr}を付け加える。
			|:set+=|とは違い、コンマを挿入しない。

:let &{option-name} += {expr1}
:let &{option-name} -= {expr1}
			数値または切替のオプションの場合: {expr1}を足す・引く。 

:let &l:{option-name} = {expr1}
:let &l:{option-name} .= {expr1}
:let &l:{option-name} += {expr1}
:let &l:{option-name} -= {expr1}
			上と同様だが、オプションのローカルな値だけをセットする
			(ローカルな値があるならば)。|:setlocal|と同様にはたら
			く。

:let &g:{option-name} = {expr1}
:let &g:{option-name} .= {expr1}
:let &g:{option-name} += {expr1}
:let &g:{option-name} -= {expr1}
			上と同様だが、オプションのグローバルな値だけをセットす
			る(グローバルな値があるならば)。|:setglobal|と同様には
			たらく。

:let [{name1}, {name2}, ...] = {expr1}		*:let-unpack* *E687* *E688*
			{expr1}の値はリスト|List|でなければならない。そのリス
			トの最初の要素が{name1}に代入され、2番目の要素が
			{name2}に代入される。以下同様。
			nameの個数がリスト|List|の要素の個数に一致しなければな
			らない。
			前述のように各nameは":let"コマンドの要素の1つになるこ
			とができる。
			例: >
				:let [s, item] = GetItem(s)
<			詳細: 最初に{expr1}が評価され、それから順番に代入が行
			われる。{name2}が{name1}に依存するかどうかは問題になる。
			例: >
				:let x = [0, 1]
				:let i = 0
				:let [i, x[i]] = [1, 2]
				:echo x
<			子の結果は[0, 2]となる。

:let [{name1}, {name2}, ...] .= {expr1}
:let [{name1}, {name2}, ...] += {expr1}
:let [{name1}, {name2}, ...] -= {expr1}
			上と同様だが、リスト|List|の各要素に対し連結・足し算・
			引き算を行う。

:let [{name}, ..., ; {lastname}] = {expr1}
			|:let-unpack|と同様だが、リスト|List|の要素数がnamesの
			数より多くてもよい。余った要素のリストが{lastname}に代
			入される。要素の余りがないとき{lastname}は空リストにな
			る。
			例: >
				:let [a, b; rest] = ["aval", "bval", 3, 4]
<
:let [{name}, ..., ; {lastname}] .= {expr1}
:let [{name}, ..., ; {lastname}] += {expr1}
:let [{name}, ..., ; {lastname}] -= {expr1}
			上と同様だが、リスト|List|の各要素に対して連結・足し算
			・引き算を行う。
							*E106*
:let {var-name}	..	変数{var-name}の値を一覧表示する。変数の名前を複数指定
			することができる。以下の特別な名前が認識される:	*E738*
			  g:	グローバル変数
			  b:	バッファローカル変数
			  w:	ウィンドウローカル変数
			  t:	タブページローカル変数
			  s:	スクリプトローカル変数
			  l:	関数ローカル変数
			  v:	Vimの変数

:let			全変数の値を一覧表示する。値の前に変数の型が示される:
			    <nothing>	文字列
				#	数値
				*	Funcref


:unl[et][!] {name} ...				*:unlet* *:unl* *E108* *E795*
			内部変数{name}を削除する。複数の変数名を指定すると、そ
			れらが全て削除される。名前はリスト|List|や辞書
			|Dictionary|の要素でもよい。
			[!]をつけると存在しない変数に対するエラーメッセージを
			表示しない。
			リスト|List|から1個以上の要素を削除することができる: >
				:unlet list[3]	  " 4番目の要素を削除
				:unlet list[3:]   " 4番目から最後までの要素を
						    削除
<			辞書からは一度に1個の要素を削除することができる: >
				:unlet dict['two']
				:unlet dict.two

:lockv[ar][!] [depth] {name} ...			*:lockvar* *:lockv*
			内部変数{name}をロックする。ロックすると、それ以降変更
			ができなくなる(アンロックするまで)。
			ロックされた変数を削除することはできる: >
				:lockvar v
				:let v = 'asdf'		" 失敗!
				:unlet v
<							*E741*
			ロックされた変数を変更しようとするとエラーメッセージ
			"E741: Value of {name} is locked"が表示される。

			[depth]はリスト|List|や辞書|Dictionary|をロックすると
			きに意味がある。どれだけ深くロックするかを指定する:
				1	リストや辞書それ自身をロックする。要素
					を追加したり削除はできないが、要素の値
					を変えることはできる。
				2	要素の値もロックする。その要素がリスト
					や辞書である場合、その中の要素の追加や
					削除はできないが、値の変更はできる。
				3	2と同様だが、リスト・辞書内のリスト・
					辞書に対してもあてはまる。1レベル深い。
			[depth]の既定値は2であり、{name}がリストまたは辞書であ
			る場合、その値は変更できない。
								*E743*
			深さを無限にするには[!]を使い、[depth]を省略する。しか
			しループを捕捉するために深さの最大値は100に設定されて
			いる。

			Note 2つの変数が同じリスト|List|を参照している場合、片
			方の変数をロックすると、もう一方の変数を介してアクセス
			した場合もロックされている。
			例: >
				:let l = [0, 1, 2, 3]
				:let cl = l
				:lockvar l
				:let cl[1] = 99		" 代入できない!
<			
			これを回避するにはリストのコピーを作るとよい。
			|deepcopy()|を参照。


:unlo[ckvar][!] [depth] {name} ...			*:unlockvar* *:unlo*
			内部変数{name}をアンロックする。|:lockvar|の逆を行う。


:if {expr1}						*:if* *:endif* *:en*
:en[dif]		{expr1}が非ゼロと評価された場合に、対応する":else"か
			":endif"までの命令を実行する。

			バージョン4.5から5.0まで間のVimは、":if"と":endif"の間
			の総てのExコマンドは無視する。この2つのコマンドは将来
			の拡張性を、下位互換と同時に提供するためのものである。
			ネスティング(入れ子)が可能である。":else"や":elseif"は
			無視され、"else"部分は一切実行されないことに注意。

			あなたはこれを、旧バージョンとの互換性を保ったまま使用
			することができる: >
				:if version >= 500
				:  version-5-specific-commands
				:endif
<			しかしそれでも"endif"を見つけるために後続のコマンドを
			パースする必要がある。古いVimで新しいコマンドを使うと
			問題が起こることがある。例えば":silent"が":substitute"
			コマンドと認識されるなど。その場合には、":execute"を使
			うと問題を避けることができる: >
				:if version >= 600
				:  execute "silent 1,$delete"
				:endif
<
			NOTE: ":append"と":insert"コマンドは":if"と":endif"の
			間では正しく動かない。

						*:else* *:el* *E581* *E583*
:el[se]			対応する":if"ブロックが実行されなかった場合には、これ
			に対応する":else"か":endif"までのコマンドが実行され
			る。

					*:elseif* *:elsei* *E582* *E584*
:elsei[f] {expr1}	":else" ":if"の省略形。":endif"を付け加える(入れ子にす
			る)手間を省くことができる。

:wh[ile] {expr1}			*:while* *:endwhile* *:wh* *:endw*
						*E170* *E585* *E588* *E733*
:endw[hile]		{expr1}が非ゼロとして評価される間、":while"と
			":endwhile"の間のコマンドを繰り返し実行する。
			ループの内側でエラーが生じた場合、endwhileの直後から実
			行が再開される。
			例: >
				:let lnum = 1
				:while lnum <= line("$")
				   :call FixLine(lnum)
				   :let lnum = lnum + 1
				:endwhile
< 
		注意: ":append"や":insert"コマンドは":while"ループの内側では正
		しく動かない。

:for {var} in {list}					*:for* *E690* *E732*
:endfo[r]						*:endfo* *:endfor*
			{list}の各要素に対し、":for"と":endfor"の間のコマンド
			を繰り返す。変数{var}に各要素の値がセットされる。
			ループの内側のコマンドでエラーが検出されたときは
			"endfor"の後から実行が継続される。
			ループの内側で{list}を変更するとどの要素が使われるかに
			影響を与える。それを望まない場合はコピーを作ること: >
				:for item in copy(mylist)
<			コピーを作らないと、Vimは現在の要素に対してコマンドを
			実行する前に、リストの次の要素への参照を保存する。その
			ため副作用なしに現在の要素を削除することができる。それ
			以降の要素を変更すると、それが見つからなくなる。つまり
			以下の例は動作する(リストを空にする非効率な方法): >
				:for item in mylist
				   :call remove(mylist, 0)
				:endfor
<			Note リストを並べ替える(例えばsort()やreverse()で)と予
			期しない結果になることがある。
			Note {var}の型が変わってしまうのを避けるために、リスト
			の各要素の型は同じでなければならない。ループの末尾でこ
			の変数をunletすれば要素の型が同一でなくてもよくなる。


:for [{var1}, {var2}, ...] in {listlist}
:endfo[r]
			上の":for"と同様だが、{listlist}の各要素がリストでなけ
			ればならない点が異なる。そのリストの各要素が{var1},
			{var2}などに代入される。例: >
				:for [lnum, col] in [[1, 3], [2, 5], [3, 8]]
				   :echo getline(lnum)[col]
				:endfor
<
						*:continue* *:con* *E586*
:con[tinue]		":while"または":for"ループの内側で使われたときは、その
			ループの開始位置まで戻る。
			ループの内側の|:try|と|:finally|の間で使われた場合、
			|:finally|から|:endtry|までの間のコマンドがまず実行さ
			れる。ループの内側で":try"がネストしている場合、全ての
			":try"に対してこのプロセスが適用される。最も外側の
			":endtry"の後ループの開始位置まで戻る。

						*:break* *:brea* *E587*
:brea[k]		":while"または":for"ループの内側で使われたときは、対応
			する":endwhile"または":endfor"の後のコマンドまでスキッ
			プする。
			ループの内側の|:try|と|:finally|の間で使われた場合、
			|:finally|から|:endtry|までの間のコマンドがまず実行さ
			れる。ループの内側で":try"がネストしている場合、全ての
			":try"に対してこのプロセスが適用される。最も外側の
			":endtry"の後ループの後までジャンプする。

:try				*:try* *:endt* *:endtry* *E600* *E601* *E602*
:endt[ry]		":try"と":endtry"の間のコマンド(":source"コマンド、関
			数呼び出し、オートコマンド実行を含めた全てのコマンド実
			行)のエラー制御を変更する。

			エラーや割り込みが検出された場合、後に|:finally|コマン
			ドがあるならば、":finally"の後から実行が継続される。そ
			うでければ、または":endtry"に達した後は次の動的に囲ん
			でいる":try"に対応する":finally"などが探される。その後
			スクリプトは実行を停止する。(関数定義に引数"abort"がつ
			いているかどうかは関係ない)
			例: >
		:try | edit too much | finally | echo "cleanup" | endtry
		:echo "impossible"	" 実行されない。上のコマンドにより
					" スクリプトは停止する。
<
			さらに、(動的に)":try"と":endtry"の内側にあるエラーや
			割り込みは例外に変換される。そしてそれは|:throw|コマン
			ドによって投げたときと同様に捕捉できる(|:catch|を参照)。
			この場合はスクリプトの実行は停止しない。

			割り込み例外には"Vim:Interrupt"という値が使われる。
			Vimコマンドにおけるエラーは"Vim({command}):{errmsg}"と
			いう形式の値に変換される。その他のエラーは
			"Vim:{errmsg}"という形式のエラーに変換される。ここで
			{command}はコマンドの完全な名前であり、{errmsg}はその
			例外が捕捉されなかった場合に表示されるメッセージで、常
			にエラー番号で始まる。
			例: >
		:try | sleep 100 | catch /^Vim:Interrupt$/ | endtry
		:try | edit | catch /^Vim(edit):E\d\+/ | echo "error" | endtry
<
					*:cat* *:catch* *E603* *E604* *E605*
:cat[ch] /{pattern}/	{pattern}にマッチする例外が発生し、より前の":catch"
			で捕捉されなかった場合、このコマンドから次の|:catch|,
			|:finally|, |:endtry|までのコマンドが実行される。その
			ような例外が発生しなかった場合、そのコマンドはスキップ
			される。
			{pattern}が省略された場合は全てのエラーが捕捉される。
			例: >
		:catch /^Vim:Interrupt$/	" 割り込み (CTRL-C) を捕捉
		:catch /^Vim\%((\a\+)\)\=:E/	" 全Vimエラーを捕捉
		:catch /^Vim\%((\a\+)\)\=:/	" 例外と割り込みを捕捉
		:catch /^Vim(write):/		" :writeにおける全エラーを捕捉
		:catch /^Vim\%((\a\+)\)\=:E123/	" エラーE123を捕捉
		:catch /my-exception/		" ユーザ定義例外を捕捉
		:catch /.*/			" 全てを捕捉
		:catch				" /.*/と同じ
<
			{pattern}を囲むのに/以外の文字を使うことができる。ただ
			しその文字は特別な意味(例: '|'や'"'など)を持っていては
			ならず、{pattern}の内側に現れてはならない。
			NOTE: エラーメッセージの本文によって":catch"することは
			確実ではない。メッセージはロケールによって異なるからで
			ある。

					*:fina* *:finally* *E606* *E607*
:fina[lly]		|:try|と":finally"の間を抜ける前に必ず、このコマンドか
			ら対応する|:endtry|の間のコマンドが実行される。つまり
			正常に進んだ場合、|:continue|, |:break|, |:finish|,
			|:return|を使った場合、エラー・割り込み・例外が発生し
			た場合(|:throw|を参照)のいずれの場合でも。

							*:th* *:throw* *E608*
:th[row] {expr1}	{expr1}を評価し、例外として投げる。|:try|と|:catch|の
			間で":throw"が使われた場合、{expr1}にマッチする最初の
			|:catch|までのコマンドはスキップされる。そのような
			":catch"がない場合、または":catch"と|:finally|の間で
			":throw"が使われた場合、":finally"から|:endtry|までの
			コマンドが実行される。":throw"が":finally"の後で実行さ
			れた場合、":endtry"までのコマンドはスキップされる。
			":endtry"において、動的に囲んでいる次の":try"(これは関
			数呼び出しやスクリプトsourceも含めて探される)から対応
			する":catch"までに対しこのプロセスが再び適用される。例
			外が捕捉されない場合、コマンドの処理は終了する。
			例: >
		:try | throw "oops" | catch /^oo/ | echo "caught" | endtry
< 
							*:ec* *:echo*
:ec[ho] {expr1} ..	各{expr1}をスペースで区切って表示する。最初の{expr1}の
			表示は、常に新しい行から始まる。
			|:comment|も参照。
			改行が必要な場合"\n"を使用する。カーソルを第1列(カラ
			ム)に持って行くには"\r"を使用する。
			色強調を行うにはコマンド|:echohl|を使用する。
			コメント文を同じ行に続けることはできない。
			例: >
		:echo "the value of 'shell' is" &shell
<							*:echo-redraw*
			後で再描画を行うとこのメッセージが消えてしまう。そして
			Vimはコマンド列が完了するまで再描画を後回しにするので
			この現象はよく起きる。":echo"の前に実行したコマンドが
			後で再描画を引き起こす(再描画はしばしばユーザが何か入
			力するまで後回しにされる)というこの問題を避けるには、
			|:redraw|コマンドにより再描画を強制すること。例: >
		:new | redraw | echo "there is a new window"
<

							*:echon*
:echon {expr1} ..	改行を付けずに、{expr1}を表示する。|:comment|も参照。
			色強調を行うにはコマンド|:echohl|を使用する。
			コメント文を同じ行に続けることはできない。
			例: >
				:echon "the value of 'shell' is " &shell
<
			Vimコマンドの":echo"と、外部のシェルコマンドである
			":!echo"との違いに注意: >
		:!echo %		--> filename
<			":!"の引数は展開される。|:_%|を参照。 >
		:!echo "%"		--> filename or "filename"
<			前の例のように働く。ダブルクォートが表示されるかどうか
			は、使用している'shell'に依存する。 >
		:echo %			--> 何も表示されない
<			'%'は式として不当な文字である。 >
		:echo "%"		--> %
<			単に文字'%'を表示する。 >
		:echo expand("%")	--> filename
<			'%'を展開するために関数expand()を呼び出している。

							*:echoh* *:echohl*
:echoh[l] {name}	次の|:echo|, |:echon|, |:echomsg|"コマンドから、ハイラ
			イトグループ{name}を適用する。|input()|のプロンプトに
			対しても適用される。例: >
		:echohl WarningMsg | echo "Don't panic!" | echohl None
<			使用した後にはグループを"None"に戻すことを忘れないよう
			に。さもないとそれ以降のechoの表示総てがハイライトされ
			てしまう。

							*:echom* *:echomsg*
:echom[sg] {expr1} ..	式を本当のメッセージとして表示し、そのメッセージをメッ
			セージ履歴|message-history|に保存する。
			|:echo|コマンド同様に、引数の間にスペースが挿入される。
			しかし印字不可能な文字は解釈されずに表示される。
			|:echo|とはかなり異なり、むしろ|:execute|に近い方法で
			解析がされる。なんらかを表示する前に、まず最初に全ての
			式が評価し、連結する。式を評価した値は数値か文字列でな
			ければならない。辞書やリストはエラーとなる。
			強調を行うには|:echohl|コマンドを使う。
			例: >
		:echomsg "It's a Zizzer Zazzer Zuzz, as you can plainly see."
<			画面を再描画したときメッセージが消去されてしまうのを避
			ける方法については|:echo-redraw|を参照。
							*:echoe* *:echoerr*
:echoe[rr] {expr1} ..	式をエラーメッセージとして表示し、そのメッセージを
			メッセージ履歴|message-history|に保存する。スクリプト
			や関数の中で使用されたときは行番号が付け加えられる。
			|:echo|コマンドと同様に引数の間にスペースが挿入される。
			try条件文の中で使用されたときは、このメッセージがエラ
			ー例外として投げられる。(|try-echoerr|を参照)
			例: >
		:echoerr "This script just failed!"
<			
			単にメッセージを強調させたい場合には|:echohl|を使うこ
			と。ビープを鳴らしたいときには次のようにする: >
		:exe "normal \<Esc>"
<
							*:exe* *:execute*
:exe[cute] {expr1} ..	{expr1}の評価結果の文字列をExコマンドとして実行する。
			複数の引数は連結され、間にスペースが挿入される。
			{expr1}は処理されたコマンドとして扱われ、コマンドライ
			ン編集用のキーは認識されない。
			コメント文を同じ行に続けることはできない。
			例: >
		:execute "buffer " nextbuf
		:execute "normal " count . "w"
<
			":execute"は'|'を受けつけないコマンドに、次のコマンドを
			続けて実行させるのにも使用できる。例: >
		:execute '!ls' | echo "theend"
<			(訳注:普通の使い方では":!ls"の後には'|'を使って、Exコ
			マンドを続けることはできない)
			また":execute"は、Vimスクリプト内でコマンド":normal"の
			引数に制御文字を書くことを避けるために役に立つ。 >
		:execute "normal ixxx\<Esc>"
<			これで<Esc>文字を表す。|expr-string|を参照。

			注意:executeに渡す文字列としては、"while"や"if"系のコ
			マンドが始まったり終ったりするだけのようなものは不適格
			である。よって次のような例は認められない: >
		:execute 'while i > 5'
		:execute 'echo "test" | break'
<
			文字列の中に完全な"while"や"if"コマンドが含まれること
			が求められる: >
		:execute 'while i < 5 | echo i | let i = i + 1 | endwhile'
<

							*:comment*
			":execute"や":echo"そして":echon"は、同一行に直接コメ
			ントを続けることはできない。何故ならそれらのコマンドに
			とって'"'は文字列の始まりに見えてしまうからである。し
			かし'|'の後にコメントを書くことは可能である。例: >
		:echo "foo" | "this is a comment

==============================================================================
8. 例外処理					*exception-handling*

Vimスクリプト言語は例外処理機構を備えている。この節では例外処理をどのように行
うかについて説明する。

例外はエラー発生時や割り込み発生時にVimによって投げられる。それについては
|catch-errors|と|catch-interrupt|を参照。ユーザはコマンド|:throw|によって明示
的に例外を投げることができる。|throw-catch|を参照。


TRY 条件文					*try-conditionals*

例外を捕捉したり、例外を引き金として後始末のコードを実行することができる。try
条件文を使う事によってcatch節(これが例外を捕捉する)やfinally節(後始末のために
実行される)を指定する事ができる。
try条件文はコマンド|:try|によって始まり、対応するコマンド|:endtry|によって終了
する。その間でコマンド|:catch|によりcatch節を定めたり、コマンド|:finally|によ
ってfinally節を定めることができる。catch節は1個もなかったり、複数個あってもよ
い。しかしfinally節は1個までしか持てない。finally節の後にcatch節があってはなら
ない。catch節とfinally節の前の部分はtryブロックと呼ばれる。

     :try
     :  ...
     :  ...				try ブロック
     :  ...
     :catch /{pattern}/
     :  ...
     :  ...				catch 節
     :  ...
     :catch /{pattern}/
     :  ...
     :  ...				catch 節
     :  ...
     :finally
     :  ...
     :  ...				finally 節
     :  ...
     :endtry

try条件文により、コードから発生する例外を監視したり、適切な対応を取ることができる。
tryブロック内で発生した例外は捕捉される。tryブロックとcatch節内で発生した例外
は捕捉され、後始末が行われる。
tryブロックの実行中に例外が発生しなかった場合は、制御は(もしあれば)finally節に
移動する。その実行後に、スクリプトは":endtry"の後の行から実行を継続する。
tryブロックの実行中に例外が発生した場合は、tryブロックの残りの行はスキップされる。
例外はコマンド":catch"の引数として指定された正規表現に照合される。最初にマッチ
した":catch"の後のcatch節が実行される。他のcatch節は実行されない。catch節は次
に":catch", ":finally", ":endtry"が現れたところで終了する(どれでもよい)。
":endtry"に達すると、スクリプトは次の行から通常通り実行が続けられる。
発生した例外が、コマンド":catch"で指定されたどの正規表現にもマッチしないとき、
その例外はそのtry条件文で捕捉されず、どのcatch節も実行されない。finally節があ
るならば実行される。finally節の実行中は例外は後回しにされ、":endtry"のときに実
行される。そして":endtry"の後のコマンドは実行されず、例外は他のどこかで捕捉さ
れる。|try-nesting|を参照。
catch節の実行中に新たな例外が発生した場合は、そのcatch節の残りの行は実行されな
い。新しい例外は同じtry条件文のどの":catch"コマンドの正規表現にも照合されず、
どのcatch節も実行されない。しかしfinally節があるならばそこが実行され、その間そ
の例外は保留される。":endtry"の後のコマンドは実行されない。新しい例外は他のど
こかで捕捉される。|try-nesting|を参照。
finally節の実行中に例外が発生した場合は、そのfinally節の残りの行は実行されない。
tryブロックやそのcatch節のどこかで例外が発生してからそのfinally節が実行されて
いた場合は、元の(保留されていた)例外は破棄される。":endtry"の後のコマンドは実
行されない。finally節で発生した例外は伝播し、他のどこかで捕捉される。
|try-nesting|を参照。

完全なtry条件文を囲む":while"ループ内で、tryブロックやcatch節において":break"
や":continue"が実行されたときもfinally節が実行される。
また、関数の中やsourceされたスクリプト中で、tryブロックやtry条件文のcatch節に
おいて":return"や":finish"が実行されたときもfinally節が実行される。finally節の
実行中は":break", ":continue", ":return", ":finish"は保留され、":endtry"に達し
たとき再開される。しかしこれらは、そのfinally節内で例外が発生したときは破棄さ
れる。
完全なtry条件節を囲む":while"ループ内での":break"や":continue"、またはfinally
節内で":return"や":finish"に出会ったときは、finally節の残りはスキップされ、通
常通り":break", "continue", ":return", "finish"が実行される。もしそのfinally節
の前に、tryブロックやcatch節内で例外が発生したり、":break", ":continue",
":return", ":finally"が行われていた場合は、それらの保留されていた例外やコマン
ドは破棄される。

例として |throw-catch| と |try-finally| を参照。


try条件文のネスト					*try-nesting*

try条件文は任意にネストされられる。つまり、try条件文のtryブロック・catch節・
finally節のなかに別の完全なtry条件文を書くことができる。内側のtry条件文がtryブ
ロックで発生した例外を捕捉しなかったときや、catch節・finally節で新たな例外が発
生したときは、外側のtry条件文がそのルールにしたがって例外を捕捉する。内側の
try条件文が外側の条件文のtryブロックの中にある場合はcatch節が判定されるが、そ
うでない場合はfinally節のみが実行される。これはネストの仕方には関係ない。つま
り、内側のtry条件文が直接外側のtry条件文に含まれていてもよいし、外側がスクリプ
トをsourceしたり、内側のtry条件文を含む関数を呼び出していてもよい。

有効なtry条件文のどれも例外を捕捉しなかったときは、それらのfinally節が実行され
る。その後、スクリプトの実行は停止する。":throw"コマンドにより明示的に投げられ
た例外が捕捉されなかった場合は、エラーメッセージが表示される。Vimによって暗黙
的に投げられたエラーや割り込み例外については、通常通りエラーメッセージや割り込
みメッセージが表示される。

例として |throw-catch| を参照。


例外処理コードの検査					*except-examine*

例外処理のコードはトリッキーになりがちである。何が起こっているか知りたいときは
スクリプトファイルをsourceするときに'verbose'を13に設定するか、コマンド修飾子
":13verbose"を使う。すると例外が発生・破棄・捕捉・完了したときには表示されるよ
うになる。冗長度のレベルを14異常にすると、finally節において保留されているもの
も表示されるようになる。この情報はデバッグモードでも表示される
(|debug-scripts|を参照)。


例外の生成と捕捉					*throw-catch*

任意の数値や文字列を例外として投げることができる。コマンド|:throw|を使い、投げ
られる値を引数に渡す: >
	:throw 4711
	:throw "string"
<							*throw-expression*
式を引数に指定することもできる。まずその式が評価され、その結果が投げられる: >
	:throw 4705 + strlen("string")
	:throw strpart("strings", 0, 6)

":throw"コマンドの引数を評価している最中に例外が発生することもありうる。その例
外が捕捉されない限り、その式の評価は破棄される。
よって、その":throw"コマンドは例外を投げることができない。
   例: >

	:function! Foo(arg)
	:  try
	:    throw a:arg
	:  catch /foo/
	:  endtry
	:  return 1
	:endfunction
	:
	:function! Bar()
	:  echo "in Bar"
	:  return 4710
	:endfunction
	:
	:throw Foo("arrgh") + Bar()

この例を実行すると"arrgh"が投げられ、Bar()が実行されないため"in Bar"は表示され
ない。しかし次のようにすると >
	:throw Foo("foo") + Bar()
"in Bar"を表示し、4711を投げる。

式を引数として受け取る他のコマンドでも、式の評価中に捕捉されない例外が発生する
とコマンドが破棄される。そして例外はそのコマンドを呼び出した位置へ伝播する。
   例: >

	:if Foo("arrgh")
	:  echo "then"
	:else
	:  echo "else"
	:endif

この例で、"then"と"else"のどちらも表示されない。

							*catch-order*
例外は、1個以上の|:catch|コマンドを持つtry条件文で捕捉することができる。これに
ついては|try-conditionals|を参照。各":catch"コマンドで捕捉される値は、引数にて
正規表現で指定できる。マッチする例外が捕捉されると、その後に続くcatch節が実行
される。
   例: >

	:function! Foo(value)
	:  try
	:    throw a:value
	:  catch /^\d\+$/
	:    echo "Number thrown"
	:  catch /.*/
	:    echo "String thrown"
	:  endtry
	:endfunction
	:
	:call Foo(0x1267)
	:call Foo('string')

最初のFoo()の呼び出しは"Number thrown"を表示し、2番目の呼び出しは"String
thrown"を表示する。例外は、順番に":catch"コマンドに照合される。最初にマッチし
たcatch節だけが実行される。そのため、より限定的な":catch"を先に書くべきである。
次の順序で書くと無意味になってしまう: >

	:  catch /.*/
	:    echo "String thrown"
	:  catch /^\d\+$/
	:    echo "Number thrown"

最初の":catch"は常にマッチするため、2番目のcatch節は決して実行されない。

							*throw-variables*
一般的な正規表現により例外を捕捉した場合、その正確な値には変数|v:exception|に
よりアクセスできる: >

	:  catch /^\d\+$/
	:    echo "Number thrown.  Value is" v:exception

また、どこで例外が発生したかも知りたいだろう。これは|v:throwpoint|に保持されて
いる。Note "v:exception"と"v:throwpoint"は最も直近に捕捉された例外に対し、それ
が終了するまで有効である。
   例: >

	:function! Caught()
	:  if v:exception != ""
	:    echo 'Caught "' . v:exception . '" in ' . v:throwpoint
	:  else
	:    echo 'Nothing caught'
	:  endif
	:endfunction
	:
	:function! Foo()
	:  try
	:    try
	:      try
	:	 throw 4711
	:      finally
	:	 call Caught()
	:      endtry
	:    catch /.*/
	:      call Caught()
	:      throw "oops"
	:    endtry
	:  catch /.*/
	:    call Caught()
	:  finally
	:    call Caught()
	:  endtry
	:endfunction
	:
	:call Foo()

上の例は次のように表示する  >

	Nothing caught
	Caught "4711" in function Foo, line 4
	Caught "oops" in function Foo, line 10
	Nothing caught

実用的な例:  次のコマンド":LineNumber"は、それが呼び出されたスクリプトや関数中
の行番号を表示する: >

	:function! LineNumber()
	:    return substitute(v:throwpoint, '.*\D\(\d\+\).*', '\1', "")
	:endfunction
	:command! LineNumber try | throw "" | catch | echo LineNumber() | endtry
<
							*try-nested*
try条件文によって捕捉されないはそれを囲むtry条件文によって捕捉することができる
: >

	:try
	:  try
	:    throw "foo"
	:  catch /foobar/
	:    echo "foobar"
	:  finally
	:    echo "inner finally"
	:  endtry
	:catch /foo/
	:  echo "foo"
	:endtry

内側のtry条件文はこの例外を捕捉せず、finally節が実行されるだけである。そしてこ
の例外は外側のtry条件文で捕捉される。この例を実行すると"inner finally"と"foo"
が表示される。

							*throw-from-catch*
例外を捕捉した後、新しい例外を投げて他のcatch節で捕捉させることができる: >

	:function! Foo()
	:  throw "foo"
	:endfunction
	:
	:function! Bar()
	:  try
	:    call Foo()
	:  catch /foo/
	:    echo "Caught foo, throw bar"
	:    throw "bar"
	:  endtry
	:endfunction
	:
	:try
	:  call Bar()
	:catch /.*/
	:  echo "Caught" v:exception
	:endtry

これを実行すると"Caught foo, throw bar"と"Caught bar"が表示される。

							*rethrow*
Vimスクリプト言語には本物のrethrowはないが、代わりに"v:exception"を使うことが
できる: >

	:function! Bar()
	:  try
	:    call Foo()
	:  catch /.*/
	:    echo "Rethrow" v:exception
	:    throw v:exception
	:  endtry
	:endfunction
<							*try-echoerr*
Note この方法はVimのエラーや割り込み例外を"rethrow"するためには使えない。Vimの
内部例外を偽装することはできないからである。それを行おうとするとエラー例外が発
生する。その状況を表す自分自身の例外を投げるべきである。独自のエラー例外値を含
むVimのエラー例外を発生させたい場合には、コマンド|:echoerr|を使うことができる: >

	:try
	:  try
	:    asdf
	:  catch /.*/
	:    echoerr v:exception
	:  endtry
	:catch /.*/
	:  echo v:exception
	:endtry

このコードを実行すると次が表示される

	Vim(echoerr):Vim:E492: Not an editor command:   asdf ~


後始末処理						*try-finally*

しばしばスクリプト中でグローバルな設定を変更し、最後に元の設定を復元することが
ある。しかしユーザがCTRL-Cを押してスクリプトを中断すると、設定が一貫しない状態
になってしまう。スクリプトの開発段階においても、エラーが発生したり、明示的に例
外を投げたが捕捉されなかった場合に、同じことが起こりうる。この問題は、try条件
文を使ってfinally節で設定を復元することで解決できる。finally節は、通常の制御フ
ロー・エラー時・明示的な":throw"時・割り込み時に実行されることが保証されている。
(Note try条件文の内側で発生したエラーと割り込みは例外に変換される。これらが捕
捉されなかったときには、finally節の実行の後にスクリプトの実行が停止する。)
例: >

	:try
	:  let s:saved_ts = &ts
	:  set ts=17
	:
	:  " Do the hard work here.
	:
	:finally
	:  let &ts = s:saved_ts
	:  unlet s:saved_ts
	:endtry

関数やスクリプトの一部でグローバルな設定を変更し、その関数・スクリプトの失敗時・
通常終了時に設定を復元する必要があるときは、必ず局所的にこの手法を使うべきであ
る。

							*break-finally*
":continue", ":break", ":return", ":finish"などによってtryブロックやcatch節を
抜けるときも後始末処理が働く。
   例: >

	:let first = 1
	:while 1
	:  try
	:    if first
	:      echo "first"
	:      let first = 0
	:      continue
	:    else
	:      throw "second"
	:    endif
	:  catch /.*/
	:    echo v:exception
	:    break
	:  finally
	:    echo "cleanup"
	:  endtry
	:  echo "still in while"
	:endwhile
	:echo "end"

上の例を実行すると"first", "cleanup", "second", "cleanup", "end"と表示される:
>
	:function! Foo()
	:  try
	:    return 4711
	:  finally
	:    echo "cleanup\n"
	:  endtry
	:  echo "Foo still active"
	:endfunction
	:
	:echo Foo() "returned by Foo"

上の例を実行すると"cleanup"と"4711 returned by Foo"が表示される。finally節に余
計な":return"を書く必要はない。(そうすると戻り値が上書きされてしまう)

							*except-from-finally*
finally節で":continue", ":break", ":return", ":finish", ":throw"を使うことは可
能である。しかしそうするとtry条件文の後始末を破棄してしまうことになるので推奨
されていない。しかし、当然、finally節の中で割り込みとエラー例外が発生すること
はありうる。
finally節におけるエラーにより、割り込みが正しく動作しなくなる例: >

	:try
	:  try
	:    echo "Press CTRL-C for interrupt"
	:    while 1
	:    endwhile
	:  finally
	:    unlet novar
	:  endtry
	:catch /novar/
	:endtry
	:echo "Script still running"
	:sleep 1

失敗する可能性のあるコマンドをfinally節に書く必要があるときは、それらのコマン
ドにより発生するエラーを捕捉したり無視したりすることについて考えること。
|catch-errors| と |ignore-errors| を参照。


エラーを変更する					*catch-errors*

特定のエラーを捕捉するには、監視したいコードをtryブロックに入れ、そのエラーメ
ッセージに対するcatch節を加えるだけでよい。try条件節が存在すると全てのエラーは
例外に変換される。そのため、メッセージはまったく表示されず、|v:errmsg|は設定さ
れない。":catch"コマンドに対する正しい正規表現を作るには、エラー例外のフォーマ
ットがどのようなものか知っていなければならない。
   エラー例外は次のフォーマットを持つ: >

	Vim({cmdname}):{errmsg}
または >
	Vim:{errmsg}

{cmdname}は失敗したコマンド名である。2番目の形式はコマンド名が不明のとき用いら
れる。{errmsg}は、そのエラーがtry条件文の外で発生したときに通常表示されるエラー
メッセージである。エラーメッセージは必ず大文字の"E"で始まり、その後に2,3桁のエ
ラー番号、コロン、スペースが続く。

例:

次のコマンドを実行すると、 >
	:unlet novar
通常次のエラーメッセージが表示される  >
	E108: No such variable: "novar"
これはtry条件文の中では例外に変換される >
	Vim(unlet):E108: No such variable: "novar"

次のコマンドを実行すると、 >
	:dwim
通常次のエラーメッセージが表示される  >
	E492: Not an editor command: dwim
これはtry条件文の中では例外に変換される >
	Vim:E492: Not an editor command: dwim

":unlet"の全てのエラーを次によって捕捉できる >
	:catch /^Vim(unlet):/
また、全てのミススペルされたコマンドのエラーは次で捕捉できる  >
	:catch /^Vim:E492:/

複数のコマンドによって同一のエラーメッセージが表示される場合もある: >
	:function nofunc
と  >
	:delfunction nofunc
は両方とも次のエラーメッセージを表示する。
	E128: Function name must start with a capital: nofunc
これはtry条件節の中では例外に変換される。それぞれ >
	Vim(function):E128: Function name must start with a capital: nofunc
または  >
	Vim(delfunction):E128: Function name must start with a capital: nofunc
となる。どのコマンドによって発生したかに関係なくこのエラーを捕捉するには、次の
正規表現を使う: >
	:catch /^Vim(\a\+):E128:/

複数のエラーメッセージを表示するコマンドもある:  >
	:let x = novar
は次のエラーメッセージを表示する: >
	E121: Undefined variable: novar
	E15: Invalid expression:  novar
最初のエラーメッセージのみが例外の値として使われる。それが最も限定的なメッセー
ジだからである(|except-several-errors|を参照)。これは次のようにして捕捉できる
>
	:catch /^Vim(\a\+):E121:/

"nofunc"という名前に関係したエラー全てを捕捉するには >
	:catch /\<nofunc\>/

コマンド":write"と":read"による全てのVimエラーを捕捉するには >
	:catch /^Vim(\(write\|read\)):E\d\+:/

全てのVimエラーを捕捉するには次の正規表現を使う >
	:catch /^Vim\((\a\+)\)\=:E\d\+:/
<
							*catch-text*
NOTE: エラーメッセージの本文によって捕捉しようとしてはならない >
	:catch /No such variable/
こうすると英語の環境では動作するが、コマンド |:language|により他の言語を使って
いるユーザの環境では動作しなくなる。しかし、コメントとしてメッセージテキストを
引用することは役に立つ: >
	:catch /^Vim(\a\+):E108:/   " No such variable

エラーを無視する					*ignore-errors*

特定のコマンドで発生したエラーを捕捉すれば、エラーを無視することができる: >

	:try
	:  write
	:catch
	:endtry

しかしこの単純な形は使わないよう強く推奨されている。なぜなら、これはあなたが望
むより多くの例外を捕捉してしまうからである。":write"コマンドを使うと自動コマン
ドが実行され、書き込みとは関係ないエラーが発生する可能性がある。例えば: >

	:au BufWritePre * unlet novar

このようなエラーの中には、スクリプトの作者が責任を追わないものもある: つまり、
スクリプトのユーザがそのようなオートコマンドを定義している場合である。その
場合、上の例のようにすると、ユーザからエラーを隠してしまうことになる。エラーを
無視するには、次のようにした方がよい >

	:try
	:  write
	:catch /^Vim(write):/
	:endtry

これは書き込みエラーだけを捕捉する。つまり、あなたが意図的に無視したいエラーだ
けである。

オートコマンドを発生させないような1つのコマンドに対しては、":silent!"を使えば
エラーを例外に変換すること自体を抑制させることができる: >
	:silent! nunmap k
これはtry条件文が有効なときも機能する。


割り込みを捕捉する					*catch-interrupt*

有効なtry条件文内では、割り込み(CTRL-C)は例外"Vim:Interrupt"に変換される。これ
を他の例外と同様に捕捉することができる。するとそのスクリプトは停止しない。
   例: >

	:function! TASK1()
	:  sleep 10
	:endfunction

	:function! TASK2()
	:  sleep 20
	:endfunction

	:while 1
	:  let command = input("Type a command: ")
	:  try
	:    if command == ""
	:      continue
	:    elseif command == "END"
	:      break
	:    elseif command == "TASK1"
	:      call TASK1()
	:    elseif command == "TASK2"
	:      call TASK2()
	:    else
	:      echo "\nIllegal command:" command
	:      continue
	:    endif
	:  catch /^Vim:Interrupt$/
	:    echo "\nCommand interrupted"
	:    " 例外捕捉。次のプロンプトから継続する。
	:  endtry
	:endwhile

ここでCTRL-Cを押すとタスクに割り込むことができる。その後スクリプトは新しいコマ
ンドを要求する。プロンプトでCTRL-Cを押すとスクリプトが終了する。

スクリプト中の特定の行でCTRL-Cが押されたとき何が起こるかをテストするにはデバッ
グモードを使い、その行の上で|>quit|や|>interrupt|コマンドを使う。
|debug-scripts|を参照。


全てを捕捉する						*catch-all*

次のコマンド >

	:catch /.*/
	:catch //
	:catch

は全てをエラー例外・割り込み例外・|:throw|コマンドにより明示的に投げられた例外
の捕捉する。これは、スクリプトのトップレベルで、予期しないことを捕捉するために
役に立つ。
   例: >

	:try
	:
	:  " ここで難しいことをする
	:
	:catch /MyException/
	:
	:  " 既知の問題を制御する
	:
	:catch /^Vim:Interrupt$/
	:    echo "Script interrupted"
	:catch /.*/
	:  echo "Internal error (" . v:exception . ")"
	:  echo " - occurred at " . v:throwpoint
	:endtry
	:" スクリプトの終わり

Note: 全てを捕捉すると、期待していた以上のものを捕捉してしまうかもしれない。そ
れゆえ、":catch"コマンドの引数に正規表現を指定することにより、自分が本当に制御
できる問題だけを捕捉することが強く推奨されている。
全てを捕捉してしまうと、CTRL-Cを押してスクリプトを中断することがほぼ不可能になっ
てしまうことがある。その例: >

	:while 1
	:  try
	:    sleep 1
	:  catch
	:  endtry
	:endwhile


例外とオートコマンド				*except-autocmd*

オートコマンドの実行中に例外を使うこともできる。例: >

	:autocmd User x try
	:autocmd User x   throw "Oops!"
	:autocmd User x catch
	:autocmd User x   echo v:exception
	:autocmd User x endtry
	:autocmd User x throw "Arrgh!"
	:autocmd User x echo "Should not be displayed"
	:
	:try
	:  doautocmd User x
	:catch
	:  echo v:exception
	:endtry

上の例を実行すると"Oops!"と"Arrgh!"が表示される。

							*except-autocmd-Pre*
いくつかのコマンドでは、それ自身が実行される前にオートコマンドが実行される。
例外が発生し、それが一連のオートコマンドの中で捕捉されない場合、一連の自動コマ
ンドと、その引き金となったコマンドは破棄され、例外がそのコマンドを呼んだ位置へ
伝播する。
   例: >

	:autocmd BufWritePre * throw "FAIL"
	:autocmd BufWritePre * echo "Should not be displayed"
	:
	:try
	:  write
	:catch
	:  echo "Caught:" v:exception "from" v:throwpoint
	:endtry

ここで":write"コマンドは現在編集しているファイルを書き込まない('modified'を確
認すればわかる)。BufWritePreのオートコマンドで発生した例外により、":write"が破
棄されたためである。そしてその例外は捕捉され、次を表示する: >

	Caught: FAIL from BufWrite Auto commands for "*"
<
							*except-autocmd-Post*
いくつかのコマンドでは、それ自身が実行された後でオートコマンドが実行される。引
き金となったコマンド自身が失敗して、それが有効なtry条件文の内側にあった場合、
自動コマンドはスキップされ、エラー例外が発生する。その例外は、コマンドを呼んだ
位置で捕捉することができる。
   例: >

	:autocmd BufWritePost * echo "File successfully written!"
	:
	:try
	:  write /i/m/p/o/s/s/i/b/l/e
	:catch
	:  echo v:exception
	:endtry

この例は次を表示する: >

	Vim(write):E212: Can't open file for writing (/i/m/p/o/s/s/i/b/l/e)

引き金となったコマンドが失敗したときでさえもオートコマンドを実行したいという場
合は、catch節の中でそのイベントを引き起こすことできる。
   例: >

	:autocmd BufWritePre  * set noreadonly
	:autocmd BufWritePost * set readonly
	:
	:try
	:  write /i/m/p/o/s/s/i/b/l/e
	:catch
	:  doautocmd BufWritePost /i/m/p/o/s/s/i/b/l/e
	:endtry
<
":silent!"を使うこともできる: >

	:let x = "ok"
	:let v:errmsg = ""
	:autocmd BufWritePost * if v:errmsg != ""
	:autocmd BufWritePost *   let x = "after fail"
	:autocmd BufWritePost * endif
	:try
	:  silent! write /i/m/p/o/s/s/i/b/l/e
	:catch
	:endtry
	:echo x

上の例は"after fail"を表示する。

引き金となったコマンドが失敗しなかった場合、オートコマンドから発生した例外は、
元のコマンドを呼んだ位置から捕捉できる: >

	:autocmd BufWritePost * throw ":-("
	:autocmd BufWritePost * echo "Should not be displayed"
	:
	:try
	:  write
	:catch
	:  echo v:exception
	:endtry
<
							*except-autocmd-Cmd*
いくつかのコマンドでは、通常の処理を一連のオートコマンドで置き換えることができ
る。そのコマンド列で発生した例外は元のコマンドの呼び出し位置で捕捉できる。
   例: ":write"コマンドでは、例外が発生したとき、呼び出し側は実際にファイルが
書き込まれたのかどうかを知ることができない。これを教える必要があるときは、なん
らかの手段を使わねばならない。 >

	:if !exists("cnt")
	:  let cnt = 0
	:
	:  autocmd BufWriteCmd * if &modified
	:  autocmd BufWriteCmd *   let cnt = cnt + 1
	:  autocmd BufWriteCmd *   if cnt % 3 == 2
	:  autocmd BufWriteCmd *     throw "BufWriteCmdError"
	:  autocmd BufWriteCmd *   endif
	:  autocmd BufWriteCmd *   write | set nomodified
	:  autocmd BufWriteCmd *   if cnt % 3 == 0
	:  autocmd BufWriteCmd *     throw "BufWriteCmdError"
	:  autocmd BufWriteCmd *   endif
	:  autocmd BufWriteCmd *   echo "File successfully written!"
	:  autocmd BufWriteCmd * endif
	:endif
	:
	:try
	:	write
	:catch /^BufWriteCmdError$/
	:  if &modified
	:    echo "Error on writing (file contents not changed)"
	:  else
	:    echo "Error after writing"
	:  endif
	:catch /^Vim(write):/
	:    echo "Error on writing"
	:endtry

バッファに変更を行った後でこのスクリプトを数回sourceすると、1回目は次のように
表示される >
	File successfully written!
2回目は >
	Error on writing (file contents not changed)
3回目は >
	Error after writing
以下同様。

							*except-autocmd-ill*
異なるイベントに対するオートコマンドにわたってtry条件文を展開することはできな
い。以下のコードは不正である: >

	:autocmd BufWritePre  * try
	:
	:autocmd BufWritePost * catch
	:autocmd BufWritePost *   echo v:exception
	:autocmd BufWritePost * endtry
	:
	:write


例外の階層と付加情報つき例外				*except-hier-param*

プログラミング言語の中には例外クラスを階層化したり、例外クラスのオブジェクトに
付加的な情報を渡すことができるものがある。これと似たことをVimでもできる。
階層構造を持った例外を投げるには、各部分をコロンで区切った完全なクラス名を投げ
ればよい。例えば、数学ライブラリ内でオーバーフローが発生したときに
"EXCEPT:MATHERR:OVERFLOW"を投げる。
例外クラスに付加的な情報を与えたいときは、それを括弧の中に書く。例えば、
"myfile"の書き込み中にエラーが発生したときに文字列"EXCEPT:IO:WRITEERR(myfile)"
を投げる。
":catch"コマンドにおいて適切な正規表現を使えば、階層の基底クラスや派生クラスを
捕捉できる。括弧の中の付加情報は、":substitute"コマンドを使って|v:exception|か
ら切り出すことができる。
例: >

	:function! CheckRange(a, func)
	:  if a:a < 0
	:    throw "EXCEPT:MATHERR:RANGE(" . a:func . ")"
	:  endif
	:endfunction
	:
	:function! Add(a, b)
	:  call CheckRange(a:a, "Add")
	:  call CheckRange(a:b, "Add")
	:  let c = a:a + a:b
	:  if c < 0
	:    throw "EXCEPT:MATHERR:OVERFLOW"
	:  endif
	:  return c
	:endfunction
	:
	:function! Div(a, b)
	:  call CheckRange(a:a, "Div")
	:  call CheckRange(a:b, "Div")
	:  if (a:b == 0)
	:    throw "EXCEPT:MATHERR:ZERODIV"
	:  endif
	:  return a:a / a:b
	:endfunction
	:
	:function! Write(file)
	:  try
	:    execute "write" a:file
	:  catch /^Vim(write):/
	:    throw "EXCEPT:IO(" . getcwd() . ", " . a:file . "):WRITEERR"
	:  endtry
	:endfunction
	:
	:try
	:
	:  " 計算やI/Oを行う
	:
	:catch /^EXCEPT:MATHERR:RANGE/
	:  let function = substitute(v:exception, '.*(\(\a\+\)).*', '\1', "")
	:  echo "Range error in" function
	:
	:catch /^EXCEPT:MATHERR/	" catches OVERFLOW and ZERODIV
	:  echo "Math error"
	:
	:catch /^EXCEPT:IO/
	:  let dir = substitute(v:exception, '.*(\(.\+\),\s*.\+).*', '\1', "")
	:  let file = substitute(v:exception, '.*(.\+,\s*\(.\+\)).*', '\1', "")
	:  if file !~ '^/'
	:    let file = dir . "/" . file
	:  endif
	:  echo 'I/O error for "' . file . '"'
	:
	:catch /^EXCEPT/
	:  echo "Unspecified error"
	:
	:endtry

エラー時やCTRL-Cを押したときにVim自身によって投げられる例外は平坦な階層になっ
ている: つまりこれらは全て"Vim"クラスに入っている。ユーザは接頭辞"Vim"をつけた
例外を投げることはできない。これらはVim用に予約されている。
Vimのエラー例外は失敗したコマンドの名前(わかっているならば)という付加情報がつ
いている。|catch-errors|を参照。


変わった特性
							*except-compat*
例外制御のコンセプトは、例外を引き起こしたコマンドは即座に異常終了し、制御が
finally節またはcatch節に移るという前提に基づいている。

Vimスクリプト言語では、エラーの後もスクリプトや関数が処理を続行する場合がある。
"abort"フラグのない関数や、":silent!"をつけて実行されたコマンドでは、制御は次
の行、そして関数の外へ移り、制御フローは最外側の":endwhile"や":endif"の次の行へ
移る。一方、エラーは例外と同様に捕捉できるべきである(つまり、即座に異常終了す
ることが要求される)。

この問題は、try条件文が有効なときだけエラーを例外に変換し、(":silent!"で抑制さ
れていない限り)即座に異常終了することで解決される。(エラー)例外は有効なtry条件
文でのみ捕捉可能であるため、これはなんら制約とはならない。エラーを捕捉せずに即
座に終了してほしいなら、単にcatch節を持たないtry条件文を使えばよい。(finally節
を指定すれば、終了の前に後始末処理を行うことができる)

有効なtry条件文がないとき、即座の異常終了でなく、通常の異常終了と継続が行われ
る。これによってVim6.1以前用に書かれたスクリプトの互換性を保証している。

しかし、有効なtry条件文の中から、例外処理コマンドを使っていない既存のスクリプ
トをsourceする(またはその関数の1つを呼ぶ)と、エラー発生時に既存のスクリプトの
制御フローが変わるかもしれない。エラー発生時に即座に異常終了し、新しい方のスク
リプト内でエラーを捕捉できる。しかしsourceされたスクリプトが":silent!"コマンド
でエラーメッセージを抑制していた場合(それが適切なスクリプトなら|v:errmsg|を見
ることでエラーを確認している)、実行パスは変わらない。そのエラーは例外に変換さ
れない(|:silent|を参照)。これが起こる残りのただ1つの原因は、エラーに関心を払っ
ていなく、エラーメッセージを表示させるスクリプトである。おそらく新しいスクリプ
トからそのようなコードを使いたいとは思わないだろう。

							*except-syntax-err*
例外処理コマンドにおける構文エラーは、それが族するtry条件文のどの":catch"コマ
ンドでも決して捕捉されない。しかしfinally節は実行される。
   例: >

	:try
	:  try
	:    throw 4711
	:  catch /\(/
	:    echo "in catch with syntax error"
	:  catch
	:    echo "inner catch-all"
	:  finally
	:    echo "inner finally"
	:  endtry
	:catch
	:  echo 'outer catch-all caught "' . v:exception . '"'
	:  finally
	:    echo "outer finally"
	:endtry

上の例を実行すると次が表示される: >
    inner finally
    outer catch-all caught "Vim(catch):E54: Unmatched \("
    outer finally
元の例外は破棄され、代わりにエラー例外が投げられる。

訳注: throw 4711により例外が発生したが、その後の catch /\(/ に構文エラーがある
訳注: ためエラー例外が発生し、最初の例外は破棄された。

							*except-single-line*
コマンド":try", ":catch", ":finally", ":endtry"は1行の中に書くことができる。し
かし構文エラーがあったとき"catch"の行を認識するのが難しくなるので、避けた方が
よい。
   例: >
	:try | unlet! foo # | catch | endtry
この例は":unlet!"の後に余計な文字があるためエラー例外を発生させる。そして
":catch"と":endtry"が認識されないため、この例外は破棄され、"E488: Trailing
characters"のメッセージが表示される。

							*except-several-errors*
1つのコマンドにより複数のエラーが発生した場合、普通は最初のエラーメッセージが
最も限定的であるため、それがエラー例外に変換される。
   例: >
	echo novar
は次を発生させる: >
	E121: Undefined variable: novar
	E15: Invalid expression: novar
try条件文の中のエラー例外の値は次になる: >
	Vim(echo):E121: Undefined variable: novar
<							*except-syntax-error*
しかし、同じコマンドにおいて通常のエラーの後に構文エラーが検出されたときは、構
文エラーが例外として投げられる。
   例: >
	unlet novar #
これは次を発生させる: >
	E108: No such variable: "novar"
	E488: Trailing characters 
try条件文の中のエラー例外の値は次になる: >
	Vim(unlet):E488: Trailing characters
この理由は、構文エラーによってユーザが予期していない実行パスになってしまうかも
しれないためである。例: >
	try
	    try | unlet novar # | catch | echo v:exception | endtry
	catch /.*/
	    echo "outer catch:" v:exception
	endtry
これは"outer catch: Vim(unlet):E488: Trailing characters"を表示し、次にエラー
メッセージ "E600: Missing :endtry"が表示される。|except-single-line|を参照。

==============================================================================
9. 例							    *eval-examples*

16進数で表示する ~
>
  :" 関数 Nr2Bin() は数値の2進文字列を返す。
  :func Nr2Bin(nr)
  :  let n = a:nr
  :  let r = ""
  :  while n
  :    let r = '01'[n % 2] . r
  :    let n = n / 2
  :  endwhile
  :  return r
  :endfunc

  :" 関数 String2Bin() は文字列中の各文字を2進文字列に変換して、ハイフン(-)で
  :" 区切って返す。
  :func String2Bin(str)
  :  let out = ''
  :  for ix in range(strlen(a:str))
  :    let out = out . '-' . Nr2Bin(char2nr(a:str[ix]))
  :  endfor
  :  return out[1:]
  :endfunc

使い方の例: >
  :echo Nr2Bin(32)
結果: "100000" >
  :echo String2Bin("32")
結果: "110011-110010"



行をソート(並べ替え)する (by Robert Webb) ~

以下は、指定した比較関数を使って行をソートする例である。 >

  :func SortBuffer()
  :  let lines = getline(1, '$')
  :  call sort(lines, function("Strcmp"))
  :  call setline(1, lines)
  :endfunction

ワンライナーにすると次のようになる: >
  :call setline(1, sort(getline(1, '$'), function("Strcmp")))

scanf() の代替 ~
							*sscanf*
Vimにはsscanf()に相当する関数が無い。行の一部を取り出す必要がある場合には、
matchstr()やsubstitute()を使えば実現できる。以下の例は、"foobar.txt, 123, 45"
というような行から、ファイル名と行番号とカラム番号を取り出す方法を示している。
>
   :" 正規表現を設定
   :let mx='\(\f\+\),\s*\(\d\+\),\s*\(\d\+\)'
   :" 正規表現全体にマッチする部分を取り出す
   :let l = matchstr(line, mx)
   :" マッチ結果から各要素を取り出す
   :let file = substitute(l, mx, '\1', '')
   :let lnum = substitute(l, mx, '\2', '')
   :let col = substitute(l, mx, '\3', '')

入力は変数"line"、結果は"file"と"lnum"と"col"に格納される(このアイデアは
Michael Geddesによる)。


辞書からscriptnamesを取り出す ~
						*scriptnames-dictionary*
コマンド|:scriptnames|により今までにsourceされた全てのスクリプトファイルのリス
トを取得することができる。これと等価な関数や変数は存在しない(めったに必要にな
らないからである)。そのような場合には次のコードが利用できる: >
    " ":scriptnames" の出力を変数scriptnames_outputに入れる。
    let scriptnames_output = ''
    redir => scriptnames_output
    silent scriptnames
    redir END
    
    " 出力を行のリストに分割し、各行をパースする。辞書"scripts"に要素を追加
    " する。
    let scripts = {}
    for line in split(scriptnames_output, "\n")
      " 空行以外に対して実行
      if line =~ '\S'
	" 行内の最初の番号を取得
        let nr = matchstr(line, '\d\+')
	" ファイル名を取得。スクリプト番号" 123: "を削除。
        let name = substitute(line, '.\+:\s*', '', '')
	" 辞書に要素を追加
        let scripts[nr] = name
      endif
    endfor
    unlet scriptnames_output

==============================================================================
10. +eval機能が無効					*no-eval-feature*

コンパイル時に|+eval|機能が無効とされている場合、総ての式評価(eval)コマンドは
提供されない。その場合、Vimスクリプトが総ての種類のエラーを引き起こすことを避
ける為、":if"と":endif"は解釈される。":if"とそれに対応する":endif"に挟まれた内
容は無視される。":if"の後に続く引数も無視される。この":if"コマンドはネスティン
グが可能である。しかし必ず行の先頭に書かれている必要がある。":else"コマンドは
認識されない。

|+eval|機能が存在しなかった場合、どのようにコマンドが実行を免れるかの例: >

	:if 1
	:  echo "Expression evaluation is compiled in"
	:else
	:  echo "You will _never_ see this message"
	:endif

==============================================================================
11. サンドボックス				*eval-sandbox* *sandbox* *E48*

オプション 'foldexpr', 'includeexpr', 'indentexpr', 'statusline', 'foldtext' 
はサンドボックスの中で評価される。これによって、悪質な副作用を持つ式からの保護
がなされている。これによって、これらのオプションがモードラインから設定された場合
にある種の安全性がもたらされている。tagsファイルからのコマンドが実行されたとき
とコマンドラインでのCTRL-R =に対してもサンドボックスが使われる。
コマンド|:sandbox|に対してもサンドボックスが使われる。

サンドボックス内では以下の事が禁止される:
	- バッファの変更
	- マッピング、オートコマンド、関数、ユーザ定義コマンドの定義・変更
	- ある種のオプションの設定 (|option-summary|を参照)
	- ある種のVim定義済変数(v:)の設定 (|v:var|を参照)  *E794*
	- シェルコマンドの実行
	- ファイルの読み書き
	- 他のバッファへの移動・ファイルを開く
	- Python, Perl等のコマンドの実行
これは100%安全と保証するものではない。しかし、ある種の攻撃を防ぐ事はできるはずで
ある。

							*:san* *:sandbox*
:san[dbox] {cmd}	サンドボックス内で{cmd}を実行する。モードラインから設
			定された可能性のあるオプションを評価するために使える。
			例: 'foldexpr'.

							*sandbox-option*
いくつかのオプションは式を含んでいる。その式を評価するときはセキュリティ上の危
険性を回避するためにサンドボックス内で行わねばならない。しかしサンドボックスに
は制限があるので、これはそのオプションが安全でない場所で設定されたときのみ行わ
れる。ここで「安全でない」とは次の場合をいう:
- カレントディレクトリの .vimrc や .exrc を source するとき
- サンドボックス内で実行している最中
- モードラインから設定された値

Note サンドボックス内でオプションの値を退避し、それから復元した場合、そのオプ
ションはやはりサンドボックス内で設定されたものとマークされる。

==============================================================================
12. テキストロック						*textlock*

いくつか状況においては、バッファを変更する・他のウィンドウへジャンプするなど、
Vimの現在の処理を混乱させたり破壊してしまうような動作は禁止される。これはVimが
実際に他の何かをしているときに起こることに対して当てはまる。例えば、
'balloonexpr'の評価は、マウスカーソルがある位置に留まっているどんなときにでも
起こりうる。

テキストロックが有効になっているときは、以下の事が禁止される:
	- バッファの変更
	- 他のバッファやウィンドウへの移動
	- 他のファイルを開く
	- ウィンドウを閉じる。Vimを終了する。
	- など。


 vim:tw=78:ts=8:ft=help:norl:
