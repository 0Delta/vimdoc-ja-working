COMMENT: カスタマイズ設定方法
STATUS: finished 6.3.054
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*usr_05.txt*	For Vim version 6.3.  Last change: 2004 Mar 12

                     VIM USER MANUAL - by Bram Moolenaar

                              Set your settings


vimはあなたの好みに合わせてチューニングができます。本章ではオプションの内容
を変更して、その設定でvimを起動させる方法を述べます。また、vimの機能拡張プラ
グインを追加したり、独自のマクロを定義する方法についても触れます。

|05.1|  vimrc ファイル
|05.2|  vimrc ファイルの例の説明
|05.3|  基本的なマップ
|05.4|  プラグインの追加
|05.5|  ヘルプファイルの追加
|05.6|  オプションウィンドウ
|05.7|  よく使うオプション

     Next chapter: |usr_06.txt|  シンタックスハイライトを使う
 Previous chapter: |usr_04.txt|  ちょっとした変更
Table of contents: |usr_toc.txt|

==============================================================================
*05.1*  vimrc ファイル					*vimrc-intro*

よく使うコマンドを入力するのが面倒に感じることもあるでしょう。好みのオプション
設定やマップを設定した状態で起動させるために、vimrcファイルと呼ばれるファイ
ルを書けます。vimはこのファイルを起動時に読み込みます。

vimrcファイルが見つからない場合は、次のコマンドを使います。 >

        :scriptnames

一覧の最初に表示されるファイルは".vimrc"とか"_vimrc"というファイル名でホーム
ディレクトリに置きます。
vimrcファイルをまだ作っていない場合は、|vimrc| を見てvimrcファイルを作る場所
を確認してください。また、":version"コマンドを使うと、vimが探そうとするユーザ
vimrcファイルの格納ディレクトリがわかります。

Unixでは必ず次のファイルとなります。 >

        ~/.vimrc

MS-DOSとMS-Windowsでは大低は次のどちらかです。 >

        $HOME/_vimrc
        $VIM/_vimrc

vimrcファイルにはコロン(:)に続く全コマンド(コマンドラインモードのコマンド)が
使えます。一番わかりやすいのはオプション設定です。例えば、'incsearch'オプ
ションを常にonにしたいのなら、ユーザvimrcファイルに次の一行を加えます。 >

        set incsearch

この追加分を有効にするには、vimを終了し再起動します。再起動しないでこれを行
う方法もありますが、これについては後で触れます。

この章はごく基本的な項目だけを説明しています。vimスクリプトのより詳しい情報
については |usr_41.txt| をご覧ください。

==============================================================================
*05.2*  説明用のvimrcの例                              *vimrc_example.vim*

上の節ではサンプルのvimrc(vimの配布パッケージに入っています)を非互換モード
(詳しくは|not-compatible|をご覧ください)で利用する方法を述べました。このファ
イルは次のディレクトリにあります。

        $VIMRUNTIME/vimrc_example.vim ~

この節ではこのファイルで使われている各種のコマンドを説明します。自分用のセッ
トアップをするときの助けとなると思います。ただし全てを説明できるわけではあり
ません。詳しいことは":help"コマンドで探してください。

>
        set nocompatible

第１章で述べたようにこのマニュアルではvimを「進化したvi」として、つまりviと
は完全互換でない使い方について説明しています。そのためには'compatible'オプ
ションをoffに('nocompatible'に)しておく必要があります。

>
        set backspace=indent,eol,start
<
挿入モードで<BS>キーを押すとカーソルの直前の文字が消えます。ここでは、<BS>
キーが使える範囲を定義しています。カンマ(,)で分割された３つの部分はそれぞれ
次の意味となります。
        indent  行頭の空白類の削除を許す
        eol     改行の削除を許す
        start   挿入モードの開始位置での削除を許す
>

        set autoindent

これは新しい行を、直前の行と同じインデント（段付け）とすることを指定します。
新しい行の行頭に直前の行と同じだけの空白を付けるということです。例えば、挿入
モードで<Enter>キーを押した時や"o"コマンドで新しい行ができた時が該当します。
>

        if has("vms")
          set nobackup
        else
          set backup
        endif

これはファイルに上書きする時にバックアップを作るように指定しています。ただし
VMSシステムではＯＳが古いバージョンを保持してくれますので、バックアップをoff
にします。バックアップファイルのファイル名はオリジナルの名前に"~"を加えたも
のとなります。|07.4|をご覧ください。
>

        set history=50

コマンドを50個分、検索パターンを50個分、ヒストリ(履歴)として残します。覚えさ
せたい量を増減したい時はこの値を変更します。
>

        set ruler

現在のカーソル位置(行、桁)をvimのウィンドウの右下に常に表示します。

>
        set showcmd

入力中(まだ実行していない)コマンドをvimウィンドウの右下(rulerの左側)に表示
します。例えば、"2f"とコマンドを入力した時、vimは検索したい文字の入力を待っ
ています。画面の右下には"2f"と表示します。次に"w"と入力すると、"2fw"という
コマンドが完成しますので、それを実行します。この時、画面の"2f"という表示も消
去します。

        +-------------------------------------------------+
        |text in the Vim window                           |
        |~                                                |
        |~                                                |
        |-- VISUAL --                   2f     43,8   17% |
        +-------------------------------------------------+
         ^^^^^^^^^^^                  ^^^^^^^^ ^^^^^^^^^^
          'showmode'                 'showcmd'  'ruler'

>
        set incsearch

検索パターンを入力中に、その場で一致する文字列を検索し、その場所を表示します

>
        map Q gq

これはキーマップを定義します。詳しくは次の節で述べます。ここでは、"gq"オペ
レータによるフォーマット機能を"Q"コマンドとして定義しています。 これはvim5.0 
以前で使われていたコマンドです。上の定義をしなければ"Q"はコマンドラインモード
(EXモード)への移行コマンドですが、それは必要ないでしょう。

>
        vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

これは複雑なマッピングです。ここでは動作の詳細は述べません。ここでやっている
ことは、visualモードでの"p"コマンドの定義です。直前にヤンクした文字列を現在
の選択範囲に上書きするというものです。マッピングはこれだけ複雑なことにも使え
るということなのです。とはいっても、実際にコマンドを手入力するのと同じように
一連のコマンドを実行しているに過ぎません。

>
        if &t_Co > 2 || has("gui_running")
          syntax on
          set hlsearch
        endif

色が使える場合に限って、シンタックスハイライトを有効にします。さらに検索パ
ターンと合致している箇所を全てハイライト表示にするために、'hlsearch'オプション
をonに設定します。上で使っている"if"コマンドは、特定の条件の時だけオプション
を設定したい時に重宝します。 詳しくは、|usr_41.txt|をご覧ください。

                                                        *vimrc-filetype*  >
        filetype plugin indent on

これは次の３つの功妙な仕掛けをいずれもonに設定しています。
1. ファイルタイプの検出
   ファイルの編集を始める時に、vimはそれがどういった種類のファイルかを判断
   しようとします。例えば"main.c"なら、vimはそのファイル名の拡張子が".c"で
   あることから、ファイルタイプは"c"だと判断します。またファイルの１行目が
   "#!/bin/sh"で始まっていれば、ファイルタイプは"sh"だと判断します。
   ファイルタイプの検出はシンタックスハイライトの他に次の２つの項目で使って
   います。詳しくは|filetypes|をご覧ください。

2. ファイルタイププラグインファイルの利用
   ファイルタイプには多くの種類があり、それぞれが異なったオプションを用いま
   す。例えば、"c"ファイルの場合なら自動的にインデント(段付け)をしてくれる
   'cindent'オプションは欠かせないでしょう。こういった、一般的に便利な設定が
   ファイルタイププラグインの中に入っています。独自のプラグインも追加できま
   す。詳しくは|write-filetype-plugin|をご覧ください。

3. インデント(段付け)ファイル
   プログラムで使う行インデントというのはたいていは自動的に計算できるもので
   す。vimでは多くのファイルタイプ用にインデントのルールを用意しています。
   詳しくは|:filetype-indent-on| と 'indentexpr'オプションをご覧ください。

>
        autocmd FileType text setlocal textwidth=78

ここでは、行が長くなりすぎないように78文字で分割するように指定しています。
このルールはテキストファイルにだけ適用されます。実際の記述は２パートに分かれ
ています。最初の"autocmd FileType text"はオートコマンド定義です。ここでは
ファイルタイプが"text"の場合のみ、次の指令を登録するように定義しています。
次の"setlocal textwidth=78"は、対象となるファイルタイプに限り、'textwidth'
オプションを78に設定しています。
>

        autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif

これは別のオートコマンドです。これはどのファイルの時も使います。その後の複
雑な部分は、「'" マークが定義されているかどうかをチェックし、定義があれば、
そこにジャンプする」です。各行の先頭の逆スラッシュ(日本語環境だと円記号)は
上の行の続きであることを示します。これは行がやたらと長くなるのを防ぎます。
詳しくは|line-continuation|をご覧ください。 オートコマンドはvimスクリプト
ファイルに書かないと動きません。上のコマンドを直接コマンドラインモードで入力
してもダメなのです。

==============================================================================
*05.3*  基本的なマップ

マップを使うと、複数のコマンドを１つのキー繰作にまとめることができます。例え
ば、ある単語を{ }で囲むようにしたい("amount"を{amount}のように変更したい)場
合を考えます。これを<F5>キーに定義するために:mapコマンドを使います。
次のように書きます。 >

        :map <F5> i{<Esc>ea}<Esc>
<
        Note:
	このコマンドを入力する時にはちょっと注意してください。
	<F5>は４文字の文字列として入力してください。<Esc>も同じで、<Esc>キー
	を押すのではなく、５文字の文字列として入力してください。このマニュ
	アルを読む時にはその違いに注意してください !

この定義内容を分解してみましょう。
    <F5>        ファンクションキーのF5です。このキーを押すと、定義してあるコ
    		マンドを実行します。

    i{<Esc>     "{"文字を挿入します。<Esc>キーで挿入モードから通常モードに戻
    		ります。

    e           単語の末尾にカーソルを移します。

    a}<Esc>     "}"文字を追加します。

この":map"コマンドを実行した後は、カーソルを単語の先頭に動かしてF5キーを押す
だけで単語の両側に{ }が追加されるようになります。

この例では、コマンドは１キーだけでしたが、複数文字でも使えます。但し、既に
vimが使っているコマンドと重なると、元のコマンドが使えなくなります。避ける方
が賢明でしょう。
逆スラッシュ(日本語環境では円記号)は複数キーのマップに使える文字です。
いくつもマップが使いたくなった時には、複数文字にマップしましょう。例えば、
単語を( )で囲む時は"\p"マップで、単語を{ }で囲む時は"\c"マップで、といった
ことができます。 >

        :map \p i(<Esc>ea)<Esc>
        :map \c i{<Esc>ea}<Esc>

"\"の直後に"p"を指定するようにします。こうすればvimは２文字のマップだと認識
できます。

引数なしの":map"コマンドは現在のマップ(少なくとも通常モードの)定義の一覧
を表示します。より詳しくは|40.1|章をご覧ください。

==============================================================================
*05.4*  プラグインの追加				*add-plugin* *plugin*

vimはプラグインを追加することで機能拡張ができます。プラグインといっても、vim
が起動された時に自動的に読み込まれるvimスクリプトでしかありません。プラグイン
を追加したい場合も、プラグイン用のディレクトリにファイルをドロップするだけで
すから、とても簡単です。
{note:vimを|+eval|機能なしでコンパイルした場合は使えません}

プラグインには次の２種類があります。

  グローバルプラグイン      全種類のファイルで使われるプラグイン
  ファイルタイププラグイン  特定タイプのファイルでのみ使われるプラグイン

まず、グローバルプラグインについて説明し、次にファイルタイププラグインの説明
|add-filetype-plugin|をしましょう。


グローバルプラグイン					*standard-plugin*
--------------------

vim起動時には自動的にいくつものグローバルプラグインを読み込みます。特に何も
しなくても大丈夫です。グローバルプラグインでは、ほとんどの人にとって有用な
機能を提供しています。ただし、これらはvimの中にコンパイルして組み込まれてい
るのではなく、vimスクリプトとして実装されています。
そのリストはヘルプの目次|standard-plugin-list|にあります。|load-plugins|も
ご覧ください。

                                                        *add-global-plugin*
常に有効にしたい機能は、グローバルプラグインとして追加します。
グローバルプラグインの追加は次の２つを行うだけです。
  1. プラグインを入手する
  2. それを正しいディレクトリに入れる


グローバルプラグインの入手
--------------------------

プラグインはどこで手に入れられるのでしょう？
- 一部はvimのパッケージに入っています。$VIMRUNTIME/macros以下のディレクトリ
  をご覧ください
- インターネットからダウンロードする。http://vim.sf.net をどうぞ。
- vimのメーリングリスト|maillist|に投稿されることもあります。
- あなたが自作することもできます。プラグインの書き方|write-plugin|をどうぞ。


グローバルプラグインの使い方
----------------------------

まず、プラグイン自身のドキュメントを読んで、動作条件を確認してください。
次にそれをプラグイン用ディレクトリにコピーします。

        system          plugin directory ~
        Unix            ~/.vim/plugin/
        PC や OS/2      $HOME/vimfiles/plugin or $VIM/vimfiles/plugin
        Amiga           s:vimfiles/plugin
        Macintosh       $VIM:vimfiles:plugin
        Mac OS X        ~/.vim/plugin/
        RISC-OS         Choices:vimfiles.plugin

Unixの場合の例(プラグイン用ディレクトリがない場合) >

        mkdir ~/.vim
        mkdir ~/.vim/plugin
        cp /usr/local/share/vim/vim60/macros/justify.vim ~/.vim/plugin

これだけです。vimを再起動するとプラグインに定義されたコマンドが使えます。


ファイルタイププラグイン		*add-filetype-plugin* *ftplugins*
------------------------

vimの配布パッケージにはいろんなファイルタイプ用のプラグインが入っています。
次のコマンドで利用開始できます。 >

        :filetype plugin on

これだけです。|vimrc-filetype|もご覧ください。

編集したいファイル用のプラグインがない場合や標準より良いものを見つけた
場合は追加ができます。ファイルタイププラグインの追加は次の手順で行います。
  1. プラグインを入手する
  2. それを正しいディレクトリに入れる


ファイルタイププラグインの入手
------------------------------

ファイルタイププラグインもグローバルプラグインと同じ方法で入手できます。
ファイルタイプの記載の有無でそのプラグインがグローバルかファイルタイプか区別
できます。$VIMRUNTIME/macros はグローバルプラグイン用で、$VIMRUNTIME/ftplugin
はファイルタイププラグイン用のディレクトリです。


ファイルタイププラグインの使い方			*ftplugin-name*
--------------------------------

ファイルタイププラグインは正しいディレクトリにドロップするだけで追加できます。
このディレクトリ名はグローバルプラグインの場合と同様ですが、最後のディレクト
リ名が"ftplugin"となります。例えば"staff"ファイルタイプ用のプラグインを見つ
け、Unixシステムに入れるとしましょう。入手したファイルを次のコマンドで
ftpluginディレクトリに移します。 >

        mv thefile ~/.vim/ftplugin/stuff.vim

既に"staff"用のプラグインが存在している場合、既存のプラグインと追加しようと
しているプラグインにコンフリクト(矛盾、衝突)がないことを確認してください。
問題がなければ別の名前に変えましょう。 >

        mv thefile ~/.vim/ftplugin/stuff_too.vim

アンダースコア(_)文字はファイルタイプ名とそれ以外の区別に使います。アンダー
スコア以降はどんな文字列でも構いません。しかし、例えば、"otherstuff.vim"と
いった名前にするとうまく動きません。これは"otherstuff"というファイルタイプ
の時にだけ読み込まれるからです。

MS-DOSでは長いファイル名が使えません。特にファイルタイプ名が６文字以上のプ
ラグインに２つ目を追加しようとすると問題が生じます。この回避のため、専用
ディレクトリが使えます。  >

        mkdir $VIM/vimfiles/ftplugin/fortran
        copy thefile $VIM/vimfiles/ftplugin/fortran/too.vim

ファイルタイププラグインの名前付けルールは次の通りです。

        ftplugin/<filetype>.vim
        ftplugin/<filetype>_<name>.vim
        ftplugin/<filetype>/<name>.vim

"<name>" の部分はどんな文字列でも構いません。
以下はUnixでの"staff"ファイルタイププラグインのファイル名の例です。

        ~/.vim/ftplugin/stuff.vim
        ~/.vim/ftplugin/stuff_def.vim
        ~/.vim/ftplugin/stuff/header.vim

<filetype>にはプラグインが使われるファイルタイプ名を書きます。
ファイルタイプが合致したファイルだけをプラグインとして使います。<name>部分は
無視します。<name>は同じファイルタイプのプラグインを複数登録する場合のプラグ
インの区別用です。なお、ファイル名の最後は".vim"でなければなりません。


より詳しい情報は以下をご覧ください。
|filetype-plugins|      ファイルタイププラグインとマップで発生する問題の回避
			方法についてのドキュメント
|load-plugins|          起動時に読み込まれるグローバルプラグイン
|ftplugin-overrule|     グローバルプラグインの設定の上書き(overruling)
|write-plugin|          プラグインスクリプトの書き方
|plugin-details|        プラグインの使い方やプラグインが動かない場合について
			の詳細な情報
|new-filetype|          新しいファイルタイプを追加するには

==============================================================================
*05.5*  ヘルプファイルの追加 		*add-local-help* *matchit-install*

運が良ければ、プラグインにはヘルプファイルが添付されています。ここでは、ヘル
プファイルのインストール方法を述べます。 そうすれば、新しいプラグインのヘル
プを簡単に探せますね。
"matchit.vim"プラグイン(vimの配布パッケージに入っています)を例にやってみま
しょう。このプラグインは"%"コマンドで呼応するHTMLタグ間や、vimスクリプトの
if/else/endif間でジャンプできるようにするものです。とても便利なのですが、
従来互換を失ってしまいます。(だからデフォルトでは有効になっていないのです)
このプラグインにはヘルプ"matchit.txt"が付いています。最初にプラグイン本体を
適切なディレクトリにコピーします。今回はvimの中でやってみます。ですので、
$VIMRUNTIME が使えます。(ディレクトリがあれば、"mkdir"コマンドは省略できま
す) >

        :!mkdir ~/.vim
        :!mkdir ~/.vim/plugin
        :!cp $VIMRUNTIME/macros/matchit.vim ~/.vim/plugin

次に'runtimepath'のいずれかのディレクトリに"doc"ディレクトリを作ります。 >

        :!mkdir ~/.vim/doc

"doc"ディレクトリにヘルプファイルをコピーします。  >

        :!cp $VIMRUNTIME/macros/matchit.txt ~/.vim/doc

さらに新しいヘルプファイルの項目にジャンプできるように仕掛けをします。
コマンド|:helptags|を使ってタグファイルを生成します。 >

        :helptags ~/.vim/doc

さて、これで次のコマンドが使えます。 >

        :help g%

これは上で追加したヘルプファイルの中から"g%"のヘルプを探すコマンドです。次の
コマンドでローカルヘルプの目次を見ることができます。 >

        :help　local-additions

上でインストールしたローカルなヘルプのタイトルが自動的に追加されています。ここ
を見ればどんなローカルヘルプが追加されたか解ります。ここからタグジャンプもでき
ます。

ローカルヘルプファイルの書き方については|write-local-help|をご覧ください。

==============================================================================
*05.6*  オプションウィンドウ

欲しいオプションを探すには、ヘルプファイルで|options|を探せばできます。
もう一つ次のコマンドを使う方法もあります。

        :options ~

これは各オプションに１行の解説が付いた新しいウィンドウを開きます。オプション
はサブジェクトでグループ化されていて、カーソルをサブジェクトの上に動かして
<Enter>を押すとそこにジャンプします。もう一度<Enter>を押すか、CTRL-Oを押すと
戻ってきます。

ここでオプションの値を変えられます。例えば、"displaying text"のサブジェクト
に移動し、カーソルを次の行まで持っていきます。

        set wrap        nowrap ~

ここで<Enter>を押すと、表示が次のようになります。

        set nowrap      wrap ~

このオプションはoffになりました。

この行の１つ上には'wrap'オプションの簡単な説明があります。説明のところにカー
ソルを動かして、<Enter>を押すと、'wrap'オプションの完全なヘルプにジャンプ
します。戻るのはCTRL-Oです。

数値や文字列を引数に取るオプションの場合、値を編集できます。修正後に<Enter>
キーを押すとそれが新しい値として設定されます。例えば、カーソルを次の行まで
数行上に動かします。

        set so=0 ~

"$"コマンドでカーソルを"0"の上に動かし、"r5"で値を５に変更します。<Enter>を
押すと、その値が設定されます。ここでカーソルを動かすと、画面の端までカーソル
が達する前にスクロールが始まることに気づくでしょう。これは'scrolloff'オプ
ションのしわざです。設定した値はスクロールが始まる場所を画面の端から数えた
時のオフセット値なのでした。

==============================================================================
*05.7*  よく使うオプション

vimには本当に大量にオプションがあります。そのほとんどは使うことはないで
しょう。ここでは一部のよく使うものだけを説明します。以下で述べるオプション
についても、より詳しいヘルプが探せることをお忘れなく。オプションを探す時に
は、":help"に続けてアポストロフィで囲んだオプション名を指定します。 >

        :help 'wrap'

オプションの値がごしゃごしゃになってきたら、デフォルトに戻すことができます。
デフォルトに戻すのにはアンパサンド(&)を使います。 >

        :set iskeyword&


行の折り曲げの禁止
------------------

vimは長い行があれば、画面の右端で折り曲げて(文の全体が見えるように)表示しま
す。しかしウィンドウの右にはみ出した方が良い場合もあります。その場合は左右への
スクロール機能が必要となります。折り曲げをするかどうかは次で設定します。 >

        :set nowrap

vimは表示していない領域にカーソルを動かそうとすると自動的にスクロールします。
10文字分を表示させようとするには、次のようにします。 >

        :set sidescroll=10 ~

これはファイルの内容には影響しません。表示の方法だけです。


折り曲げ関係の移動コマンド
--------------------------

ほとんどの移動コマンドは行頭と行末で止まります。'whichwrap'オプションでこれ
を変更できます。次の例は'whichwrap'をデフォルト値にしています。 >

        :set whichwrap=b,s

ここでは<BS>キーで行頭から１つ上の行の行末へ動くことを許可しています。
また、<Space>キーは行末から次の行の行頭への移動を許可しています。

カーソルキーの<Left>と<Right>もこのコマンドで使用を許可できます。 >

        :set whichwrap=b,s,<,>

この指定は通常モードでのみ有効です。挿入モードでも<Left>と<Right>を許可する
には次のように指定します。 >

        :set whichwrap=b,s,<,>,[,]

他にもいくつかフラグがあります。詳しくは 'whichwrap'のヘルプをご覧ください。


TABを見えるように
------------------

ファイル中にTAB(^I)があっても、通常表示では場所がわかりません。次のオプ
ションを使うと、見ることができるようになります。

        :set list

TAB記号は全部 ^I と表示され、行末には $ と表示されます。通常なら気付かない
ような、行末の空白類もよくわかるようになります。
これの欠点はファイルにTABを多用していると見づらくなる点です。カラー端末かGUI
環境で使っているのであれば、空白とTABをハイライト表示にしてこの欠点を避ける
ことができます。この場合、'listchar'オプションを使います。 >

        :set listchars=tab:>-,trail:-

TABは全て">---"と表示され、末尾の空白は"-"と表示されます。この方がずっとイイ
と思いませんか？


キーワード
----------

'iskeyword'オプションは単語に使える文字を定義します。
まず、現在の設定状供を見てみましょう。 >

        :set iskeyword
<         iskeyword=@,48-57,_,192-255 ~

"@"はアルファベットのことです。"48-57"はASCIIコード48〜57のことで、これは数
字の"0"〜"9"です。また"192-255"はLatin-1に定義された文字(ヨーロッパの各言語
で用いる特殊文字)です。
例えば、"upper-case"を１つの単語と扱って欲しい場合、"-"をキーワードに追加し
ておきます。これは次のようにします。 >

        :set iskeyword+=-
        :set iskeyword
<         iskeyword=@,48-57,_,192-255,- ~

新しい値を見ると、"-"の直前に","を自動追加したのがわかります。
逆にキーワードから削除するには "-="を使います。アンダースコアを削除するには
次のようにします。 >

        :set iskeyword-=_
        :set iskeyword
<         iskeyword=@,48-57,192-255,- ~

この場合も"_"を削除する時に","が自動的に削除されています。


メッセージ行
------------

vimを起動した時、最終行はメッセージ用に使われます。
メッセージが長い場合は、切り捨てるか、<Enter>を押した時にスクロールするかで
す。切り捨てた時は一部しか見ることができなくなります。'cmdheight'オプション
でメッセージ用に使う行数を指定できます。 >

        :set cmdheight=3

これは編集用領域を減らすわけですから、むやみに増やせばいいというわけではあり
ません。

==============================================================================

Next chapter: |usr_06.txt|  シンタックスハイライトの使用

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
