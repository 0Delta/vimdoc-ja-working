COMMENT: 編集するために必要な最低限の情報
STATUS: finished 7.0
TRANSLATOR: 清水俊彦(しみず) <mailto:t_smz@syd.odn.ne.jp>
TRANSLATOR: nakadaira <hopper2@nanameue.jp>

*usr_02.txt*	For Vim version 7.0.  Last change: 2006 Apr 24

		     VIM USER MANUAL - by Bram Moolenaar

				 初めての Vim


この章では、Vim を使ってファイルを編集するのにとりあえずこと足りるだけの
情報を提供します。上手でも速くもありませんが、とにかく編集はできます。
ここで出てくるコマンドには多少の時間を取って練習してください。以降に出てくる
コマンドの基礎となるものですから。

|02.1|	Vim の起動方法
|02.2|	文字の挿入
|02.3|	カーソル移動
|02.4|	文字の削除
|02.5|	アンドゥ（取り消し）とリドゥ（やり直し）
|02.6|	他の編集コマンド
|02.7|	Vim の終了
|02.8|	ヘルプの引き方

次章: |usr_03.txt|  カーソルの移動
前章: |usr_01.txt|  マニュアルについて
目次: |usr_toc.txt|

==============================================================================
*02.1*	Vim の起動方法

Vim を起動するには次のコマンドを入力します。 >

	gvim file.txt

UNIXでは、コマンドプロンプトで入力します。Microsoft Windows環境では、MS-DOS
プロンプトを開いて、入力してください。
いずれの場合でも、Vim は file.txt という名前のファイルの編集を開始します。
画面には次のように表示されていることでしょう。

	+---------------------------------------+
	|#					|
	|~					|
	|~					|
	|~					|
	|~					|
	|"file.txt" [New file]			|
	+---------------------------------------+
	     ("#" はカーソル位置を示します)

ティルド(~)の行は、ファイルにその行がないことを示しています。Vimは、ファイルの
末尾より後ろを表示する場合に、ティルドを表示します。画面の下の方に、編集中の
ファイル名は"file.txt"で、新しいファイルであることが表示されています。この行を
メッセージ情報行と呼びます。メッセージ情報行の表示は一時的で、他のメッセージが
表示されると消えてしまいます。


VIM コマンド
------------

gvimは編集用に新たなウィンドウを生成します。次のコマンドを用いた場合は、 >

	vim file.txt

コマンドウィンドウの中で編集を行えます。すなわち、xtermの中で実行すれば、Vimは
xtermウィンドウ内で動くのです。Microsoft Windows上でMS-DOSプロンプト画面を使っ
ていれば、エディタはそのウィンドウの中で動きます。どちらのバージョンでも同じよ
うに表示されますが、gvimにはメニューバーなどの追加機能があります。詳しくは後で
述べます。

==============================================================================
*02.2*	文字の挿入

Vimはモード型エディタです。モードによって挙動が変わります。一番よく使うモード
は、「ノーマルモード」と「挿入モード」です。ノーマルモードでは、入力した文字は
コマンドとして扱われます。挿入モードでは、入力した文字はそのまま挿入されます。
Vimを起動した直後はノーマルモードになっています。挿入モードに入るには、"i"コマ
ンド（iはInsertの意味です）を入力します。これで、文章を入力できるようになりま
す。入力した文章はファイルに挿入されます。入力を間違っても気にしないようにしま
しょう。後で修正する方法も説明します。次のように、プログラマーのリメリック(詩
の一種)を入力したとしましょう。
>
	iA very intelligent turtle
	Found programming UNIX a hurdle

"turtle"を入力した後に<Enter>キーを押すと改行されます。最後に<Esc>キーを押す
と、挿入モードが終了し、ノーマルモードに戻ります。このとき、Vimウィンドウには
次のような２行が表示されています。

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


今は何モード？
--------------

現在のモードを確認できるようにするには、次のコマンドを入力してください。 >

	:set showmode

":"(コロン記号)を入力すると、カーソルがウィンドウの最下段に移動します。ここ
はコロンコマンド(最初が":"で始まるコマンド)を入力する場所です。コマンドの最
後に<Enter>キーを入力します（コロンで始まるコマンドは全てこの方法を使います）
さて、ここで"i"コマンドを入力すると、ウィンドウの最下段に"― 挿入 ―"という
表示が現れます。これは、あなたが挿入モードにいることを示しています。


	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|― 挿入 ―				|
	+---------------------------------------+

<Esc>を押すとノーマルモードに戻り、最下段は空白となります。


トラブルを避ける
----------------

Vimを使い始めたときにはモードを混同してしまいがちです。これは今のモードが解ら
なくなったり、間違ってモード変更を伴うコマンドを入力した時に起こります。どの
モードにいる場合でも<Esc>を押すとノーマルモードに戻ります。時には<Esc>を２回押
さないといけない場合もあります。ノーマルモードで<Esc>を押すと、警告音が鳴りま
す。つまりVimが警告音を出したらノーマルモードだ、ということです。

==============================================================================
*02.3*	カーソル移動

ノーマルモードに戻ると、次のキーを使ってカーソルを動かすことができます。

	h   左						*hjkl*
	j   下
	k   上
	l   右

最初は、まるでランダムに選んだコマンドに見えるかもしれませんね。"L"キーで
「右(Right)」に移動するなんて聞いたことないですよね。でもこれには実に合理的
な理由があります。エディタで一番よく使うコマンドはカーソル移動コマンドです。
viでは右手のホームポジションの段にそのコマンドを集中させたのです。つまり、
このコマンドは、あなた(特に１０本の指を使ってタイプする人)が一番速く打てる場所
に配置してあるのです。

	Note:
	カーソル移動は矢印キーでも行えます。でもそれだと、編集速度は大きく落ち
	ます。これは矢印キーを押すのにメインキー（アルファベットのある部分）か
	ら手を動かさなければならないためです。
	１時間に数百回もそれをすることを考えると、合計時間はバカにならない量と
	なるでしょう。
	また、世の中には矢印キーのないキーボードや変な場所に配置してあるキー
	ボードもあります。そんな場合でもhjklの使い方を知っていれば役に立つこと
	でしょう。

このコマンドは、"h"は左で、"l"は右、"j"は下を指している、とでも覚えておきま
しょう。図で示すと次の通りです。 >

		       k
		   h     l
		     j

移動コマンドを覚える一番の方法は使ってみることです。"i"コマンドを使ってさら
に数行の文を打ちましょう。その上で、hjkl キーを使って動き回り、いろんな場所
に文字を挿入してみましょう。ノーマルモードに戻るのには<Esc>キーを押すのを忘れ
ずに。|vimtutor| を使うのも慣れるにはいい方法でしょう。

日本のユーザーへ、Hiroshi Iwataniさんは次のような提案をしています。

			Komsomolsk
			    ^
			    |
	   Huan Ho	<--- --->  Los Angeles
	(Yellow river)	    |
			    v
			  Java (ジャワ島。プログラミング言語のあれではない)

==============================================================================
*02.4*	文字の削除

文字を削除するにはカーソルをその上に置いて"x"を押します。（これはずっと昔に
タイプライタで消したい文字の上に"xxxxxx"などとやっていたのと同じです）例えば
カーソルを１行目に動かして、xxxxxxx(xを7つ)打ち、"A very "を消しましょう。
その結果は次のようになります。

	+---------------------------------------+
	|intelligent turtle			|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+

さて、ここに新たに文を挿入しましょう。例えば次を入力します。 >

	iA young <Esc>

これは挿入を"i"コマンドで始め、"A young "を入力します。次に(最後の<Esc>キー
で)挿入モードを抜けます。結果は次のようになります。

	+---------------------------------------+
	|A young intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


行削除
------

行全体を消すには"dd"コマンドを使います。以降の行は空白行を埋めるように
上に繰り上げられます。

	+---------------------------------------+
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


改行を取る
----------

Vimでは複数の行を１行にまとめられます。これは行と行の間にある改行を削除する
ことに他なりません。"J"コマンドでそれを行えます。
例えば、次の２行があるとします。 

	A young intelligent ~
	turtle ~

最初の行にカーソルを動かし"J"を押すと次のようになります。

	A young intelligent turtle ~

==============================================================================
*02.5*	アンドゥ(取り消し)とリドゥ(やり直し)

間違って削除しすぎたとしましょう。確かに、打ち直せばいいのですが、もっと簡単
な方法があります。"u"コマンドで直前の編集結果をアンドゥ(取り消し)できます。
実例で見てみましょう。"dd"コマンドで１行目を削除した後で、"u"コマンドを実行
します。すると削除した行が復元されます。
もう一つの例。カーソルを１行目の A まで動かします。

	A young intelligent turtle ~

xxxxxxx と入力し、"A young"を削除します。結果は次のようになります。

	 intelligent turtle ~

ここで、"u"を押すと、直前の削除が取り消されます。直前の削除では"g"を削除して
いました。それが取り消されて"g"が復活します。

	g intelligent turtle ~

もう一度"u"を実行すると、最後の１つ前の削除("n")が取り消されます。

	ng intelligent turtle ~

次の"u"コマンドは "u" の削除を、と同様に取り消します。

	ung intelligent turtle ~
	oung intelligent turtle ~
	young intelligent turtle ~
	 young intelligent turtle ~
	A young intelligent turtle ~

	Note:
	"u"を２回押した時に、最初の状態に戻ってしまったのであれば、きっとvi
	互換モードで動いています。|not-compatible|を見て、修正しておきま
	しょう。
	このマニュアルでは「Vim方式」でやることを前提にしています。もし古き
	良き時代のvi方式を望むのであれば、細かな違いが各所にありますので、
	気をつけてください。


リドゥ(やり直し)
----------------

もし、アンドゥをやり過ぎたら、CTRL-R(リドゥ)を押して直前のコマンドを反転させ
ることができます。言い換えると、アンドゥを取り消すのです。実際に２回CTRL-Rを
押してみましょう。"A "の２文字が消えます。

	young intelligent turtle ~

アンドゥコマンドには特別なバージョン、"U"(行アンドゥ)コマンドがあります。行ア
ンドゥコマンドは直前に編集した行の全変更を取り消します。このコマンドを２回実行
すると、１回目の"U"が取り消されます。

	A very intelligent turtle ~
	  xxxx				"very"を削除

	A intelligent turtle ~
		      xxxxxx		"turtle"を削除

	A intelligent ~
					"U"コマンドで行全体をアンドゥ
	A very intelligent turtle ~
					"U"コマンドを"u"でアンドゥ
	A intelligent ~

"u"がアンドゥで、 CTRL-R がリドゥであるのに対し、"U"コマンドはそれ自身が変更
コマンドです。ちょっとわかりにくいかも知れませんが、心配はいりません。"u"と
CTRL-Rがあればどんな場合でも大丈夫だ、ってことです。詳細は || にあります。
訳注: 原文抜け

==============================================================================
*02.6*	他の編集コマンド

Vimには文章を編集するための数多くのコマンドがあります。下記、または|Q_in|を参
照してください。ここでは頻繁に使うものだけを述べます。


APPENDING(追記)
--------------

"i"コマンドはカーソルの前に文字列を挿入しますが、**行末**に何か追加したい時に
はどうしましょう？カーソルの後ろに文を挿入しないといけません。"a" (append) コ
マンドでそれを行います。
例えば、次の行を

	and that's not saying much for the turtle. ~
このように変更したいとします。
	and that's not saying much for the turtle!!! ~

まずカーソルを行末のピリオドの上に動かし、"x"でピリオドを消します。この時
カーソルは行末の turtle の "e" の上にあります。ここで、次のコマンドを入力
します。 >

	a!!!<Esc>

これでturtleの後ろに３つの"!"記号が追加されます。

	and that's not saying much for the turtle!!! ~


新しい行を空ける
----------------

"o"コマンドは、カーソルの下に新しい行を作り、Vimを挿入モードにします。
続けて、新たな行に文章を入力できます。
以下のような二行があり、カーソルが一行目のどこかにあるとします。

	A very intelligent turtle ~
	Found programming UNIX a hurdle ~

"o"コマンドを実行し、テキストを入力すると: >

	oThat liked using Vim<Esc>

結果は次の通りです。

	A very intelligent turtle ~
	That liked using Vim ~
	Found programming UNIX a hurdle ~

"O"コマンド(大文字)もあり、こちらはカーソルの上に空行を作ります。


カウンタの利用
--------------

９行上に移動するには、"kkkkkkkkk"と入力することもできますが、"9k"でもＯＫで
す。実はVimでは多くのコマンドの前に数値を指定できます。上にあげた例で、３つの
"!"を追加するのに"a!!!<Esc>"と入力しましたが、"3a!<Esc>"でも同じ結果になりま
す。最初の"3"は以降のコマンドを３回実行することを示します。３文字削除するので
あれば、"3x"というコマンドでできます。このような回数指定のことをカウンタと呼び
ます。カウンタは常に対象となるコマンドより前に指定します。

==============================================================================
*02.7*	Vim の終了

Vimを終了するには、"ZZ"コマンドを使います。このコマンドは、ファイルを保存し
て、終了します。

	Note:
	他の多くのエディタと違い、Vimには自動的にバックアップを作成する機能
	はありません。"ZZ"と打つと、変更点は上書きされるため、以前のものを
	取り戻す方法はありません。もちろん設定さえ行えば、バックアップを生成
	するようにできます。|07.4|を見てください。


変更を破棄する
--------------

何らかの変更を行った後で、突然もっと良い方法を思いつくこともあるでしょう。
大丈夫です。Vimには「全部投げ捨てて終了する」コマンドがあります。 >

	:q!

コマンドを確定するには<Enter>キーが必要ですよ。お忘れなく。

詳しい内容に興味がある方に説明しておくと、このコマンドは３部構成になっていて
最初の":"はコマンドラインモードに入るため、次の"q"はエディタを終了するコマン
ド、最後の"!"は上書きのコマンドオプションです。
上書きコマンドオプションはVimに変更内容を投げ捨てさせるために必要です。これ
を":q"とすると、Vimは次のようなエラーを出して、終了を拒否します。

	E37: No write since last change (use ! to override) ~
	E37: 最後の変更が保存されていません (! で変更を破棄) ~

上書きを指定することで、Vimに「バカげたことをしてるように見えるのはわかって
る。でもボクは大人だし、本当にそうしたいんだ」と告げているわけです。

もし、Vimでの編集を続けたいのであれば、":e!"コマンドで元のファイルを読み込
み直してくれます。

==============================================================================
*02.8*	ヘルプの引き方

知りたいことは何でもVimのヘルプから見付けられるでしょう。
どんどん調べてください！
次のコマンドでヘルプの総合案内が表示されます。 >

	:help

ファンクションキー<F1>を使ってもいいです。キーボードに<Help>キーがあれば、
それも使えるかもしれません。
":help" に調べたい項目を指定しなかった場合は、総合案内がヘルプウィンドウに表示
されます。Vimの作者はとっても賢い（いや、とっても怠け者かも）ので、ヘルプウィ
ンドウには普通の編集ウィンドウをそのまま使っています。そのおかげでヘルプの情報
を探す時にもVimの全コマンドが使えます。つまり、h , j , k , l で 上下左右に動け
るのです。
ヘルプウィンドウを閉じるには、エディタを終了する時と同じコマンド、"ZZ"が使えま
す。この場合は、ヘルプウィンドウを閉じるだけで、Vimは終了しません。

ヘルプを見ていると、縦棒"|"で囲まれた文字に気づくでしょう。(例：|help|）
これはハイパーリンクです。この場所にカーソルを置いて、CTRL-](タグジャンプ)
を押します。するとそのタイトルのヘルプにジャンプします。(理由は省きますが、
Vimではハイパーリンクのことをタグと呼びます) CTRL-] はカーソル下の単語を
タグとみなして、その場所にジャンプします。
ジャンプを繰り返した後で、戻りたくなった場合は CTRL-T(タグをポップする)を
押せば直前の場所に戻ります。この場合はCTRL-O（古い場所へのジャンプ）もうまく
動くでしょう。

ヘルプ画面のトップには*help.txt*といった表記があります。"*"で囲まれた名前はヘ
ルプシステム側でタグ（ハイパーリンクの飛び先）を定義する時に使っています。タグ
の使い方の詳細は、|29.1|をご覧ください。

指定した項目のヘルプを見るには次のコマンドを使います。 >

	:help {subject}

例えば"x"コマンドのヘルプを見るには次のように指定します。 >

	:help x

文字の削除方法を知りたければ次のコマンドです。 >

	:help deleting

Vimコマンドの全目次を見るには次のコマンドです。 >

	:help index

コントロール文字のコマンド(例えば、CTRL-A)のヘルプを見るには、"CTRL-"に続けて
その文字を指定します。 >

	:help CTRL-A

Vimにはいろんなモードがあります。特に指定がなければ、ノーマルモードのコマンド
のヘルプが表示されます。例えば、以下のコマンドはノーマルモードのCTRL-Hコマンド
のヘルプを表示します。 >

	:help CTRL-H

他のモードを指定するには、プレフィクスを付けてください。例えば、挿入モードのヘ
ルプが見たいときには、"i_"を付けます。CTRL-Hの場合なら次のようになります。 >

	:help i_CTRL-H

Vimの起動時に、コマンドライン引数が指定できます。引数は先頭が"-"で始まりま
す。例えば、"-t"オプションの意味を知るには次のコマンドを使います。 >

	:help -t

Vimでは数多くのオプションがあり、それを設定することでカスタマイズができます。
オプションのヘルプを見るには、アポストロフィでそれを囲ってください。例えば、
'number'オプションの意味を知るには次のコマンドを使います。 >

	:help 'number'

全モードのプレフックス一覧は |help-context| をご覧ください。

特殊キーを指定したければ、不等号"<",">"で囲みます。例えば、挿入モードでの上
矢印キーのヘルプはこのコマンドです。 >

	:help i_<Up>

次のようなエラーが出て、その意味がよくわからない場合は、

	E37: No write since last change (use ! to override) ~
	E37: 最後の変更が保存されていません (! で変更を破棄) ~

行頭のエラーIDを使えば、そのヘルプを検索できるでしょう。 >

	:help E37

==============================================================================

次章: |usr_03.txt|  カーソルの移動

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
