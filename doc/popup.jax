*popup.txt*  For Vim バージョン 8.1.  Last change: 2019 Jun 12


		  VIMリファレンスマニュアル    by Bram Moolenaar


フローティングウィンドウにテキストを表示する。	*popup* *popup-window*

THIS IS UNDER DESIGN - ANYTHING MAY STILL CHANGE
{これは設計中だ - まだ変更が行われる可能性がある}

1. 前書き			|popup-intro|
2. 関数				|popup-functions|
3. 例				|popup-examples|


{|+textprop| 機能無効でコンパイルされたときはテキストプロパティを使用できない}

==============================================================================
1. 前書き						*popup-intro*

ここではポップアップウィンドウ、つまり通常のウィンドウの上に表示され、プラグイ
ンの管理下にあるテキストについて話している。通常のウィンドウのようにポップアッ
プウィンドウのテキストを編集することはできない。

ポップアップウィンドウは、次のような用途に使用できる:
- コマンドラインを上書きせずに簡単にメッセージを表示する
- ユーザーにダイアログを表示する
- タイプ中にコンテキスト情報を表示する
- 自動補完のための追加情報を与える

ポップアップウィンドウのテキストは |text-properties| で色付けできる。構文ハイ
ライトを使用することもできる。

デフォルトの色は "Pmenu" である。他の何かを好むならば、 "highlight" 引数または
'wincolor' オプションを使用すること。例: >
	hi MyPopupColor ctermbg=lightblue guibg=lightblue
	call setwinvar(winid, '&wincolor', 'MyPopupColor')

'hlsearch' ハイライトはポップアップウィンドウに表示されない。

ポップアップウィンドウは他のウィンドウと同様にウィンドウIDを持つが、動作が異な
る。サイズはVimウィンドウ全体に及ぶことがあり、それは他のウィンドウと重なる。
ポップアップウィンドウも互いに重なり合うことがある。

ポップアップウィンドウにはバッファがあり、そのバッファは常にポップアップウィン
ドウに関連付けられている。このウィンドウはノーマル、ビジュアル、挿入モードでは
使用できない。キーボードフォーカスは得られない。`setbufline()` のような関数を
使ってバッファ内のテキストを変更することができる。このウィンドウとバッファが通
常のウィンドウとバッファと比較してどのように振る舞うかとの違いはもっとたくさん
ある。|popup-buffer| を参照。

これがあなたが探しているものではない場合は、他のポップアップ機能をチェックして
みて欲しい。
- ポップアップメニューは |popup-menu| を参照。
- バルーンは |balloon-eval| を参照。


ウィンドウ位置とサイズ				*popup-position*

ウィンドウの高さは、通常、バッファ内の折り返しの行数と同じである。"maxheight"
プロパティで制限することができる。高さを増やすために空の行を使うか、または、
"minheight" プロパティを使うことができる。

ウィンドウの幅は、通常、バッファ内の最長の行と同じである。"maxwidth" プロパティ
で制限できる。スペースを使って幅を広げるか、または、"minwidth" プロパティを使
うことができる。

デフォルトでは 'wrap'オプションが設定されているのでテキストは消えない。または、
十分なスペースがない場合、ウィンドウは左に移動してテキストをさらに表示する。こ
れは "fixed" プロパティで無効にすることができる。右寄せの場合も無効になる。

Vimは指定した場所にポップアップを表示しようとする。場合によっては、ポップアッ
プがVimのウィンドウの外側に出ると、他の場所に表示される。例えば、
`popup_atcursor()` を使用すると、ポップアップは現在のカーソル位置のすぐ上に表
示されるが、カーソルがVimのウィンドウの最上部に近い場合は、カーソル位置の下に
配置される。

Exコマンドの出力のために画面がスクロールアップすると、ポップアップも移動するの
で、ポップアップは出力を隠さない。

現在のカーソル位置はポップアップウィンドウの下にあっても表示される。この方法で
は、テキストが表示されていない場合でも、その場所を確認できる。



IMPLEMENTATION:
- Why does 'nrformats' leak from the popup window buffer???
- Disable commands, feedkeys(), CTRL-W, etc. in a popup window.
  Use NOT_IN_POPUP_WINDOW for more commands.
- Add 'balloonpopup': instead of showing text, let the callback open a popup
  window and return the window ID.   The popup will then be closed when the
  mouse moves, except when it moves inside the popup.
- For the "moved" property also include mouse movement?
- When selecting text in the popup with modeless selection, do not select
  outside of the popup and don't select the border or padding.
- Add test for dragging the popup window.
- Make redrawing more efficient and avoid flicker:
    - put popup menu also put in popup_mask?
- Invoke filter with character before mapping?
- Figure out the size and position better.
    if wrapping splits a double-wide character
    if wrapping inserts indent
- When drawing on top half a double-wide character, display ">" or "<" in the
  incomplete cell.
- Can the buffer be re-used, to avoid using up lots of buffer numbers?
- Implement all the unimplemented options and features.


==============================================================================
2. 関数							*popup-functions*

THIS IS UNDER DESIGN - ANYTHING MAY STILL CHANGE
{これは設計中だ - まだ変更が行われる可能性がある}

ポップアップウィンドウを作成:
	|popup_create()|	画面の中央に
	|popup_atcursor()|	カーソル位置のすぐ上に。カーソルが移動すると閉
				じる
	|popup_notifiation()|	3秒間通知を表示する
	|popup_dialog()|	パディングとボーダーありで中央に
	|popup_menu()|		リストから項目を選択するためのプロンプト

ポップアップウィンドウの操作:
	|popup_hide()|		ポップアップを一時的に隠す
	|popup_show()|		以前に隠されたポップアップを表示する
	|popup_move()|		ポップアップの位置とサイズを変更する
	|popup_setoptions()|	ポップアップのオプションを上書きする

ポップアップウィンドウを閉じる:
	|popup_close()|		1つのポップアップを閉じる
	|popup_clear()|		すべてのポップアップを閉じる

フィルタ関数:
	|popup_filter_menu()|	アイテムのリストから選択する
	|popup_filter_yesno()|	'y' または 'n' が押されるまでブロックする

その他:
	|popup_getoptions()|	ポップアップの現在のオプションを取得する
	|popup_getpos()|	ポップアップの実際の位置とサイズを取得する


[後で eval.txt に移動する関数]

popup_atcursor({text}, {options})			 *popup_atcursor()*
		カーソルの上に {text} を表示し、カーソルが移動したら閉じる。こ
		れは次のように動作する: >
			call popup_create({text}, {
				\ 'pos': 'botleft',
				\ 'line': 'cursor-1',
				\ 'col': 'cursor',
				\ 'moved': 'WORD',
				\ })
<		プロパティを変更するには{options}を使用する。


							*popup_clear()*
popup_clear()	不作法にふるまうプラグインに対する緊急の解決策: すべてのポップ
		アップウィンドウを閉じる。


popup_close({id} [, {result}])				*popup_close()*
		ポップアップ {id} を閉じる。ウィンドウと関連するバッファは削除
		される。

		ポップアップがコールバックを持つ場合は、ポップアップウィンドウ
		が削除される直前に呼び出される。オプションの {result} が存在す
		る場合、それはコールバックの2番目の引数として渡される。そうで
		なければ、ゼロがコールバックに渡される。


popup_create({text}, {options})				*popup_create()*
		次のどれかである {text} を見せるポップアップウィンドウを開く:
		- 文字列
		- 文字列のリスト
		- テキストプロパティを持つテキスト行のリスト

		{options} は多くのエントリがある辞書である。
		詳細は |popup_create-usage| を参照。

		ウィンドウIDを返す。これは他のポップアップ関数で使用できる。
		ウィンドウ内のバッファの番号を取得するには `winbufnr()` を使用
		すること: >
			let winid = popup_create('hello', {})
			let bufnr = winbufnr(winid)
			call setbufline(bufnr, 2, 'second line')
<		失敗した場合はゼロが返される。


popup_dialog({text}, {options})				*popup_dialog()*
		{未実装} {not implemented yet}
		|popup_create()| と同じだが、これらのデフォルトのオプションに
		なる: >
			call popup_create({text}, {
				\ 'pos': 'center',
				\ 'zindex': 200,
				\ 'border': [],
				\ 'padding': [],
				\})
<		プロパティを変更するには{options}を使用する。例: 値
		'popup_filter_yesno' を持つ 'filter' オプションを追加する。


popup_filter_menu({id}, {key})				*popup_filter_menu()*
		{未実装} {not implemented yet}
		ポップアップに使用できるフィルタ。カーソルキーを操作して、ポッ
		プアップで選択したインデックスを移動する。Space と Enterを使っ
		て項目を選択できる。2番目の引数として選択された行のインデック
		スを使用してポップアップメニューの "callback" を呼び出す。


popup_filter_yesno({id}, {key})				*popup_filter_yesno()*
		{未実装} {not implemented yet}
		ポップアップに使用できるフィルタ。キー 'y'、'Y' および 'n' ま
		たは 'N' のみを処理する。2番目の引数として 'y' または 'Y' に
		1、'n' または 'N' に 0 を指定して、ポップアップメニューの
		"callback" を呼び出す。Esc と CTRL-C を押すと、'n' を押すのと
		同じように機能する。他のキーは無視される。


popup_getoptions({id})					*popup_getoptions()*
		popup {id} の {options} を辞書で返す。
		ゼロ値はオプションが設定されなかったことを意味する。 "zindex"
		の場合、デフォルト値が返される。ゼロではない。

		"highlight" エントリは省略されているので、'wincolor' オプショ
		ンを使用すること: >
			let hl = getwinvar(winid, '&wincolor')

<		ポップアップウィンドウ {id} が見つからない場合は空の辞書が返さ
		れる。


popup_getpos({id})					*popup_getpos()*
		ポップアップ {id} の位置とサイズを返す。これらのエントリを持つ
		辞書を返す:
		    col		ポップアップの画面の桁、1から始まる
		    line	ポップアップの画面の行、1から始まる
		    width	画面セル内のポップアップ全体の幅
		    height	画面セル内のポップアップ全体の高さ
		    core_col	テキストボックスの画面の桁
		    core_line	テキストボックスの画面の行
		    core_width	画面セル内のテキストボックスの幅
		    core_height	画面セル内のテキストボックスの高さ
		    visible	ポップアップが表示されている場合は 1、非表示の
				場合は 0
		Note これらは実際の画面位置である。適用されるサイズと位置のメ
		カニズムに関して `popup_getoptions()` の値とは異なる。

		"core_" 値はパディングとボーダーを除外している。

		ポップアップウィンドウ {id} が見つからない場合は空の辞書が返さ
		れる。


popup_hide({id})						*popup_hide()*
		{id} がポップアップ表示されている場合、それを非表示にする。ポッ
		プアップがフィルタを持っている場合は、ポップアップが非表示に
		なっている限り呼び出されない。
		ウィンドウ {id} が存在しない場合は何も起こらない。ウィンドウ
		{id} が存在するがポップアップウィンドウではない場合、エラーが
		発生する。 *E993*


popup_menu({text}, {options})				 *popup_menu()*
		{未実装} {not implemented yet}
		カーソルの近くに{text}を表示し、カーソルキーで項目の1つを選択
		して処理し、それを閉じるには、SpaceまたはEnterで項目を選択しま
		す。 これを有効にするには、{text} に複数の行が必要です。これは
		次のように機能します: >
			call popup_create({text}, {
				\ 'pos': 'center',
				\ 'zindex': 200,
				\ 'wrap': 0,
				\ 'border': [],
				\ 'filter': 'popup_filter_menu',
				\ })
<		プロパティを変更するには{options}を使用する。少なくとも
		"callback" を選択された項目を扱う関数に設定するべきである。


popup_move({id}, {options})					*popup_move()*
		ポップアップ {id} を {options} で指定された位置に移動する。
		{options} にはポップアップ位置を指定する |popup_create()| 由来
		の項目を含むことができる: "line"、 "col"、 "pos"、
		"maxheight"、 "minheight"、 "maxwidth" および "minwidth"。
		{id} については `popup_hide()` を参照。


popup_notification({text}, {options})			 *popup_notification()*
		Vimのウィンドウの上部に {text} を3秒間表示する。これは次のよ
		うに動作する: >
			call popup_create({text}, {
				\ 'line': 1,
				\ 'col': 10,
				\ 'time': 3000,
				\ 'tab': -1,
				\ 'zindex': 200,
				\ 'drag': 1,
				\ 'highlight': 'WarningMsg',
				\ 'border': [],
				\ 'padding': [0,1,0,1],
				\ })
<		他の通知と重ならないように位置が調整される。
		プロパティを変更するには{options}を使用する。


popup_show({id})						*popup_show()*
		{id} が非表示のポップアップの場合は、それを表示する。
		{id} については `popup_hide()` を参照。


popup_setoptions({id}, {options})			*popup_setoptions()*
		{未実装} {not implemented yet}
		ポップアップ {id} のオプションを {options} のエントリで上書き
		する。


ポップアップバッファとウィンドウ			*popup-buffer*

ポップアップウィンドウのテキストとテキストプロパティを保持するための新しいバッ
ファが作成される。バッファは常にポップアップウィンドウに関連付けられており、操
作は制限されている:
- 無名バッファ
- 'buftype' は "popup"
- 'swapfile' は off
- 'bufhidden' は "hide"
- 'buflisted' は off
- 'undolevels' は -1: アンドゥはできない
- 他のすべてのバッファローカルおよびウィンドウローカルオプションはVimのデフォ
  ルト値に設定されている。

具体的に言及されたオプションを変更することは可能だが、何かが壊れてしまう可能性があるので、それらを放っておいて欲しい。

ウィンドウにはカーソル位置があるが、カーソルは表示されない。

ポップアップウィンドウとバッファのコンテキストでコマンドを実行するには
`win_execute()` を使用すること。例: >
	call win_execute(winid, 'syntax enable')

オプションは `setwinvar()` を使ってウィンドウ上で設定できる。例: >
	call setwinvar(winid, '&wrap', 0)
そしてオプションは `setbufvar()` を使ってバッファに設定することができる。例: >
	call setbufvar(winbufnr(winid), '&filetype', 'java')
Note これはオートコマンドをトリガーしない。必要ならば `win_execute()` を使用す
ること。


POPUP_CREATE() の引数					*popup_create-usage*

|popup_create()| の最初の引数は表示されるテキストと、オプションでテキストプロ
パティを指定する。それは3つの形式のうちの1つである:
- 文字列
- 文字列のリスト
- 辞書のリスト。各辞書は次のエントリを持つ:
	text		表示するテキストを含む文字列。
	props		テキストプロパティのリスト。任意。
			各エントリは |prop_add()| の3番目の引数のような辞書だ
			が、辞書の "col" エントリを使って桁を指定する。以下を
			参照:
			|popup-props|.

|popup_create()| の2番目の引数は任意の辞書である:
	line		ポップアップを配置する画面の行。数値または、カーソルの
			行を使用して行数を加算または減算するには、"cursor"、
			"cursor+1"、または "cursor-1" を使用できる。省略した場
			合、ポップアップは垂直方向の中央に配置される。最初の行
			は1である。
	col		ポップアップを配置する画面の桁。数値または、カーソルの
			桁を使用するには "cursor" を使用し、桁を加算または減算
			するには"cursor+9" または "cursor-9" が使用できる。省
			略した場合、ポップアップは水平方向の中央に配置される。
			最初の桁は1である。
	pos		"topleft"、"topright"、"botleft" または "botright":
			ポップアップのどのコーナーに "line" と "col" が使われ
			るかを定義する。設定されていない場合は "topleft" が使
			用される。 あるいは "center" を使ってポップアップをVim
			のウィンドウの中央に配置することもできる。その場合は
			"line" と "col" は無視される。
	fixed		FALSE (デフォルト)の場合は:
			 - "pos" は "botleft" または "topleft" で、
			 - "wrap" はオフで、
			 - ポップアップは画面の右端で切り捨てられ、
			 ポップアップは画面の内容に合うように左に移動される。
			 これを無効にするには、TRUEに設定する。
	flip		TRUE (デフォルト)かつ位置がカーソルからの相対位置であ
			る場合は、|popupmenu-completion| または、より高い
			"zindex" を持つ別のポップアップと重ならないようにカー
			ソルの下または上に動かす。
			{未実装} {not implemented yet}
	maxheight	コンテンツの最大高さ (ボーダーとパディングを除く)
	minheight	コンテンツの最小高さ (ボーダーとパディングを除く)
	maxwidth	コンテンツの最大幅 (ボーダーとパディングを除く)
	minwidth	コンテンツの最小幅 (ボーダーとパディングを除く)
	firstline	表示する最初のバッファ行。1より大きい場合は、テキスト
			が上にスクロールしたように見える。範囲外の場合、最後の
			バッファ行はウィンドウの最上部に表示される。
	hidden		TRUEの場合、ポップアップは存在しますが表示されない。表
			示するには `popup_show()` を使う。
			{未実装} {not implemented yet}
	tab		-1の場合: すべてのタブページにポップアップを表示する。
			0 (デフォルト)の場合: カレントタブページにポップアップ
			を表示する。
			それ以外の場合は、ポップアップが表示されるタブページの
			番号。無効な場合はカレントタブページが使用される。
			{-1と0のみ実装} {only -1 and 0 are implemented}
	title		ポップアップの最初の項目の上、ボーダーの上に表示される
			テキスト。上枠がない場合は、タイトルを付けるために1行
			のパディングが追加される。
			{未実装} {not implemented yet}
	wrap		行を折り返す場合はTRUE(デフォルトはTRUE)。
	drag		ボーダーを掴んでマウスでポップアップをドラッグできるよ
			うにする場合はTRUE。ポップアップにボーダーがない場合は
			効果がない。
	highlight	'wincolor' オプションに格納されている、テキストに使用
			するハイライトグループ名。
	padding		ポップアップの上/右/下/左のパディングを定義する数値の
			リスト(CSSと同様)。空のリストは、すべて 1 のパディング
			を使用する。パディングは、テキストをボーダーの内側で囲
			む。パディングは 'wincolor' ハイライトを使う。
			例: [1, 2, 1, 3] は上に1行、右に2桁、下に1行、左に3桁
			のパディングにする。
	border		ポップアップの上/右/下/左のボーダーの太さを定義する数
			値のリスト(CSSと同様)。ゼロとゼロ以外の値のみが認識さ
			れる。空のリストは、周囲にボーダーを使用する。
	borderhighlight	ボーダーに使用するハイライトグループ名のリスト。1つの
			エントリの場合はそれがすべてのボーダーに使用される、そ
			れ以外の場合は上/右/下/左のボーダーのハイライトになる。
			例:['TopColor', 'RightColor', 'BottomColor, 'LeftColor']
	borderchars	上/右/下/左のボーダーに使用する文字を定義する、文字の
			リスト。左上/右上/右下/左下の隅に使用する文字が任意で
			続く。
			例: ['-', '|', '-', '|', '┌', '┐', '┘', '└']
			リストに1文字が含まれている場合は、それがすべてに使用
			される。リストに2文字が含まれている場合、最初の文字は
			ボーダーに使用され、2番目の文字はコーナーに使用される。
			'encoding' が "utf-8" のときはデフォルトで2重線が使わ
			れる。それ以外の場合はASCII文字が使われる。
	zindex		ポップアップの優先度。デフォルトは50。最小値は1、最大
			値は32000。
	time		ポップアップが閉じるまでの時間(msec)。省略した場合は
			|popup_close()| を使用する必要がある。
	moved		カーソルが移動した場合にポップアップを閉じるように指定
			する:
			- "any": 少しでもカーソルが移動した場合
			- "word": カーソルが |<cword>| の外側に移動した場合
			- "WORD": カーソルが |<cWORD>| の外側に移動した場合
			- [{start}, {end}]: カーソルが桁 {start} の前、または
			  {end} の後に移動した場合
			カーソルが別の行または別のウィンドウに移動した場合も
			ポップアップは閉じる。
	filter		入力した文字をフィルタ処理できるコールバック。
			|popup-filter| を参照。
	callback	ポップアップが閉じたときに呼び出されるコールバック。
			例えば、|popup_filter_menu()| を使用する場合、
			|popup-callback| を参照。

"zindex" に応じて、ポップアップは他のポップアップの下または上に移動する。補完
メニュー(|popup-menu|)は zindex 100 である。短時間表示されるメッセージについて
は、zindex 1000 を使用することを薦める。

デフォルトではテキストは折り返され、それによって {lines} の行が複数の画面行を
占めるようになる。"wrap" がFALSEの場合、ポップアップの外側またはVimのウィンド
ウの外側のテキストは、表示されずに切り捨てられる。


ポップアップテキストプロパティ				*popup-props*

これらは |prop_add()| の3番目の引数と同じである。ただし:
- "lnum" は常にリストの現在の行である
- "bufnr" は常にポップアップのバッファである
- "col" は別の引数ではなく辞書にある
- "transparent" は余分である
そういうわけで、以下を取得する:
	col		starting column, counted in bytes, use one for the
			first column.
	length		length of text in bytes; can be zero
	end_lnum	line number for the end of the text
	end_col		column just after the text; not used when "length" is
			present; when {col} and "end_col" are equal, this is a
			zero-width text property
	id		user defined ID for the property; when omitted zero is
			used
	type		name of the text property type, as added with
			|prop_type_add()|
	transparent	do not show these characters, show the text under it;
			if there is a border character to the right or below
			it will be made transparent as well
			{未実装} {not implemented yet}


ポップアップフィルタ					*popup-filter*

A callback that gets any typed keys while a popup is displayed.  The filter is
not invoked when the popup is hidden.

The filter can return TRUE to indicate the key has been handled and is to be
discarded, or FALSE to let Vim handle the key as usual in the current state.
In case it returns FALSE and there is another popup window visible, that
filter is also called.  The filter of the popup window with the highest zindex
is called first.

The filter function is called with two arguments: the ID of the popup and the
key, e.g.: >
	func MyFilter(winid, key)
	  if a:key == "\<F2>"
	    " do something
	    return 1
	  endif
	  if a:key == 'x'
	    call popup_close(a:winid)
	    return 1
	  endif
	  return 0
	endfunc

Currently the key is what results after any mapping.  This may change...

Some common key actions:
	x		close the popup (see note below)
	cursor keys	select another entry
	Tab		accept current suggestion

A mouse click arrives as <LeftMouse>.  The coordinates are in
v:mouse_popup_col and v:mouse_popup_row.  The top-left screen cell of the
popup is col 1, row 1 (not counting the border).

Vim provides standard filters |popup_filter_menu()| and
|popup_filter_yesno()|.

Note that "x" is the normal way to close a popup.  You may want to use Esc,
but since many keys start with an Esc character, there may be a delay before
Vim recognizes the Esc key.  If you do use Esc, it is recommended to set the
'ttimeoutlen' option to 100 and set 'timeout' and/or 'ttimeout'.


ポップアップコールバック				*popup-callback*

A callback that is invoked when the popup closes.  Used by
|popup_filter_menu()|.

The callback is invoked with two arguments: the ID of the popup window and the
result, which could be an index in the popup lines, or whatever was passed as
the second argument of `popup_close()`.

If the popup is closed because the cursor moved, the number -1 is passed to
the callback.

==============================================================================
3. 例							*popup-examples*

TODO

Prompt the user to press y/Y or n/N: >

	func MyDialogHandler(id, result)
	   if a:result
	      " ... 'y' or 'Y' was pressed
	   endif
	endfunc

	call popup_create(['Continue? y/n'], {
		\ 'filter': 'popup_filter_yesno',
		\ 'callback': 'MyDialogHandler',
		\ })
<

 vim:tw=78:ts=8:noet:ft=help:norl:
