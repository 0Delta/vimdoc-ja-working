*popup.txt*  For Vim バージョン 8.1.  Last change: 2019 Jun 10


		  VIMリファレンスマニュアル    by Bram Moolenaar


フローティングウィンドウにテキストを表示する。	*popup* *popup-window*

THIS IS UNDER DESIGN - ANYTHING MAY STILL CHANGE
{これは設計中だ - まだ変更が行われる可能性がある}

1. 前書き			|popup-intro|
2. 関数				|popup-functions|
3. 例				|popup-examples|


{|+textprop| 機能無効でコンパイルされたときはテキストプロパティを使用できない}

==============================================================================
1. 前書き						*popup-intro*

ここではポップアップウィンドウ、つまり通常のウィンドウの上に表示され、プラグイ
ンの管理下にあるテキストについて話している。通常のウィンドウのようにポップアッ
プウィンドウのテキストを編集することはできない。

ポップアップウィンドウは、次のような用途に使用できる:
- コマンドラインを上書きせずに簡単にメッセージを表示する
- ユーザーにダイアログを表示する
- タイプ中にコンテキスト情報を表示する
- 自動補完のための追加情報を与える

ポップアップウィンドウのテキストは |text-properties| で色付けできる。構文ハイ
ライトを使用することもできる。

デフォルトの色は "Pmenu" である。他の何かを好むならば、 "highlight" 引数または
'wincolor' オプションを使用すること。例: >
	hi MyPopupColor ctermbg=lightblue guibg=lightblue
	call setwinvar(winid, '&wincolor', 'MyPopupColor')

'hlsearch' とマッチハイライトはポップアップウィンドウに表示されない。

ポップアップウィンドウは他のウィンドウと同様にウィンドウIDを持つが、動作が異な
る。サイズはVimウィンドウ全体に及ぶことがあり、それは他のウィンドウと重なる。
ポップアップウィンドウも互いに重なり合うことがある。

ポップアップウィンドウにはバッファがあり、そのバッファは常にポップアップウィン
ドウに関連付けられている。このウィンドウはノーマル、ビジュアル、挿入モードでは
使用できない。キーボードフォーカスは得られない。`setbufline()` のような関数を
使ってバッファ内のテキストを変更することができる。このウィンドウとバッファが通
常のウィンドウとバッファと比較してどのように振る舞うかとの違いはもっとたくさん
ある。|popup-buffer| を参照。

これがあなたが探しているものではない場合は、他のポップアップ機能をチェックして
みて欲しい。
- ポップアップメニューは |popup-menu| を参照。
- バルーンは |balloon-eval| を参照。


ウィンドウ位置とサイズ				*popup-position*

ウィンドウの高さは、通常、バッファ内の折り返しの行数と同じである。"maxheight"
プロパティで制限することができる。高さを増やすために空の行を使うか、または、
"minheight" プロパティを使うことができる。

ウィンドウの幅は、通常、バッファ内の最長の行と同じである。"maxwidth" プロパティ
で制限できる。幅を広げるためにスペースを使うか、または、"minwidth" プロパティ
を使うことができる。

デフォルトでは 'wrap'オプションが設定されているのでテキストは消えない。または、
十分なスペースがない場合、ウィンドウは左に移動してテキストをさらに表示する。こ
れは "fixed" プロパティで無効にすることができる。右寄せの場合も無効になる。

Vimは指定した場所にポップアップを表示しようとする。場合によっては、ポップアッ
プがVimのウィンドウの外側に出ると、他の場所に表示される。例えば、
`popup_atcursor()` を使用すると、ポップアップは現在のカーソル位置のすぐ上に表
示されるが、カーソルがVimのウィンドウの最上部に近い場合は、カーソル位置の下に
配置される。

Exコマンドの出力のために画面がスクロールアップすると、ポップアップも移動するの
で、ポップアップは出力を隠さない。




IMPLEMENTATION:
- buffers remain after a popup was deleted.
- Why does 'nrformats' leak from the popup window buffer???
- Add 'balloonpopup': instead of showing text, let the callback open a popup
  window and return the window ID.   The popup will then be closed when the
  mouse moves, except when it moves inside the popup.
- For the "moved" property also include mouse movement?
- Make redrawing more efficient and avoid flicker:
    - put popup menu also put in popup_mask?
- Disable commands, feedkeys(), CTRL-W, etc. in a popup window.
  Use NOT_IN_POPUP_WINDOW for more commands.
- Invoke filter with character before mapping?
- Figure out the size and position better.
    if wrapping splits a double-wide character
    if wrapping inserts indent
- Can the buffer be re-used, to avoid using up lots of buffer numbers?
- Implement all the unimplemented options and features.


==============================================================================
2. 関数							*popup-functions*

THIS IS UNDER DESIGN - ANYTHING MAY STILL CHANGE
{これは設計中だ - まだ変更が行われる可能性がある}

[後で eval.txt に移動する関数は、ここで関数の概要を保持すること]

popup_atcursor({text}, {options})			 *popup_atcursor()*
		カーソルの上に {text} を表示し、カーソルが移動したら閉じる。こ
		れは次のように動作する: >
			call popup_create({text}, {
				\ 'pos': 'botleft',
				\ 'line': 'cursor-1',
				\ 'col': 'cursor',
				\ 'moved': 'WORD',
				\ })
<		プロパティを変更するには{options}を使用する。


							*popup_clear()*
popup_clear()	不作法にふるまうプラグインに対する緊急の解決策: すべてのポップ
		アップウィンドウを閉じる。


popup_close({id} [, {result}])				*popup_close()*
		ポップアップ {id} を閉じる。ウィンドウと関連するバッファは削除
		される。

		ポップアップがコールバックを持つ場合は、ポップアップウィンドウ
		が削除される直前に呼び出される。オプションの {result} が存在す
		る場合、それはコールバックの2番目の引数として渡される。そうで
		なければ、ゼロがコールバックに渡される。


popup_create({text}, {options})				*popup_create()*
		次のどれかである {text} を見せるポップアップウィンドウを開く:
		- 文字列
		- 文字列のリスト
		- テキストプロパティを持つテキスト行のリスト

		{options} は多くのエントリがある辞書である。
		詳細は |popup_create-usage| を参照。

		ウィンドウIDを返す。これは他のポップアップ関数で使用できる。
		ウィンドウ内のバッファの番号を取得するには `winbufnr()` を使用
		すること: >
			let winid = popup_create('hello', {})
			let bufnr = winbufnr(winid)
			call setbufline(bufnr, 2, 'second line')
<		失敗した場合はゼロが返される。


popup_dialog({text}, {options})				*popup_dialog()*
		{未実装} {not implemented yet}
		|popup_create()| と同じだが、これらのデフォルトのオプションに
		なる: >
			call popup_create({text}, {
				\ 'pos': 'center',
				\ 'zindex': 200,
				\ 'border': [],
				\ 'padding': [],
				\})
<		プロパティを変更するには{options}を使用する。


popup_filter_menu({id}, {key})				*popup_filter_menu()*
		{未実装} {not implemented yet}
		Filter that can be used for a popup. It handles the cursor
		keys to move the selected index in the popup. Space and Enter
		can be used to select an item.  Invokes the "callback" of the
		popup menu with the index of the selected line as the second
		argument.


popup_filter_yesno({id}, {key})				*popup_filter_yesno()*
		{未実装} {not implemented yet}
		Filter that can be used for a popup. It handles only the keys
		'y', 'Y' and 'n' or 'N'.  Invokes the "callback" of the
		popup menu with the 1 for 'y' or 'Y' and zero for 'n' or 'N'
		as the second argument.  Pressing Esc and CTRL-C works like
		pressing 'n'.


popup_getoptions({id})					*popup_getoptions()*
		popup {id} の {options} を辞書で返す。
		ゼロ値はオプションが設定されなかったことを意味する。 "zindex"
		の場合、デフォルト値が返される。ゼロではない。

		"highlight" エントリは省略されているので、'wincolor' オプショ
		ンを使用すること: >
			let hl = getwinvar(winid, '&wincolor')

<		ポップアップウィンドウ {id} が見つからない場合は空の辞書が返さ
		れる。


popup_getpos({id})					*popup_getpos()*
		ポップアップ {id} の位置とサイズを返す。これらのエントリを持つ
		辞書を返す:
		    col		ポップアップの画面の桁、1から始まる
		    line	ポップアップの画面の行、1から始まる
		    width	画面セル内のポップアップ全体の幅
		    height	画面セル内のポップアップ全体の高さ
		    core_col	テキストボックスの画面の桁
		    core_line	テキストボックスの画面の行
		    core_width	画面セル内のテキストボックスの幅
		    core_height	画面セル内のテキストボックスの高さ
		    visible	ポップアップが表示されている場合は 1、非表示の
				場合は 0
		Note これらは実際の画面位置である。適用されるサイズと位置のメ
		カニズムに関して `popup_getoptions()` の値とは異なる。

		"core_" 値はパディングとボーダーを除外している。

		ポップアップウィンドウ {id} が見つからない場合は空の辞書が返さ
		れる。


popup_hide({id})						*popup_hide()*
		{id} がポップアップ表示されている場合、それを非表示にする。ポッ
		プアップがフィルタを持っている場合は、ポップアップが非表示に
		なっている限り呼び出されない。
		ウィンドウ {id} が存在しない場合は何も起こらない。ウィンドウ
		{id} が存在するがポップアップウィンドウではない場合、エラーが
		発生する。 *E993*


popup_menu({text}, {options})				 *popup_menu()*
		{未実装} {not implemented yet}
		カーソルの近くに{text}を表示し、カーソルキーで項目の1つを選択
		して処理し、それを閉じるには、SpaceまたはEnterで項目を選択しま
		す。 これを有効にするには、{text} に複数の行が必要です。これは
		次のように機能します: >
			call popup_create({text}, {
				\ 'pos': 'center',
				\ 'zindex': 200,
				\ 'wrap': 0,
				\ 'border': [],
				\ 'filter': 'popup_filter_menu',
				\ })
<		プロパティを変更するには{options}を使用する。少なくとも
		"callback" を選択された項目を扱う関数に設定するべきである。


popup_move({id}, {options})					*popup_move()*
		ポップアップ {id} を {options} で指定された位置に移動する。
		{options} にはポップアップ位置を指定する |popup_create()| 由来
		の項目を含むことができる: "line"、 "col"、 "pos"、
		"maxheight"、 "minheight"、 "maxwidth" および "minwidth"。
		{id} については `popup_hide()` を参照。


popup_notification({text}, {options})			 *popup_notification()*
		{未実装} {not implemented yet}
		Vimのウィンドウの上部に {text} を3秒間表示する。これは次のよ
		うに動作する: >
			call popup_create({text}, {
				\ 'line': 1,
				\ 'col': 10,
				\ 'time': 3000,
				\ 'tab': -1,
				\ 'zindex': 200,
				\ 'highlight': 'WarningMsg',
				\ 'border': [],
				\ })
<		プロパティを変更するには{options}を使用する。


popup_show({id})						*popup_show()*
		{id} が非表示のポップアップの場合は、それを表示する。
		{id} については `popup_hide()` を参照。


popup_setoptions({id}, {options})			*popup_setoptions()*
		{未実装} {not implemented yet}
		Override options in popup {id} with entries in {options}.


POPUP BUFFER AND WINDOW					*popup-buffer*

A new buffer is created to hold the text and text properties of the popup
window.  The buffer is always associated with the popup window and
manipulation is restricted:
- the buffer has no name
- 'buftype' is "popup"
- 'swapfile' is off
- 'bufhidden' is "hide"
- 'buflisted' is off
- 'undolevels' is -1: no undo at all
- all other buffer-local and window_local options are set to their Vim default
  value.

It is possible to change the specifically mentioned options, but anything
might break then, so better leave them alone.

The window does have a cursor position, but the cursor is not displayed.

To execute a command in the context of the popup window and buffer use
`win_execute()`.  Example: >
	call win_execute(winid, 'syntax enable')

Options can be set on the window with `setwinvar()`, e.g.: >
	call setwinvar(winid, '&wrap', 0)
And options can be set on the buffer with `setbufvar()`, e.g.: >
	call setbufvar(winbufnr(winid), '&filetype', 'java')
Note that this does not trigger autocommands.  Use `win_execute()` if you do
need them.


POPUP_CREATE() ARGUMENTS				*popup_create-usage*

The first argument of |popup_create()| specifies the text to be displayed, and
optionally text properties.  It is in one of three forms:
- a string
- a list of strings
- a list of dictionaries, where each dictionary has these entries:
	text		String with the text to display.
	props		A list of text properties.  Optional.
			Each entry is a dictionary, like the third argument of
			|prop_add()|, but specifying the column in the
			dictionary with a "col" entry, see below:
			|popup-props|.

The second argument of |popup_create()| is a dictionary with options:
	line		Screen line where to position the popup.  Can use a
			number or "cursor", "cursor+1" or "cursor-1" to use
			the line of the cursor and add or subtract a number of
			lines.  If omitted the popup is vertically centered.
			The first line is 1.
	col		Screen column where to position the popup.  Can use a
			number or "cursor" to use the column of the cursor,
			"cursor+9" or "cursor-9" to add or subtract a number
			of columns.  If omitted the popup is horizontally
			centered.  The first column is 1.
	pos		"topleft", "topright", "botleft" or "botright":
			defines what corner of the popup "line" and "col" are
			used for.  When not set "topleft" is used.
			Alternatively "center" can be used to position the
			popup in the center of the Vim window, in which case
			"line" and "col" are ignored.
	fixed		When FALSE (the default), and:
			 - "pos" is "botleft" or "topleft", and
			 - "wrap" is off, and
			 - the popup would be truncated at the right edge of
			   the screen, then
			the popup is moved to the left so as to fit the
			contents on the screen.  Set to TRUE to disable this.
	flip		When TRUE (the default) and the position is relative
			to the cursor, flip to below or above the cursor to
			avoid overlap with the |popupmenu-completion| or
			another popup with a higher "zindex".
			{未実装} {not implemented yet}
	maxheight	Maximum height of the contents, excluding border and
			padding.
	minheight	Minimum height of the contents, excluding border and
			padding.
	maxwidth	Maximum width of the contents, excluding border and
			padding.
	minwidth	Minimum width of the contents, excluding border and
			padding.
	hidden		When TRUE the popup exists but is not displayed; use
			`popup_show()` to unhide it.
			{未実装} {not implemented yet}
	tab		When -1: display the popup on all tabs.
			When 0 (the default): display the popup on the current
			tab.
			Otherwise the number of the tab page the popup is
			displayed on; when invalid the current tab is used.
			{only -1 and 0 are implemented}
	title		Text to be displayed above the first item in the
			popup, on top of any border.  If there is no top
			border on line of padding is added to put the title on.
			{未実装} {not implemented yet}
	wrap		TRUE to make the lines wrap (default TRUE).
	highlight	Highlight group name to use for the text, stored in
			the 'wincolor' option.
	padding		List with numbers, defining the padding
			above/right/below/left of the popup (similar to CSS).
			An empty list uses a padding of 1 all around.  The
			padding goes around the text, inside any border.
			Padding uses the 'wincolor' highlight.
			Example: [1, 2, 1, 3] has 1 line of padding above, 2
			columns on the right, 1 line below and 3 columns on
			the left.
	border		List with numbers, defining the border thickness
			above/right/below/left of the popup (similar to CSS).
			Only values of zero and non-zero are recognized.
			An empty list uses a border all around.
	borderhighlight	List of highlight group names to use for the border.
			When one entry it is used for all borders, otherwise
			the highlight for the top/right/bottom/left border.
			Example: ['TopColor', 'RightColor', 'BottomColor,
			'LeftColor']
	borderchars	List with characters, defining the character to use
			for the top/right/bottom/left border.  Optionally
			followed by the character to use for the
			topleft/topright/botright/botleft corner.
			Example: ['-', '|', '-', '|', '┌', '┐', '┘', '└']
			When the list has one character it is used for all.
			When the list has two characters the first is used for
			the border lines, the second for the corners.
			By default a double line is used all around when
			'encoding' is "utf-8", otherwise ASCII characters are
			used.
	zindex		Priority for the popup, default 50.  Mininum value is
			1, maximum value is 32000.
	time		Time in milliseconds after which the popup will close.
			When omitted |popup_close()| must be used.
	moved		Specifies to close the popup if the cursor moved:
			- "any": if the cursor moved at all
			- "word": if the cursor moved outside |<cword>|
			- "WORD": if the cursor moved outside |<cWORD>|
			- [{start}, {end}]: if the cursor moved before column
			  {start} or after {end}
			The popup also closes if the cursor moves to another
			line or to another window.
	filter		A callback that can filter typed characters, see
			|popup-filter|.
	callback	A callback that is called when the popup closes, e.g.
			when using |popup_filter_menu()|, see |popup-callback|.

Depending on the "zindex" the popup goes under or above other popups.  The
completion menu (|popup-menu|) has zindex 100.  For messages that occur for a
short time the suggestion is to use zindex 1000.

By default text wraps, which causes a line in {lines} to occupy more than one
screen line.  When "wrap" is FALSE then the text outside of the popup or
outside of the Vim window will not be displayed, thus truncated.


POPUP TEXT PROPERTIES					*popup-props*

These are similar to the third argument of |prop_add()| except:
- "lnum" is always the current line in the list
- "bufnr" is always the buffer of the popup
- "col" is in the Dict instead of a separate argument
- "transparent" is extra
So we get:
	col		starting column, counted in bytes, use one for the
			first column.
	length		length of text in bytes; can be zero
	end_lnum	line number for the end of the text
	end_col		column just after the text; not used when "length" is
			present; when {col} and "end_col" are equal, this is a
			zero-width text property
	id		user defined ID for the property; when omitted zero is
			used
	type		name of the text property type, as added with
			|prop_type_add()|
	transparent	do not show these characters, show the text under it;
			if there is a border character to the right or below
			it will be made transparent as well
			{未実装} {not implemented yet}


POPUP FILTER						*popup-filter*

A callback that gets any typed keys while a popup is displayed.  The filter is
not invoked when the popup is hidden.

The filter can return TRUE to indicate the key has been handled and is to be
discarded, or FALSE to let Vim handle the key as usual in the current state.
In case it returns FALSE and there is another popup window visible, that
filter is also called.  The filter of the popup window with the highest zindex
is called first.

The filter function is called with two arguments: the ID of the popup and the
key, e.g.: >
	func MyFilter(winid, key)
	  if a:key == "\<F2>"
	    " do something
	    return 1
	  endif
	  if a:key == 'x'
	    call popup_close(a:winid)
	    return 1
	  endif
	  return 0
	endfunc

Currently the key is what results after any mapping.  This may change...

Some common key actions:
	x		close the popup (see note below)
	cursor keys	select another entry
	Tab		accept current suggestion

A mouse click arrives as <LeftMouse>.  The coordinates are in
v:mouse_popup_col and v:mouse_popup_row.  The top-left screen cell of the
popup is col 1, row 1 (not counting the border).

Vim provides standard filters |popup_filter_menu()| and
|popup_filter_yesno()|.

Note that "x" is the normal way to close a popup.  You may want to use Esc,
but since many keys start with an Esc character, there may be a delay before
Vim recognizes the Esc key.  If you do use Esc, it is recommended to set the
'ttimeoutlen' option to 100 and set 'timeout' and/or 'ttimeout'.


POPUP CALLBACK						*popup-callback*

A callback that is invoked when the popup closes.  Used by
|popup_filter_menu()|.

The callback is invoked with two arguments: the ID of the popup window and the
result, which could be an index in the popup lines, or whatever was passed as
the second argument of `popup_close()`.

If the popup is closed because the cursor moved, the number -1 is passed to
the callback.

==============================================================================
3. 例							*popup-examples*

TODO

Prompt the user to press y/Y or n/N: >

	func MyDialogHandler(id, result)
	   if a:result
	      " ... 'y' or 'Y' was pressed
	   endif
	endfunc

	call popup_create(['Continue? y/n'], {
		\ 'filter': 'popup_filter_yesno',
		\ 'callback': 'MyDialogHandler',
		\ })
<

 vim:tw=78:ts=8:noet:ft=help:norl:
